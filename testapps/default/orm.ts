import { buildASTSchema, Kind, OperationTypeNode } from 'graphql';

import {
	TypeConditionError,
	NamedType,
	Field,
	InlineFragment,
	Argument,
	Variable,
	Selection,
	SelectionSet,
	SelectionBuilder,
	namedType,
	field,
	inlineFragment,
	argument,
	selectionSet,
} from '@timkendall/tql';

export type { Result, SelectionResult, Variables } from '@timkendall/tql';
export { $ } from '@timkendall/tql';

export const SCHEMA = buildASTSchema({
	kind: Kind.DOCUMENT,
	definitions: [
		{
			kind: Kind.DIRECTIVE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'weather_cacheControl',
			},
			arguments: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'maxAge',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'scope',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'weather_CacheControlScope',
						},
					},
					directives: [],
				},
			],
			repeatable: false,
			locations: [
				{
					kind: Kind.NAME,
					value: 'FIELD_DEFINITION',
				},
				{
					kind: Kind.NAME,
					value: 'INTERFACE',
				},
				{
					kind: Kind.NAME,
					value: 'OBJECT',
				},
			],
		},
		{
			kind: Kind.DIRECTIVE_DEFINITION,
			description: {
				kind: Kind.STRING,
				value: '',
				block: true,
			},
			name: {
				kind: Kind.NAME,
				value: 'spacex_rateLimit',
			},
			arguments: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'identityArgs',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'message',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'window',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
			],
			repeatable: false,
			locations: [
				{
					kind: Kind.NAME,
					value: 'FIELD_DEFINITION',
				},
			],
		},
		{
			kind: Kind.DIRECTIVE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'fromClaim',
			},
			arguments: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Claim',
						},
					},
					directives: [],
				},
			],
			repeatable: false,
			locations: [
				{
					kind: Kind.NAME,
					value: 'VARIABLE_DEFINITION',
				},
			],
		},
		{
			kind: Kind.DIRECTIVE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'hooksVariable',
			},
			arguments: [],
			repeatable: false,
			locations: [
				{
					kind: Kind.NAME,
					value: 'VARIABLE_DEFINITION',
				},
			],
		},
		{
			kind: Kind.DIRECTIVE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'jsonSchema',
			},
			arguments: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value:
							'The value of both of these keywords MUST be a string.\n\nBoth of these keywords can be used to decorate a user interface with\ninformation about the data produced by this user interface.  A title\nwill preferably be short, whereas a description will provide\nexplanation about the purpose of the instance described by this\nschema.',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value:
							'The value of both of these keywords MUST be a string.\n\nBoth of these keywords can be used to decorate a user interface with\ninformation about the data produced by this user interface.  A title\nwill preferably be short, whereas a description will provide\nexplanation about the purpose of the instance described by this\nschema.',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'description',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value:
							'The value of "multipleOf" MUST be a number, strictly greater than 0.\n\nA numeric instance is valid only if division by this keyword\'s value\nresults in an integer.',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'multipleOf',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value:
							'The value of "maximum" MUST be a number, representing an inclusive\nupper limit for a numeric instance.\n\nIf the instance is a number, then this keyword validates only if the\ninstance is less than or exactly equal to "maximum".',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'maximum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value:
							'The value of "exclusiveMaximum" MUST be number, representing an\nexclusive upper limit for a numeric instance.\n\nIf the instance is a number, then the instance is valid only if it\nhas a value strictly less than (not equal to) "exclusiveMaximum".',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'exclusiveMaximum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value:
							'The value of "minimum" MUST be a number, representing an inclusive\nlower limit for a numeric instance.\n\nIf the instance is a number, then this keyword validates only if the\ninstance is greater than or exactly equal to "minimum".',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'minimum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value:
							'The value of "exclusiveMinimum" MUST be number, representing an\nexclusive lower limit for a numeric instance.\n\nIf the instance is a number, then the instance is valid only if it\nhas a value strictly greater than (not equal to) "exclusiveMinimum".',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'exclusiveMinimum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value:
							'The value of this keyword MUST be a non-negative integer.\n\nA string instance is valid against this keyword if its length is less\nthan, or equal to, the value of this keyword.\n\nThe length of a string instance is defined as the number of its\ncharacters as defined by RFC 7159 [RFC7159].',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'maxLength',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value:
							'The value of this keyword MUST be a non-negative integer.\n\nA string instance is valid against this keyword if its length is\ngreater than, or equal to, the value of this keyword.\n\nThe length of a string instance is defined as the number of its\ncharacters as defined by RFC 7159 [RFC7159].\n\nOmitting this keyword has the same behavior as a value of 0.',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'minLength',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value:
							'The value of this keyword MUST be a string.  This string SHOULD be a\nvalid regular expression, according to the ECMA 262 regular\nexpression dialect.\n\nA string instance is considered valid if the regular expression\nmatches the instance successfully.  Recall: regular expressions are\nnot implicitly anchored.',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'pattern',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value:
							'The value of this keyword MUST be a non-negative integer.\n\nAn array instance is valid against "maxItems" if its size is less\nthan, or equal to, the value of this keyword.',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'maxItems',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value:
							'The value of this keyword MUST be a non-negative integer.\n\nAn array instance is valid against "minItems" if its size is greater\nthan, or equal to, the value of this keyword.\n\nOmitting this keyword has the same behavior as a value of 0.',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'minItems',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value:
							'The value of this keyword MUST be a boolean.\n\nIf this keyword has boolean value false, the instance validates\nsuccessfully.  If it has boolean value true, the instance validates\nsuccessfully if all of its elements are unique.\n\nOmitting this keyword has the same behavior as a value of false.',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'uniqueItems',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'commonPattern',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'COMMON_REGEX_PATTERN',
						},
					},
					directives: [],
				},
			],
			repeatable: false,
			locations: [
				{
					kind: Kind.NAME,
					value: 'VARIABLE_DEFINITION',
				},
			],
		},
		{
			kind: Kind.DIRECTIVE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'rbac',
			},
			arguments: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: 'the user must match all roles',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'requireMatchAll',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'WG_ROLE',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: 'the user must match at least one of the roles',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'requireMatchAny',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'WG_ROLE',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: 'the user must not match all of the roles',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'denyMatchAll',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'WG_ROLE',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: 'the user must not match any of the roles',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'denyMatchAny',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'WG_ROLE',
							},
						},
					},
					directives: [],
				},
			],
			repeatable: false,
			locations: [
				{
					kind: Kind.NAME,
					value: 'QUERY',
				},
				{
					kind: Kind.NAME,
					value: 'MUTATION',
				},
				{
					kind: Kind.NAME,
					value: 'SUBSCRIPTION',
				},
			],
		},
		{
			kind: Kind.DIRECTIVE_DEFINITION,
			description: {
				kind: Kind.STRING,
				value:
					'The directive @injectCurrentDateTime injects a DateTime string of the current date and time into the variable.\nThis variable MUST be a string compatible scalar. \n\nThe default format, is: ISO 8601\nIf no format is chosen, the default format is used.\nCustom formats are allowed by specifying a format conforming to the Golang specification for specifying a date time format.',
				block: true,
			},
			name: {
				kind: Kind.NAME,
				value: 'injectCurrentDateTime',
			},
			arguments: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'format',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'WunderGraphDateTimeFormat',
						},
					},
					defaultValue: {
						kind: Kind.ENUM,
						value: 'ISO8601',
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: 'customFormat must conform to the Golang specification for specifying a date time format',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'customFormat',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
			],
			repeatable: false,
			locations: [
				{
					kind: Kind.NAME,
					value: 'VARIABLE_DEFINITION',
				},
			],
		},
		{
			kind: Kind.DIRECTIVE_DEFINITION,
			description: {
				kind: Kind.STRING,
				value:
					'The directive @injectGeneratedUUID injects a generated UUID into the variable.\nThis variable MUST be a string.\nAt the same time, it removes the variable from the input definition,\ndisallowing the user to supply it.\n\nThis means, the UUID is 100% generated server-side and can be considered untempered.',
				block: true,
			},
			name: {
				kind: Kind.NAME,
				value: 'injectGeneratedUUID',
			},
			arguments: [],
			repeatable: false,
			locations: [
				{
					kind: Kind.NAME,
					value: 'VARIABLE_DEFINITION',
				},
			],
		},
		{
			kind: Kind.DIRECTIVE_DEFINITION,
			description: {
				kind: Kind.STRING,
				value:
					'The @internalOperation Directive marks an Operation as internal.\nBy doing so, the Operation is no longer accessible from the public API.\nIt can only be accessed by internal services, like hooks.',
				block: true,
			},
			name: {
				kind: Kind.NAME,
				value: 'internalOperation',
			},
			arguments: [],
			repeatable: false,
			locations: [
				{
					kind: Kind.NAME,
					value: 'QUERY',
				},
				{
					kind: Kind.NAME,
					value: 'MUTATION',
				},
				{
					kind: Kind.NAME,
					value: 'SUBSCRIPTION',
				},
			],
		},
		{
			kind: Kind.DIRECTIVE_DEFINITION,
			description: {
				kind: Kind.STRING,
				value:
					'The directive @injectEnvironmentVariable allows you to inject an environment variable into the variable definition.',
				block: true,
			},
			name: {
				kind: Kind.NAME,
				value: 'injectEnvironmentVariable',
			},
			arguments: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
			],
			repeatable: false,
			locations: [
				{
					kind: Kind.NAME,
					value: 'VARIABLE_DEFINITION',
				},
			],
		},
		{
			kind: Kind.DIRECTIVE_DEFINITION,
			description: {
				kind: Kind.STRING,
				value:
					"The @export directive instructs the Execution Planner to export the field during the execution into the variable of the 'as' argument.\nAs the execution is depth first, a field can only be used after it has been exported.\nAdditionally, a field can only be used after using the '_join' field or on a different data source.\nIt's not possible to export a field and use it in for the same data source.\n\nNote that the @export directive only works on fields that return a single value.\nIt's not possible to export a list or object field.",
				block: true,
			},
			name: {
				kind: Kind.NAME,
				value: 'export',
			},
			arguments: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: "The argument 'as' is the name of the variable to export the field to.",
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'as',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
			],
			repeatable: false,
			locations: [
				{
					kind: Kind.NAME,
					value: 'FIELD',
				},
			],
		},
		{
			kind: Kind.DIRECTIVE_DEFINITION,
			description: {
				kind: Kind.STRING,
				value:
					"The directive @internal marks a variable definition as internal so that clients can't access it.\nThe field is also not visible in the public API.\nIt's only being used as an internal variable to export fields into.",
				block: true,
			},
			name: {
				kind: Kind.NAME,
				value: 'internal',
			},
			arguments: [],
			repeatable: false,
			locations: [
				{
					kind: Kind.NAME,
					value: 'VARIABLE_DEFINITION',
				},
			],
		},
		{
			kind: Kind.DIRECTIVE_DEFINITION,
			description: {
				kind: Kind.STRING,
				value:
					'The @transform directive allows to apply transformations to the response.\nBy applying the directive, the shape of the response can be altered,\nwhich will also modify the JSON-Schema of the response.\nThat is, you will keep full type safety and code-generation for transformed fields.',
				block: true,
			},
			name: {
				kind: Kind.NAME,
				value: 'transform',
			},
			arguments: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value:
							'Using the \'get\' transformation allows you to extract a nested field using a JSON path.\nThis is useful to unnest data, e.g. when using the \'_join\' field, which adds an extra layer of nesting.\n\nExample:\n\nquery GetName {\n    name: me @transform(get: "info.name") {\n        info {\n            name\n        }\n    }\n}\n\nBefore the transformation, the resolve looks like this:\n\n{\n    "name": {\n        "info": {\n            "name": "John Doe"\n        }\n    }\n}\n\nWith the transformation applied, the response will be reshaped like this:\n\n{\n    "name": "John Doe"\n}',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'get',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
			],
			repeatable: false,
			locations: [
				{
					kind: Kind.NAME,
					value: 'FIELD',
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'Query',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'jsp_getPosts',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'tld',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'String',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'jsp_Post',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'jsp_getUsers',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'tld',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'String',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'jsp_User',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'jsp_getUser',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'tld',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'String',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'id',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'Int',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'jsp_User',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'jsp_getPost',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'tld',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'String',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'id',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'Int',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'jsp_Post',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'weather_getCityById',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'config',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'weather_ConfigInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'id',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NON_NULL_TYPE,
									type: {
										kind: Kind.NAMED_TYPE,
										name: {
											kind: Kind.NAME,
											value: 'String',
										},
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'weather_City',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'weather_getCityByName',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'config',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'weather_ConfigInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'country',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'name',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'String',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'weather_City',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'countries_continent',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'code',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'ID',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'countries_Continent',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'countries_continents',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'filter',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'countries_ContinentFilterInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'countries_Continent',
									},
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'countries_countries',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'filter',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'countries_CountryFilterInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'countries_Country',
									},
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'countries_country',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'code',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'ID',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'countries_Country',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'countries_language',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'code',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'ID',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'countries_Language',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'countries_languages',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'filter',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'countries_LanguageFilterInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'countries_Language',
									},
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_capsule',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'id',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'ID',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Capsule',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_capsules',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'find',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'spacex_CapsulesFind',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'order',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'sort',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Capsule',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_capsulesPast',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'find',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'spacex_CapsulesFind',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'order',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'sort',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Capsule',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_capsulesUpcoming',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'find',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'spacex_CapsulesFind',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'order',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'sort',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Capsule',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_company',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Info',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_core',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'id',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'ID',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Core',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_cores',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'find',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'spacex_CoresFind',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'order',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'sort',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Core',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_coresPast',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'find',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'spacex_CoresFind',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'order',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'sort',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Core',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_coresUpcoming',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'find',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'spacex_CoresFind',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'order',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'sort',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Core',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_dragon',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'id',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'ID',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Dragon',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_dragons',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Dragon',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_histories',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'find',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'spacex_HistoryFind',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'order',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'sort',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_History',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_historiesResult',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'find',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'spacex_HistoryFind',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'order',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'sort',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_HistoriesResult',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_history',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'id',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'ID',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_History',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_landpad',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'id',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'ID',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Landpad',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_landpads',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Landpad',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_launch',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'id',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'ID',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Launch',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_launchLatest',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Launch',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_launchNext',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Launch',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_launches',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'find',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'spacex_LaunchFind',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'order',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'sort',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Launch',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_launchesPast',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'find',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'spacex_LaunchFind',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'order',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'sort',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Launch',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_launchesPastResult',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'find',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'spacex_LaunchFind',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'order',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'sort',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_LaunchesPastResult',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_launchesUpcoming',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'find',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'spacex_LaunchFind',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'order',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'sort',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Launch',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_launchpad',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'id',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'ID',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Launchpad',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_launchpads',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Launchpad',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_mission',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'id',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'ID',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Mission',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_missions',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'find',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'spacex_MissionsFind',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Mission',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_missionsResult',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'find',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'spacex_MissionsFind',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_MissionResult',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_payload',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'id',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'ID',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Payload',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_payloads',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'find',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'spacex_PayloadsFind',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'order',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'sort',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Payload',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_roadster',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Roadster',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_rocket',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'id',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'ID',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Rocket',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_rockets',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Rocket',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_rocketsResult',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_RocketsResult',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_ship',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'id',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'ID',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Ship',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_ships',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'find',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'spacex_ShipsFind',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'order',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'sort',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Ship',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'spacex_shipsResult',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'find',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'spacex_ShipsFind',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'limit',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'offset',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'order',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'sort',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'String',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_ShipsResult',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findFirstAlbum',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_AlbumWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_AlbumOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_AlbumWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_AlbumScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Album',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findManyAlbum',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_AlbumWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_AlbumOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_AlbumWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_AlbumScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_Album',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_aggregateAlbum',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_AlbumWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_AlbumOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_AlbumWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AggregateAlbum',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_groupByAlbum',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_AlbumWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_AlbumOrderByWithAggregationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'by',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.LIST_TYPE,
									type: {
										kind: Kind.NAMED_TYPE,
										name: {
											kind: Kind.NAME,
											value: 'chinook_AlbumScalarFieldEnum',
										},
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'having',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_AlbumScalarWhereWithAggregatesInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_AlbumGroupByOutputType',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findUniqueAlbum',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_AlbumWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Album',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findFirstArtist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_ArtistWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_ArtistOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_ArtistWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_ArtistScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Artist',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findManyArtist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_ArtistWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_ArtistOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_ArtistWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_ArtistScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_Artist',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_aggregateArtist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_ArtistWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_ArtistOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_ArtistWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AggregateArtist',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_groupByArtist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_ArtistWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_ArtistOrderByWithAggregationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'by',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.LIST_TYPE,
									type: {
										kind: Kind.NAMED_TYPE,
										name: {
											kind: Kind.NAME,
											value: 'chinook_ArtistScalarFieldEnum',
										},
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'having',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_ArtistScalarWhereWithAggregatesInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_ArtistGroupByOutputType',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findUniqueArtist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_ArtistWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Artist',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findFirstCustomer',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_CustomerWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_CustomerOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_CustomerWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_CustomerScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Customer',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findManyCustomer',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_CustomerWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_CustomerOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_CustomerWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_CustomerScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_Customer',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_aggregateCustomer',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_CustomerWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_CustomerOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_CustomerWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AggregateCustomer',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_groupByCustomer',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_CustomerWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_CustomerOrderByWithAggregationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'by',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.LIST_TYPE,
									type: {
										kind: Kind.NAMED_TYPE,
										name: {
											kind: Kind.NAME,
											value: 'chinook_CustomerScalarFieldEnum',
										},
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'having',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_CustomerScalarWhereWithAggregatesInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_CustomerGroupByOutputType',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findUniqueCustomer',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_CustomerWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Customer',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findFirstEmployee',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_EmployeeWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_EmployeeOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_EmployeeWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_EmployeeScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Employee',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findManyEmployee',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_EmployeeWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_EmployeeOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_EmployeeWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_EmployeeScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_Employee',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_aggregateEmployee',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_EmployeeWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_EmployeeOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_EmployeeWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AggregateEmployee',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_groupByEmployee',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_EmployeeWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_EmployeeOrderByWithAggregationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'by',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.LIST_TYPE,
									type: {
										kind: Kind.NAMED_TYPE,
										name: {
											kind: Kind.NAME,
											value: 'chinook_EmployeeScalarFieldEnum',
										},
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'having',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_EmployeeScalarWhereWithAggregatesInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_EmployeeGroupByOutputType',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findUniqueEmployee',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_EmployeeWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Employee',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findFirstGenre',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_GenreWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_GenreOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_GenreWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_GenreScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Genre',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findManyGenre',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_GenreWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_GenreOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_GenreWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_GenreScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_Genre',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_aggregateGenre',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_GenreWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_GenreOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_GenreWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AggregateGenre',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_groupByGenre',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_GenreWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_GenreOrderByWithAggregationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'by',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.LIST_TYPE,
									type: {
										kind: Kind.NAMED_TYPE,
										name: {
											kind: Kind.NAME,
											value: 'chinook_GenreScalarFieldEnum',
										},
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'having',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_GenreScalarWhereWithAggregatesInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_GenreGroupByOutputType',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findUniqueGenre',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_GenreWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Genre',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findFirstInvoice',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Invoice',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findManyInvoice',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_Invoice',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_aggregateInvoice',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AggregateInvoice',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_groupByInvoice',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceOrderByWithAggregationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'by',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.LIST_TYPE,
									type: {
										kind: Kind.NAMED_TYPE,
										name: {
											kind: Kind.NAME,
											value: 'chinook_InvoiceScalarFieldEnum',
										},
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'having',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceScalarWhereWithAggregatesInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceGroupByOutputType',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findUniqueInvoice',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Invoice',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findFirstInvoiceLine',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceLineWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceLineOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceLineWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceLineScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLine',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findManyInvoiceLine',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceLineWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceLineOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceLineWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceLineScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceLine',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_aggregateInvoiceLine',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceLineWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceLineOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceLineWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AggregateInvoiceLine',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_groupByInvoiceLine',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceLineWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceLineOrderByWithAggregationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'by',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.LIST_TYPE,
									type: {
										kind: Kind.NAMED_TYPE,
										name: {
											kind: Kind.NAME,
											value: 'chinook_InvoiceLineScalarFieldEnum',
										},
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'having',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceLineScalarWhereWithAggregatesInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceLineGroupByOutputType',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findUniqueInvoiceLine',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceLineWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLine',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findFirstMediaType',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_MediaTypeWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_MediaTypeOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_MediaTypeWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_MediaTypeScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findManyMediaType',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_MediaTypeWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_MediaTypeOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_MediaTypeWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_MediaTypeScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_MediaType',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_aggregateMediaType',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_MediaTypeWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_MediaTypeOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_MediaTypeWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AggregateMediaType',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_groupByMediaType',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_MediaTypeWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_MediaTypeOrderByWithAggregationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'by',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.LIST_TYPE,
									type: {
										kind: Kind.NAMED_TYPE,
										name: {
											kind: Kind.NAME,
											value: 'chinook_MediaTypeScalarFieldEnum',
										},
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'having',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_MediaTypeScalarWhereWithAggregatesInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_MediaTypeGroupByOutputType',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findUniqueMediaType',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_MediaTypeWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findFirstPlaylist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Playlist',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findManyPlaylist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_Playlist',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_aggregatePlaylist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AggregatePlaylist',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_groupByPlaylist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistOrderByWithAggregationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'by',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.LIST_TYPE,
									type: {
										kind: Kind.NAMED_TYPE,
										name: {
											kind: Kind.NAME,
											value: 'chinook_PlaylistScalarFieldEnum',
										},
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'having',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistScalarWhereWithAggregatesInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistGroupByOutputType',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findUniquePlaylist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Playlist',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findFirstPlaylistTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistTrackWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistTrackOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistTrackWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistTrackScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrack',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findManyPlaylistTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistTrackWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistTrackOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistTrackWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistTrackScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistTrack',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_aggregatePlaylistTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistTrackWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistTrackOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistTrackWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AggregatePlaylistTrack',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_groupByPlaylistTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistTrackWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistTrackOrderByWithAggregationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'by',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.LIST_TYPE,
									type: {
										kind: Kind.NAMED_TYPE,
										name: {
											kind: Kind.NAME,
											value: 'chinook_PlaylistTrackScalarFieldEnum',
										},
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'having',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistTrackScalarWhereWithAggregatesInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistTrackGroupByOutputType',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findUniquePlaylistTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistTrackWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrack',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findFirstTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_TrackWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_TrackWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Track',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findManyTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_TrackWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_TrackWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_Track',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_aggregateTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_TrackWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_TrackWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AggregateTrack',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_groupByTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_TrackWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackOrderByWithAggregationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'by',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.LIST_TYPE,
									type: {
										kind: Kind.NAMED_TYPE,
										name: {
											kind: Kind.NAME,
											value: 'chinook_TrackScalarFieldEnum',
										},
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'having',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_TrackScalarWhereWithAggregatesInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_TrackGroupByOutputType',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_findUniqueTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Track',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_findFirstPost',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_PostWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_PostOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_PostWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_PostScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_Post',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_findManyPost',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_PostWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_PostOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_PostWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_PostScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_Post',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_aggregatePost',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_PostWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_PostOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_PostWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_AggregatePost',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_groupByPost',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_PostWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_PostOrderByWithAggregationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'by',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.LIST_TYPE,
									type: {
										kind: Kind.NAMED_TYPE,
										name: {
											kind: Kind.NAME,
											value: 'db_PostScalarFieldEnum',
										},
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'having',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_PostScalarWhereWithAggregatesInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_PostGroupByOutputType',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_findUniquePost',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_PostWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_Post',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_findFirstProfile',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_ProfileWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_ProfileOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_ProfileWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_ProfileScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_Profile',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_findManyProfile',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_ProfileWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_ProfileOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_ProfileWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_ProfileScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_Profile',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_aggregateProfile',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_ProfileWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_ProfileOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_ProfileWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_AggregateProfile',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_groupByProfile',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_ProfileWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_ProfileOrderByWithAggregationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'by',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.LIST_TYPE,
									type: {
										kind: Kind.NAMED_TYPE,
										name: {
											kind: Kind.NAME,
											value: 'db_ProfileScalarFieldEnum',
										},
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'having',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_ProfileScalarWhereWithAggregatesInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_ProfileGroupByOutputType',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_findUniqueProfile',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_ProfileWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_Profile',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_findFirstUser',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_UserWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_UserOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_UserWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_UserScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_User',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_findManyUser',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_UserWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_UserOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_UserWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_UserScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_User',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_aggregateUser',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_UserWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_UserOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_UserWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_AggregateUser',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_groupByUser',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_UserWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_UserOrderByWithAggregationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'by',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.LIST_TYPE,
									type: {
										kind: Kind.NAMED_TYPE,
										name: {
											kind: Kind.NAME,
											value: 'db_UserScalarFieldEnum',
										},
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'having',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_UserScalarWhereWithAggregatesInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_UserGroupByOutputType',
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_findUniqueUser',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_UserWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_User',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'jsp2_getPosts',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'jsp2_Post',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'jsp2_getUsers',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'jsp2_User',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'jsp2_getUser',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'id',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'Int',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'jsp2_User',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'jsp2_getPost',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'id',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'Int',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'jsp2_Post',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: 'Returns a post by id\n\nEquivalent to GET /posts/{id}',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'ibm_jsp_post',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							description: {
								kind: Kind.STRING,
								value: 'The user id.',
								block: true,
							},
							name: {
								kind: Kind.NAME,
								value: 'id',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'BigInt',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ibm_jsp_Post',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: 'Returns all posts\n\nEquivalent to GET /posts',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'ibm_jsp_postsList',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'ibm_jsp_Post',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: 'Returns a user by id\n\nEquivalent to GET /users/{id}',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'ibm_jsp_user',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							description: {
								kind: Kind.STRING,
								value: 'The user id.',
								block: true,
							},
							name: {
								kind: Kind.NAME,
								value: 'id',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'BigInt',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ibm_jsp_User',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: 'Returns all users\n\nEquivalent to GET /users',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'ibm_jsp_userList',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'ibm_jsp_User',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'sdl_sdlField',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'public_gqlUnion',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'which',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'public_Which',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'public_GqlUnion',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'jsp_Post',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'jsp_User',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'username',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'weather_CacheControlScope',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PRIVATE',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PUBLIC',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'weather_City',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'coord',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'weather_Coordinates',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'country',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ID',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'weather',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'weather_Weather',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'weather_Clouds',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'all',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'humidity',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'visibility',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'weather_ConfigInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lang',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'weather_Language',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'units',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'weather_Unit',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'weather_Coordinates',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lat',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lon',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'weather_Language',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'af',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'al',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ar',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'az',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'bg',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ca',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'cz',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'da',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'de',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'el',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'en',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'es',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'eu',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'fa',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'fi',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'fr',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gl',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'he',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'hi',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'hr',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'hu',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'it',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ja',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'kr',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'la',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'mk',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'nl',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'no',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'pl',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'pt',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'pt_br',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ro',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ru',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'se',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'sk',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'sl',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'sp',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'sr',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'sv',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'th',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'tr',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ua',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'uk',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'vi',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'zh_cn',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'zh_tw',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'zu',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'weather_Summary',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'description',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'icon',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'weather_Temperature',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'actual',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'feelsLike',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'weather_Unit',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'imperial',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'kelvin',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'metric',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.SCALAR_TYPE_DEFINITION,
			description: {
				kind: Kind.STRING,
				value: 'The `Upload` scalar type represents a file upload.',
				block: true,
			},
			name: {
				kind: Kind.NAME,
				value: 'weather_Upload',
			},
			directives: [],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'weather_Weather',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'clouds',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'weather_Clouds',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'summary',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'weather_Summary',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'temperature',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'weather_Temperature',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'timestamp',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'wind',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'weather_Wind',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'weather_Wind',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'deg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'speed',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'countries_Continent',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'code',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'ID',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'countries',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'countries_Country',
									},
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'countries_ContinentFilterInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'code',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'countries_StringQueryOperatorInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'countries_Country',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'capital',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'code',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'ID',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'continent',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'countries_Continent',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'currency',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'emoji',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'emojiU',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'languages',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'countries_Language',
									},
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'native',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'phone',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'states',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.LIST_TYPE,
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'countries_State',
									},
								},
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'countries_CountryFilterInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'code',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'countries_StringQueryOperatorInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'continent',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'countries_StringQueryOperatorInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'currency',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'countries_StringQueryOperatorInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'countries_Language',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'code',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'ID',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'native',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'rtl',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Boolean',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'countries_LanguageFilterInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'code',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'countries_StringQueryOperatorInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'countries_State',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'code',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'country',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'countries_Country',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'countries_StringQueryOperatorInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'eq',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'glob',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ne',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'nin',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'regex',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Address',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'address',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'city',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'state',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Capsule',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'dragon',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Dragon',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ID',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'landings',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'missions',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_CapsuleMission',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'original_launch',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'reuse_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'status',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'type',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_CapsuleMission',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'flight',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			description: {
				kind: Kind.STRING,
				value: '',
				block: true,
			},
			name: {
				kind: Kind.NAME,
				value: 'spacex_CapsulesFind',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ID',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'landings',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'mission',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'original_launch',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'reuse_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'status',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'type',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Core',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'asds_attempts',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'asds_landings',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'block',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ID',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'missions',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_CapsuleMission',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'original_launch',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'reuse_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'rtls_attempts',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'rtls_landings',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'status',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'water_landing',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_CoreMission',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'flight',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			description: {
				kind: Kind.STRING,
				value: '',
				block: true,
			},
			name: {
				kind: Kind.NAME,
				value: 'spacex_CoresFind',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'asds_attempts',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'asds_landings',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'block',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'missions',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'original_launch',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'reuse_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'rtls_attempts',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'rtls_landings',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'status',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'water_landing',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.SCALAR_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'Date',
			},
			directives: [],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Distance',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'feet',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'meters',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Dragon',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'active',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'crew_capacity',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'description',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'diameter',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Distance',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'dry_mass_kg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'dry_mass_lb',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'first_flight',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'heat_shield',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_DragonHeatShield',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'height_w_trunk',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Distance',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ID',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'launch_payload_mass',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Mass',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'launch_payload_vol',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Volume',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'orbit_duration_yr',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'pressurized_capsule',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_DragonPressurizedCapsule',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'return_payload_mass',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Mass',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'return_payload_vol',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Volume',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'sidewall_angle_deg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'thrusters',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_DragonThrust',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'trunk',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_DragonTrunk',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'type',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'wikipedia',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_DragonHeatShield',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'dev_partner',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'material',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'size_meters',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'temp_degrees',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_DragonPressurizedCapsule',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'payload_volume',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Volume',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_DragonThrust',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'amount',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'fuel_1',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'fuel_2',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'pods',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'thrust',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Force',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'type',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_DragonTrunk',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'cargo',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_DragonTrunkCargo',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'trunk_volume',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Volume',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_DragonTrunkCargo',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'solar_array',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'unpressurized_cargo',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Force',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'kN',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lbf',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_HistoriesResult',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_History',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'result',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Result',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_History',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'details',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'event_date_unix',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'event_date_utc',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'flight',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Launch',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ID',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'links',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Link',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			description: {
				kind: Kind.STRING,
				value: '',
				block: true,
			},
			name: {
				kind: Kind.NAME,
				value: 'spacex_HistoryFind',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'end',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'flight_number',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ID',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'start',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Info',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ceo',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'coo',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'cto',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'cto_propulsion',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'employees',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'founded',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'founder',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'headquarters',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Address',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'launch_sites',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'links',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_InfoLinks',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'summary',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'test_sites',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'valuation',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'vehicles',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_InfoLinks',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'elon_twitter',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'flickr',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'twitter',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'website',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Landpad',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'attempted_landings',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'details',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'full_name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ID',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'landing_type',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'location',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Location',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'status',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'successful_landings',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'wikipedia',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Launch',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'details',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ID',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'is_tentative',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'launch_date_local',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'launch_date_unix',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'launch_date_utc',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'launch_site',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_LaunchSite',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'launch_success',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'launch_year',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'links',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_LaunchLinks',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'mission_id',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'mission_name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'rocket',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_LaunchRocket',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ships',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Ship',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'static_fire_date_unix',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'static_fire_date_utc',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'telemetry',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_LaunchTelemetry',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'tentative_max_precision',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upcoming',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			description: {
				kind: Kind.STRING,
				value: '',
				block: true,
			},
			name: {
				kind: Kind.NAME,
				value: 'spacex_LaunchFind',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'apoapsis_km',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'block',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'cap_serial',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'capsule_reuse',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'core_flight',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'core_reuse',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'core_serial',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'customer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'eccentricity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'end',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'epoch',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'fairings_recovered',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'fairings_recovery_attempt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'fairings_reuse',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'fairings_reused',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'fairings_ship',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gridfins',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ID',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'inclination_deg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'land_success',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'landing_intent',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'landing_type',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'landing_vehicle',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'launch_date_local',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'launch_date_utc',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'launch_success',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'launch_year',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'legs',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lifespan_years',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'longitude',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'manufacturer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'mean_motion',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'mission_id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'mission_name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'nationality',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'norad_id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'orbit',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'payload_id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'payload_type',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'periapsis_km',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'period_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'raan',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'reference_system',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'regime',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'reused',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'rocket_id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'rocket_name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'rocket_type',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'second_stage_block',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'semi_major_axis_km',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ship',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'side_core1_reuse',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'side_core2_reuse',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'site_id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'site_name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'site_name_long',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'start',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'tbd',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'tentative',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'tentative_max_precision',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_LaunchLinks',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'article_link',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'flickr_images',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'mission_patch',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'mission_patch_small',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'presskit',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'reddit_campaign',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'reddit_launch',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'reddit_media',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'reddit_recovery',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'video_link',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'wikipedia',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_LaunchRocket',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'fairings',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_LaunchRocketFairings',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'first_stage',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_LaunchRocketFirstStage',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'rocket',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Rocket',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'rocket_name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'rocket_type',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'second_stage',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_LaunchRocketSecondStage',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_LaunchRocketFairings',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'recovered',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'recovery_attempt',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'reused',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ship',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_LaunchRocketFirstStage',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'cores',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_LaunchRocketFirstStageCore',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_LaunchRocketFirstStageCore',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'block',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'core',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Core',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'flight',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gridfins',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'land_success',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'landing_intent',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'landing_type',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'landing_vehicle',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'legs',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'reused',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_LaunchRocketSecondStage',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'block',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'payloads',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Payload',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_LaunchSite',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'site_id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'site_name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'site_name_long',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_LaunchTelemetry',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'flight_club',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_LaunchesPastResult',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Launch',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'result',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Result',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Launchpad',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'attempted_launches',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'details',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ID',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'location',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Location',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'status',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'successful_launches',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'vehicles_launched',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Rocket',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'wikipedia',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Link',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'article',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'reddit',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'wikipedia',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Location',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'latitude',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'longitude',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'region',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Mass',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'kg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lb',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Mission',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'description',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ID',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'manufacturers',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'payloads',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Payload',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'twitter',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'website',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'wikipedia',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_MissionResult',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Mission',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'result',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Result',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			description: {
				kind: Kind.STRING,
				value: '',
				block: true,
			},
			name: {
				kind: Kind.NAME,
				value: 'spacex_MissionsFind',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ID',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'manufacturer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'payload_id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.SCALAR_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_ObjectID',
			},
			directives: [],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Payload',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'customers',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ID',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'manufacturer',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'nationality',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'norad_id',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'orbit',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'orbit_params',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_PayloadOrbitParams',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'payload_mass_kg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'payload_mass_lbs',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'payload_type',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'reused',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_PayloadOrbitParams',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'apoapsis_km',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'arg_of_pericenter',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'eccentricity',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'epoch',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'inclination_deg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lifespan_years',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'longitude',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'mean_anomaly',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'mean_motion',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'periapsis_km',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'period_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'raan',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'reference_system',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'regime',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'semi_major_axis_km',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			description: {
				kind: Kind.STRING,
				value: '',
				block: true,
			},
			name: {
				kind: Kind.NAME,
				value: 'spacex_PayloadsFind',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'apoapsis_km',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'customer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'eccentricity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'epoch',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'inclination_deg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lifespan_years',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'longitude',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'manufacturer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'mean_motion',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'nationality',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'norad_id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'orbit',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'payload_id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ID',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'payload_type',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'periapsis_km',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'period_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'raan',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'reference_system',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'regime',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'reused',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'semi_major_axis_km',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Result',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'totalCount',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Roadster',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'apoapsis_au',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'details',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'earth_distance_km',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'earth_distance_mi',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'eccentricity',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'epoch_jd',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'inclination',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'launch_date_unix',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'launch_date_utc',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'launch_mass_kg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'launch_mass_lbs',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'longitude',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'mars_distance_km',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'mars_distance_mi',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'norad_id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'orbit_type',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'periapsis_arg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'periapsis_au',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'period_days',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'semi_major_axis_au',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'speed_kph',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'speed_mph',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'wikipedia',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Rocket',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'active',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'boosters',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'company',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'cost_per_launch',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'country',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'description',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'diameter',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Distance',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'engines',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_RocketEngines',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'first_flight',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Date',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'first_stage',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_RocketFirstStage',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'height',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Distance',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ID',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'landing_legs',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_RocketLandingLegs',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'mass',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Mass',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'payload_weights',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_RocketPayloadWeight',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'second_stage',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_RocketSecondStage',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'stages',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'success_rate_pct',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'type',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'wikipedia',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_RocketEngines',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'engine_loss_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'layout',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'number',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'propellant_1',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'propellant_2',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'thrust_sea_level',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Force',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'thrust_to_weight',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'thrust_vacuum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Force',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'type',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'version',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_RocketFirstStage',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'burn_time_sec',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'engines',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'fuel_amount_tons',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'reusable',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'thrust_sea_level',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Force',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'thrust_vacuum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Force',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_RocketLandingLegs',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'material',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'number',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_RocketPayloadWeight',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'kg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lb',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_RocketSecondStage',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'burn_time_sec',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'engines',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'fuel_amount_tons',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'payloads',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_RocketSecondStagePayloads',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'thrust',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Force',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_RocketSecondStagePayloadCompositeFairing',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'diameter',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Distance',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'height',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Distance',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_RocketSecondStagePayloads',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'composite_fairing',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_RocketSecondStagePayloadCompositeFairing',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'option_1',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_RocketsResult',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Rocket',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'result',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Result',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Ship',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'abs',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'active',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'attempted_landings',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'class',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'course_deg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'home_port',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ID',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'image',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'imo',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'missions',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_ShipMission',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'mmsi',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'model',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'position',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_ShipLocation',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'roles',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'speed_kn',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'status',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'successful_landings',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'type',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'url',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'weight_kg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'weight_lbs',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'year_built',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_ShipLocation',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'latitude',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'longitude',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_ShipMission',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'flight',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			description: {
				kind: Kind.STRING,
				value: '',
				block: true,
			},
			name: {
				kind: Kind.NAME,
				value: 'spacex_ShipsFind',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'abs',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'active',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'attempted_landings',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'class',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'course_deg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'home_port',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'ID',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'imo',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'latitude',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'longitude',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'mission',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'mmsi',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'model',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'role',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'speed_kn',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'status',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'successful_landings',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'type',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'weight_kg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'weight_lbs',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'year_built',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_ShipsResult',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					arguments: [],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'spacex_Ship',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'result',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'spacex_Result',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'spacex_Volume',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'cubic_feet',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'cubic_meters',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_NestedIntFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_IntFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_NestedStringFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'contains',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'startsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'endsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedStringFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_StringFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'contains',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'startsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'endsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedStringFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_NestedStringNullableFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'contains',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'startsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'endsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedStringNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_StringNullableFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'contains',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'startsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'endsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedStringNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumListRelationFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'every',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'some',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'none',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_ArtistWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Album',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumListRelationFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistRelationFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'is',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'isNot',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_NestedIntNullableFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_IntNullableFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_NestedDecimalFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDecimalFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_DecimalFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDecimalFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumRelationFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'is',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'isNot',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_GenreWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackListRelationFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreRelationFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'is',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'isNot',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_MediaTypeWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackListRelationFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeRelationFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'is',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'isNot',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_NestedDateTimeFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDateTimeFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_DateTimeFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDateTimeFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_NestedDateTimeNullableFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDateTimeNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_DateTimeNullableFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDateTimeNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerListRelationFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'every',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'some',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'none',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeListRelationFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'every',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'some',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'none',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EmployeeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ReportsTo',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DateTimeNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DateTimeNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeRelationFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Customer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerListRelationFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'other_Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeListRelationFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeRelationFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'is',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'isNot',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceListRelationFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'every',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'some',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'none',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_CustomerWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'SupportRepId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeRelationFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Invoice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceListRelationFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerRelationFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'is',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'isNot',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DateTimeFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Customer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerRelationFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineListRelationFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceRelationFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'is',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'isNot',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackRelationFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'is',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'isNot',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLineId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Invoice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceRelationFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackRelationFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineListRelationFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'every',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'some',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'none',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackListRelationFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistRelationFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'is',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'isNot',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrackWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Playlist',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistRelationFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackRelationFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackListRelationFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'every',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'some',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'none',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Album',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumRelationFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Genre',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreRelationFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaType',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeRelationFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineListRelationFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackListRelationFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackListRelationFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'every',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'some',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'none',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AlbumWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Artist',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistRelationFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackListRelationFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_SortOrder',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'asc',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'desc',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumOrderByRelationAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistOrderByWithRelationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Album',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumOrderByRelationAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackOrderByRelationAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumOrderByWithRelationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Artist',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistOrderByWithRelationInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackOrderByRelationAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumWhereUniqueInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumScalarFieldEnum',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistCountOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Album',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_Artist',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Album',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_AlbumWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_AlbumOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_AlbumWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_AlbumScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_Album',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_ArtistCountOutputType',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreOrderByWithRelationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackOrderByRelationAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeOrderByWithRelationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackOrderByRelationAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineOrderByRelationAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackOrderByRelationAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackOrderByWithRelationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Album',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumOrderByWithRelationInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Genre',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreOrderByWithRelationInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaType',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeOrderByWithRelationInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineOrderByRelationAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackOrderByRelationAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackWhereUniqueInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackScalarFieldEnum',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreCountOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_Genre',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_TrackWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_TrackWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_Track',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_GenreCountOutputType',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeCountOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_TrackWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_TrackWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_Track',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_MediaTypeCountOutputType',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerOrderByRelationAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeOrderByRelationAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeOrderByWithRelationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EmployeeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ReportsTo',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeOrderByWithRelationInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Customer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerOrderByRelationAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'other_Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeOrderByRelationAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceOrderByRelationAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerOrderByWithRelationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'SupportRepId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeOrderByWithRelationInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Invoice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceOrderByRelationAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceOrderByWithRelationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Customer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerOrderByWithRelationInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineOrderByRelationAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineOrderByWithRelationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLineId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Invoice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceOrderByWithRelationInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackOrderByWithRelationInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineWhereUniqueInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLineId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineScalarFieldEnum',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLineId',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerWhereUniqueInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerScalarFieldEnum',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'SupportRepId',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeWhereUniqueInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EmployeeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeScalarFieldEnum',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EmployeeId',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ReportsTo',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeCountOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Customer',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'other_Employee',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_Employee',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EmployeeId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ReportsTo',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Employee',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Employee',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Customer',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_CustomerWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_CustomerOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_CustomerWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_CustomerScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_Customer',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'other_Employee',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_EmployeeWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_EmployeeOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_EmployeeWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_EmployeeScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_Employee',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeCountOutputType',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceWhereUniqueInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceScalarFieldEnum',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerCountOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Invoice',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_Customer',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'SupportRepId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Employee',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Employee',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Invoice',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_Invoice',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_CustomerCountOutputType',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceCountOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_Invoice',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Customer',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_Customer',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceLineWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceLineOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceLineWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceLineScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLine',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceCountOutputType',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLine',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLineId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Invoice',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_Invoice',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_Track',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistOrderByWithRelationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackOrderByRelationAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackOrderByWithRelationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Playlist',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistOrderByWithRelationInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackOrderByWithRelationInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackPlaylistIdTrackIdCompoundUniqueInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackWhereUniqueInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId_TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackPlaylistIdTrackIdCompoundUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackScalarFieldEnum',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistCountOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_Playlist',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistTrackWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistTrackOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistTrackWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistTrackScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrack',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistCountOutputType',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrack',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Playlist',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_Playlist',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_Track',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackCountOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_Track',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Album',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Album',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Genre',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Genre',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaType',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_MediaType',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceLineWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceLineOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceLineWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceLineScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLine',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistTrackWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistTrackOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistTrackWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistTrackScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrack',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackCountOutputType',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumCountOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_Album',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Artist',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_Artist',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_TrackWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_TrackWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_Track',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AlbumCountOutputType',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumCountAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_all',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumAvgAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumSumAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumMinAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumMaxAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AggregateAlbum',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumCountOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumAvgOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumMaxOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumMinOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumSumOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumOrderByWithAggregationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumCountOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumAvgOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumMaxOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumMinOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumSumOrderByAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_NestedFloatFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedFloatFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_NestedIntWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedFloatFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_IntWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedFloatFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_NestedStringWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'contains',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'startsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'endsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedStringWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedStringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedStringFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_StringWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'contains',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'startsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'endsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedStringWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedStringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedStringFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumScalarWhereWithAggregatesInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AlbumScalarWhereWithAggregatesInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumGroupByOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistWhereUniqueInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistScalarFieldEnum',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistCountAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_all',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistAvgAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistSumAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistMinAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistMaxAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AggregateArtist',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistCountOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistAvgOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistMaxOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistMinOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistSumOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistOrderByWithAggregationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistCountOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistAvgOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistMaxOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistMinOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistSumOrderByAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_NestedStringNullableWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'contains',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'startsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'endsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedStringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedStringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedStringNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_StringNullableWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'contains',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'startsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'endsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedStringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedStringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedStringNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistScalarWhereWithAggregatesInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_ArtistScalarWhereWithAggregatesInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistGroupByOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerCountAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'SupportRepId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_all',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerAvgAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'SupportRepId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerSumAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'SupportRepId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerMinAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'SupportRepId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerMaxAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'SupportRepId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AggregateCustomer',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerCountOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'SupportRepId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerAvgOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'SupportRepId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerMaxOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'SupportRepId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerMinOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'SupportRepId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerSumOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'SupportRepId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerOrderByWithAggregationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'SupportRepId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerCountOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerAvgOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerMaxOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerMinOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerSumOrderByAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_NestedFloatNullableFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedFloatNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_NestedIntNullableWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedFloatNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_IntNullableWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedFloatNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerScalarWhereWithAggregatesInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_CustomerScalarWhereWithAggregatesInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'SupportRepId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerGroupByOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'SupportRepId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeCountAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EmployeeId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ReportsTo',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_all',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeAvgAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EmployeeId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ReportsTo',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeSumAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EmployeeId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ReportsTo',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeMinAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EmployeeId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ReportsTo',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeMaxAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EmployeeId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ReportsTo',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AggregateEmployee',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeCountOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EmployeeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ReportsTo',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeAvgOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EmployeeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ReportsTo',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeMaxOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EmployeeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ReportsTo',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeMinOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EmployeeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ReportsTo',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeSumOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EmployeeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ReportsTo',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeOrderByWithAggregationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EmployeeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ReportsTo',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCountOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeAvgOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeMaxOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeMinOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeSumOrderByAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_NestedDateTimeNullableWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDateTimeNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDateTimeNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDateTimeNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_DateTimeNullableWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDateTimeNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDateTimeNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDateTimeNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeScalarWhereWithAggregatesInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeScalarWhereWithAggregatesInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EmployeeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ReportsTo',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DateTimeNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DateTimeNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeGroupByOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EmployeeId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ReportsTo',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreWhereUniqueInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreScalarFieldEnum',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreCountAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_all',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreAvgAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreSumAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreMinAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreMaxAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AggregateGenre',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreCountOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreAvgOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreMaxOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreMinOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreSumOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreOrderByWithAggregationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreCountOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreAvgOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreMaxOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreMinOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreSumOrderByAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreScalarWhereWithAggregatesInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_GenreScalarWhereWithAggregatesInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreGroupByOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceCountAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_all',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceAvgAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceSumAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceMinAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceMaxAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AggregateInvoice',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceCountOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceAvgOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceMaxOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceMinOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceSumOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceOrderByWithAggregationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceCountOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceAvgOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceMaxOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceMinOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceSumOrderByAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_NestedDateTimeWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDateTimeWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDateTimeFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDateTimeFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_DateTimeWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDateTimeWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDateTimeFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDateTimeFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_NestedDecimalWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDecimalWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDecimalFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDecimalFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDecimalFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDecimalFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_DecimalWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDecimalWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDecimalFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDecimalFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDecimalFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NestedDecimalFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceScalarWhereWithAggregatesInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceScalarWhereWithAggregatesInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DateTimeWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalWithAggregatesFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceGroupByOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineCountAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLineId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_all',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineAvgAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLineId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineSumAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLineId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineMinAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLineId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineMaxAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLineId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AggregateInvoiceLine',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineCountOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLineId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineAvgOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLineId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineMaxOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLineId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineMinOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLineId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineSumOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLineId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineOrderByWithAggregationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLineId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineCountOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineAvgOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineMaxOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineMinOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineSumOrderByAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineScalarWhereWithAggregatesInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineScalarWhereWithAggregatesInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLineId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineGroupByOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLineId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeWhereUniqueInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeScalarFieldEnum',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeCountAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_all',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeAvgAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeSumAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeMinAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeMaxAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AggregateMediaType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeCountOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeAvgOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeMaxOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeMinOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeSumOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeOrderByWithAggregationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeCountOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeAvgOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeMaxOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeMinOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeSumOrderByAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeScalarWhereWithAggregatesInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_MediaTypeScalarWhereWithAggregatesInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeGroupByOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistWhereUniqueInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistScalarFieldEnum',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistCountAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_all',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistAvgAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistSumAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistMinAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistMaxAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AggregatePlaylist',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistCountOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistAvgOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistMaxOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistMinOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistSumOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistOrderByWithAggregationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistCountOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistAvgOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistMaxOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistMinOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistSumOrderByAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistScalarWhereWithAggregatesInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistScalarWhereWithAggregatesInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistGroupByOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackCountAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_all',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackAvgAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackSumAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackMinAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackMaxAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AggregatePlaylistTrack',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackCountOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackAvgOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackMaxOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackMinOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackSumOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackOrderByWithAggregationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackCountOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackAvgOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackMaxOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackMinOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackSumOrderByAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackScalarWhereWithAggregatesInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrackScalarWhereWithAggregatesInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackGroupByOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackCountAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_all',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackAvgAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackSumAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackMinAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackMaxAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AggregateTrack',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackCountOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackAvgOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackMaxOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackMinOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackSumOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackOrderByWithAggregationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCountOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackAvgOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackMaxOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackMinOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackSumOrderByAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackScalarWhereWithAggregatesInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackScalarWhereWithAggregatesInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalWithAggregatesFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackGroupByOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistCreateWithoutAlbumInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistCreateOrConnectWithoutAlbumInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_ArtistWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_ArtistCreateWithoutAlbumInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistCreateNestedOneWithoutAlbumInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistCreateWithoutAlbumInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistCreateOrConnectWithoutAlbumInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreCreateWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreCreateOrConnectWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_GenreWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_GenreCreateWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreCreateNestedOneWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreCreateWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreCreateOrConnectWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeCreateWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeCreateOrConnectWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_MediaTypeWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_MediaTypeCreateWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeCreateNestedOneWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeCreateWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeCreateOrConnectWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumCreateWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Artist',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_ArtistCreateNestedOneWithoutAlbumInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumCreateOrConnectWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AlbumWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AlbumCreateWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumCreateNestedOneWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumCreateWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumCreateOrConnectWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistCreateWithoutPlaylistTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistCreateOrConnectWithoutPlaylistTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistCreateWithoutPlaylistTrackInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistCreateNestedOneWithoutPlaylistTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistCreateWithoutPlaylistTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistCreateOrConnectWithoutPlaylistTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackCreateWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Playlist',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistCreateNestedOneWithoutPlaylistTrackInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackCreateOrConnectWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrackWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrackCreateWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackCreateNestedManyWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackCreateWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackCreateOrConnectWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackCreateWithoutInvoiceLineInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Album',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumCreateNestedOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Genre',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreCreateNestedOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaType',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_MediaTypeCreateNestedOneWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackCreateNestedManyWithoutTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackCreateOrConnectWithoutInvoiceLineInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackCreateWithoutInvoiceLineInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackCreateNestedOneWithoutInvoiceLineInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateWithoutInvoiceLineInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateOrConnectWithoutInvoiceLineInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineCreateWithoutInvoiceInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackCreateNestedOneWithoutInvoiceLineInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineCreateOrConnectWithoutInvoiceInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineCreateWithoutInvoiceInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineCreateNestedManyWithoutInvoiceInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineCreateWithoutInvoiceInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineCreateOrConnectWithoutInvoiceInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceCreateWithoutCustomerInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineCreateNestedManyWithoutInvoiceInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceCreateOrConnectWithoutCustomerInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceCreateWithoutCustomerInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceCreateNestedManyWithoutCustomerInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceCreateWithoutCustomerInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceCreateOrConnectWithoutCustomerInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerCreateWithoutEmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Invoice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceCreateNestedManyWithoutCustomerInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerCreateOrConnectWithoutEmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_CustomerWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_CustomerCreateWithoutEmployeeInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerCreateNestedManyWithoutEmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerCreateWithoutEmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerCreateOrConnectWithoutEmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeCreateWithoutOther_EmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateNestedOneWithoutOther_EmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Customer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerCreateNestedManyWithoutEmployeeInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeCreateOrConnectWithoutOther_EmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeCreateWithoutOther_EmployeeInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeCreateNestedOneWithoutOther_EmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateWithoutOther_EmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateOrConnectWithoutOther_EmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeCreateWithoutEmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Customer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerCreateNestedManyWithoutEmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'other_Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateNestedManyWithoutEmployeeInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeCreateOrConnectWithoutEmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeCreateWithoutEmployeeInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeCreateNestedManyWithoutEmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateWithoutEmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateOrConnectWithoutEmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeCreateWithoutCustomerInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateNestedOneWithoutOther_EmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'other_Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateNestedManyWithoutEmployeeInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeCreateOrConnectWithoutCustomerInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeCreateWithoutCustomerInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeCreateNestedOneWithoutCustomerInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateWithoutCustomerInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateOrConnectWithoutCustomerInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerCreateWithoutInvoiceInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateNestedOneWithoutCustomerInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerCreateOrConnectWithoutInvoiceInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_CustomerWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_CustomerCreateWithoutInvoiceInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerCreateNestedOneWithoutInvoiceInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerCreateWithoutInvoiceInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerCreateOrConnectWithoutInvoiceInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceCreateWithoutInvoiceLineInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Customer',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_CustomerCreateNestedOneWithoutInvoiceInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceCreateOrConnectWithoutInvoiceLineInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceCreateWithoutInvoiceLineInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceCreateNestedOneWithoutInvoiceLineInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceCreateWithoutInvoiceLineInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceCreateOrConnectWithoutInvoiceLineInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineCreateWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Invoice',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceCreateNestedOneWithoutInvoiceLineInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineCreateOrConnectWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineCreateWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineCreateNestedManyWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineCreateWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineCreateOrConnectWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackCreateWithoutAlbumInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Genre',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreCreateNestedOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaType',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_MediaTypeCreateNestedOneWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineCreateNestedManyWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackCreateNestedManyWithoutTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackCreateOrConnectWithoutAlbumInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackCreateWithoutAlbumInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackCreateNestedManyWithoutAlbumInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateWithoutAlbumInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateOrConnectWithoutAlbumInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumCreateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Artist',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_ArtistCreateNestedOneWithoutAlbumInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateNestedManyWithoutAlbumInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_StringFieldUpdateOperationsInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_NullableStringFieldUpdateOperationsInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistUpdateWithoutAlbumInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistUpsertWithoutAlbumInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_ArtistUpdateWithoutAlbumInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_ArtistCreateWithoutAlbumInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistUpdateOneRequiredWithoutAlbumInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistCreateWithoutAlbumInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistCreateOrConnectWithoutAlbumInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistUpsertWithoutAlbumInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistUpdateWithoutAlbumInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_IntFieldUpdateOperationsInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'increment',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'decrement',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'multiply',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'divide',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_NullableIntFieldUpdateOperationsInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'increment',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'decrement',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'multiply',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'divide',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_DecimalFieldUpdateOperationsInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'increment',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'decrement',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'multiply',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'divide',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreUpdateWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreUpsertWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_GenreUpdateWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_GenreCreateWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreUpdateOneWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreCreateWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreCreateOrConnectWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreUpsertWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'disconnect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'delete',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreUpdateWithoutTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeUpdateWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeUpsertWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_MediaTypeUpdateWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_MediaTypeCreateWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeUpdateOneRequiredWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeCreateWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeCreateOrConnectWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeUpsertWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeUpdateWithoutTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_DateTimeFieldUpdateOperationsInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_NullableDateTimeFieldUpdateOperationsInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumUpdateWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Artist',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistUpdateOneRequiredWithoutAlbumInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumUpsertWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AlbumUpdateWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AlbumCreateWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumUpdateOneWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumCreateWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumCreateOrConnectWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumUpsertWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'disconnect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'delete',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumUpdateWithoutTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistUpdateWithoutPlaylistTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistUpsertWithoutPlaylistTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistUpdateWithoutPlaylistTrackInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistCreateWithoutPlaylistTrackInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistUpdateOneRequiredWithoutPlaylistTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistCreateWithoutPlaylistTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistCreateOrConnectWithoutPlaylistTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistUpsertWithoutPlaylistTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistUpdateWithoutPlaylistTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackUpdateWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Playlist',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistUpdateOneRequiredWithoutPlaylistTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackUpsertWithWhereUniqueWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrackWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrackUpdateWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrackCreateWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackUpdateWithWhereUniqueWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrackWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrackUpdateWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackScalarWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackScalarWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrackScalarWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackScalarWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackUpdateManyWithWhereWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrackScalarWhereInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackUpdateManyWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackCreateWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackCreateOrConnectWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackUpsertWithWhereUniqueWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'disconnect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'delete',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackUpdateWithWhereUniqueWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updateMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackUpdateManyWithWhereWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'deleteMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackScalarWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpdateWithoutInvoiceLineInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableIntFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Album',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumUpdateOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Genre',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreUpdateOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaType',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeUpdateOneRequiredWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackUpdateManyWithoutTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpsertWithoutInvoiceLineInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackUpdateWithoutInvoiceLineInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackCreateWithoutInvoiceLineInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpdateOneRequiredWithoutInvoiceLineInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateWithoutInvoiceLineInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateOrConnectWithoutInvoiceLineInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpsertWithoutInvoiceLineInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpdateWithoutInvoiceLineInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineUpdateWithoutInvoiceInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpdateOneRequiredWithoutInvoiceLineInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineUpsertWithWhereUniqueWithoutInvoiceInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineUpdateWithoutInvoiceInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineCreateWithoutInvoiceInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineUpdateWithWhereUniqueWithoutInvoiceInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineUpdateWithoutInvoiceInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineScalarWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineScalarWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineScalarWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineScalarWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLineId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineUpdateManyMutationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineUpdateManyWithWhereWithoutInvoiceInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineScalarWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineUpdateManyMutationInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineUpdateManyWithoutInvoiceInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineCreateWithoutInvoiceInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineCreateOrConnectWithoutInvoiceInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineUpsertWithWhereUniqueWithoutInvoiceInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'disconnect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'delete',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineUpdateWithWhereUniqueWithoutInvoiceInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updateMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineUpdateManyWithWhereWithoutInvoiceInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'deleteMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineScalarWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceUpdateWithoutCustomerInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineUpdateManyWithoutInvoiceInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceUpsertWithWhereUniqueWithoutCustomerInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceUpdateWithoutCustomerInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceCreateWithoutCustomerInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceUpdateWithWhereUniqueWithoutCustomerInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceUpdateWithoutCustomerInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceScalarWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceScalarWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceScalarWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceScalarWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DateTimeFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceUpdateManyMutationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceUpdateManyWithWhereWithoutCustomerInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceScalarWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceUpdateManyMutationInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceUpdateManyWithoutCustomerInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceCreateWithoutCustomerInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceCreateOrConnectWithoutCustomerInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceUpsertWithWhereUniqueWithoutCustomerInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'disconnect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'delete',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceUpdateWithWhereUniqueWithoutCustomerInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updateMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceUpdateManyWithWhereWithoutCustomerInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'deleteMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceScalarWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerUpdateWithoutEmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Invoice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceUpdateManyWithoutCustomerInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerUpsertWithWhereUniqueWithoutEmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_CustomerWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_CustomerUpdateWithoutEmployeeInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_CustomerCreateWithoutEmployeeInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerUpdateWithWhereUniqueWithoutEmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_CustomerWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_CustomerUpdateWithoutEmployeeInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerScalarWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerScalarWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_CustomerScalarWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerScalarWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'CustomerId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'SupportRepId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerUpdateManyMutationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerUpdateManyWithWhereWithoutEmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_CustomerScalarWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_CustomerUpdateManyMutationInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerUpdateManyWithoutEmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerCreateWithoutEmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerCreateOrConnectWithoutEmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerUpsertWithWhereUniqueWithoutEmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'disconnect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'delete',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerUpdateWithWhereUniqueWithoutEmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updateMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerUpdateManyWithWhereWithoutEmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'deleteMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerScalarWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeUpdateWithoutOther_EmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableDateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableDateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeUpdateOneWithoutOther_EmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Customer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerUpdateManyWithoutEmployeeInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeUpsertWithoutOther_EmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeUpdateWithoutOther_EmployeeInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeCreateWithoutOther_EmployeeInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeUpdateOneWithoutOther_EmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateWithoutOther_EmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateOrConnectWithoutOther_EmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeUpsertWithoutOther_EmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'disconnect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'delete',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeUpdateWithoutOther_EmployeeInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeUpdateWithoutEmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableDateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableDateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Customer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerUpdateManyWithoutEmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'other_Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeUpdateManyWithoutEmployeeInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeUpsertWithWhereUniqueWithoutEmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeUpdateWithoutEmployeeInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeCreateWithoutEmployeeInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeUpdateWithWhereUniqueWithoutEmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeUpdateWithoutEmployeeInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeScalarWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeScalarWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeScalarWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeScalarWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EmployeeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ReportsTo',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DateTimeNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DateTimeNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeUpdateManyMutationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableDateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableDateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeUpdateManyWithWhereWithoutEmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeScalarWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeUpdateManyMutationInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeUpdateManyWithoutEmployeeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateWithoutEmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateOrConnectWithoutEmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeUpsertWithWhereUniqueWithoutEmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'disconnect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'delete',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeUpdateWithWhereUniqueWithoutEmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updateMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeUpdateManyWithWhereWithoutEmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'deleteMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeScalarWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeUpdateWithoutCustomerInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableDateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableDateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeUpdateOneWithoutOther_EmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'other_Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeUpdateManyWithoutEmployeeInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeUpsertWithoutCustomerInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeUpdateWithoutCustomerInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_EmployeeCreateWithoutCustomerInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeUpdateOneWithoutCustomerInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateWithoutCustomerInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateOrConnectWithoutCustomerInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeUpsertWithoutCustomerInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'disconnect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'delete',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeUpdateWithoutCustomerInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerUpdateWithoutInvoiceInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeUpdateOneWithoutCustomerInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerUpsertWithoutInvoiceInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_CustomerUpdateWithoutInvoiceInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_CustomerCreateWithoutInvoiceInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerUpdateOneRequiredWithoutInvoiceInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerCreateWithoutInvoiceInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerCreateOrConnectWithoutInvoiceInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerUpsertWithoutInvoiceInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerUpdateWithoutInvoiceInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceUpdateWithoutInvoiceLineInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Customer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerUpdateOneRequiredWithoutInvoiceInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceUpsertWithoutInvoiceLineInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceUpdateWithoutInvoiceLineInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceCreateWithoutInvoiceLineInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceUpdateOneRequiredWithoutInvoiceLineInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceCreateWithoutInvoiceLineInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceCreateOrConnectWithoutInvoiceLineInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceUpsertWithoutInvoiceLineInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceUpdateWithoutInvoiceLineInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineUpdateWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Invoice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceUpdateOneRequiredWithoutInvoiceLineInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineUpsertWithWhereUniqueWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineUpdateWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineCreateWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineUpdateWithWhereUniqueWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineUpdateWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineUpdateManyWithWhereWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineScalarWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceLineUpdateManyMutationInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineUpdateManyWithoutTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineCreateWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineCreateOrConnectWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineUpsertWithWhereUniqueWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'disconnect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'delete',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineUpdateWithWhereUniqueWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updateMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineUpdateManyWithWhereWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'deleteMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineScalarWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpdateWithoutAlbumInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableIntFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Genre',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreUpdateOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaType',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeUpdateOneRequiredWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineUpdateManyWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackUpdateManyWithoutTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpsertWithWhereUniqueWithoutAlbumInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackUpdateWithoutAlbumInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackCreateWithoutAlbumInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpdateWithWhereUniqueWithoutAlbumInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackUpdateWithoutAlbumInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackScalarWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackScalarWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackScalarWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackScalarWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'TrackId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaTypeId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'GenreId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpdateManyMutationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableIntFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpdateManyWithWhereWithoutAlbumInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackScalarWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackUpdateManyMutationInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpdateManyWithoutAlbumInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateWithoutAlbumInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateOrConnectWithoutAlbumInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpsertWithWhereUniqueWithoutAlbumInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'disconnect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'delete',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpdateWithWhereUniqueWithoutAlbumInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updateMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpdateManyWithWhereWithoutAlbumInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'deleteMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackScalarWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumUpdateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Artist',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_ArtistUpdateOneRequiredWithoutAlbumInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpdateManyWithoutAlbumInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumUpdateManyMutationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AffectedRowsOutput',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'count',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumCreateWithoutArtistInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateNestedManyWithoutAlbumInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumCreateOrConnectWithoutArtistInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AlbumWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AlbumCreateWithoutArtistInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumCreateNestedManyWithoutArtistInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumCreateWithoutArtistInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumCreateOrConnectWithoutArtistInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistCreateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Album',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumCreateNestedManyWithoutArtistInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumUpdateWithoutArtistInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpdateManyWithoutAlbumInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumUpsertWithWhereUniqueWithoutArtistInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AlbumWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AlbumUpdateWithoutArtistInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AlbumCreateWithoutArtistInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumUpdateWithWhereUniqueWithoutArtistInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AlbumWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AlbumUpdateWithoutArtistInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumScalarWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumScalarWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AlbumScalarWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumScalarWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AlbumId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'ArtistId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumUpdateManyWithWhereWithoutArtistInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AlbumScalarWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_AlbumUpdateManyMutationInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_AlbumUpdateManyWithoutArtistInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumCreateWithoutArtistInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumCreateOrConnectWithoutArtistInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumUpsertWithWhereUniqueWithoutArtistInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'disconnect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'delete',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumUpdateWithWhereUniqueWithoutArtistInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updateMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumUpdateManyWithWhereWithoutArtistInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'deleteMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumScalarWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistUpdateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Album',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumUpdateManyWithoutArtistInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_ArtistUpdateManyMutationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerCreateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateNestedOneWithoutCustomerInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Invoice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceCreateNestedManyWithoutCustomerInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_CustomerUpdateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Company',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeUpdateOneWithoutCustomerInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Invoice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceUpdateManyWithoutCustomerInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeCreateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateNestedOneWithoutOther_EmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Customer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerCreateNestedManyWithoutEmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'other_Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeCreateNestedManyWithoutEmployeeInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_EmployeeUpdateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LastName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'FirstName',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BirthDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableDateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'HireDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableDateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Address',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'City',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'State',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Country',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Phone',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Fax',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeUpdateOneWithoutOther_EmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Customer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerUpdateManyWithoutEmployeeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'other_Employee',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_EmployeeUpdateManyWithoutEmployeeInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackCreateWithoutGenreInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Album',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumCreateNestedOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaType',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_MediaTypeCreateNestedOneWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineCreateNestedManyWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackCreateNestedManyWithoutTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackCreateOrConnectWithoutGenreInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackCreateWithoutGenreInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackCreateNestedManyWithoutGenreInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateWithoutGenreInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateOrConnectWithoutGenreInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreCreateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateNestedManyWithoutGenreInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpdateWithoutGenreInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableIntFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Album',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumUpdateOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaType',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeUpdateOneRequiredWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineUpdateManyWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackUpdateManyWithoutTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpsertWithWhereUniqueWithoutGenreInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackUpdateWithoutGenreInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackCreateWithoutGenreInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpdateWithWhereUniqueWithoutGenreInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackUpdateWithoutGenreInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpdateManyWithWhereWithoutGenreInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackScalarWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackUpdateManyMutationInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpdateManyWithoutGenreInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateWithoutGenreInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateOrConnectWithoutGenreInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpsertWithWhereUniqueWithoutGenreInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'disconnect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'delete',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpdateWithWhereUniqueWithoutGenreInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updateMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpdateManyWithWhereWithoutGenreInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'deleteMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackScalarWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreUpdateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpdateManyWithoutGenreInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_GenreUpdateManyMutationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceCreateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Customer',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_CustomerCreateNestedOneWithoutInvoiceInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineCreateNestedManyWithoutInvoiceInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceUpdateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceDate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingAddress',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingState',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingCountry',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'BillingPostalCode',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Total',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Customer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_CustomerUpdateOneRequiredWithoutInvoiceInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineUpdateManyWithoutInvoiceInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineCreateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Invoice',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_InvoiceCreateNestedOneWithoutInvoiceLineInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackCreateNestedOneWithoutInvoiceLineInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_InvoiceLineUpdateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Quantity',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Invoice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceUpdateOneRequiredWithoutInvoiceLineInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpdateOneRequiredWithoutInvoiceLineInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackCreateWithoutMediaTypeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Album',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumCreateNestedOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Genre',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreCreateNestedOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineCreateNestedManyWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackCreateNestedManyWithoutTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackCreateOrConnectWithoutMediaTypeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackCreateWithoutMediaTypeInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackCreateNestedManyWithoutMediaTypeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateWithoutMediaTypeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateOrConnectWithoutMediaTypeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeCreateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateNestedManyWithoutMediaTypeInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpdateWithoutMediaTypeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableIntFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Album',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumUpdateOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Genre',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreUpdateOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineUpdateManyWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackUpdateManyWithoutTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpsertWithWhereUniqueWithoutMediaTypeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackUpdateWithoutMediaTypeInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackCreateWithoutMediaTypeInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpdateWithWhereUniqueWithoutMediaTypeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackUpdateWithoutMediaTypeInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpdateManyWithWhereWithoutMediaTypeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackScalarWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackUpdateManyMutationInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpdateManyWithoutMediaTypeInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateWithoutMediaTypeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateOrConnectWithoutMediaTypeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpsertWithWhereUniqueWithoutMediaTypeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'disconnect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'delete',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpdateWithWhereUniqueWithoutMediaTypeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updateMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpdateManyWithWhereWithoutMediaTypeInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'deleteMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackScalarWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeUpdateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpdateManyWithoutMediaTypeInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_MediaTypeUpdateManyMutationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackCreateWithoutPlaylistTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Album',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumCreateNestedOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Genre',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreCreateNestedOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaType',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_MediaTypeCreateNestedOneWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineCreateNestedManyWithoutTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackCreateOrConnectWithoutPlaylistTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackCreateWithoutPlaylistTrackInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackCreateNestedOneWithoutPlaylistTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateWithoutPlaylistTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateOrConnectWithoutPlaylistTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackCreateWithoutPlaylistInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackCreateNestedOneWithoutPlaylistTrackInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackCreateOrConnectWithoutPlaylistInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrackWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrackCreateWithoutPlaylistInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackCreateNestedManyWithoutPlaylistInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackCreateWithoutPlaylistInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackCreateOrConnectWithoutPlaylistInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistCreateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackCreateNestedManyWithoutPlaylistInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpdateWithoutPlaylistTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableIntFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Album',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumUpdateOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Genre',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreUpdateOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaType',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeUpdateOneRequiredWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineUpdateManyWithoutTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpsertWithoutPlaylistTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackUpdateWithoutPlaylistTrackInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackCreateWithoutPlaylistTrackInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpdateOneRequiredWithoutPlaylistTrackInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateWithoutPlaylistTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackCreateOrConnectWithoutPlaylistTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpsertWithoutPlaylistTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpdateWithoutPlaylistTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackUpdateWithoutPlaylistInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpdateOneRequiredWithoutPlaylistTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackUpsertWithWhereUniqueWithoutPlaylistInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrackWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrackUpdateWithoutPlaylistInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrackCreateWithoutPlaylistInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackUpdateWithWhereUniqueWithoutPlaylistInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrackWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrackUpdateWithoutPlaylistInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackUpdateManyWithWhereWithoutPlaylistInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistTrackScalarWhereInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackUpdateManyWithoutPlaylistInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackCreateWithoutPlaylistInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackCreateOrConnectWithoutPlaylistInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackUpsertWithWhereUniqueWithoutPlaylistInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'disconnect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'delete',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackUpdateWithWhereUniqueWithoutPlaylistInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updateMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackUpdateManyWithWhereWithoutPlaylistInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'deleteMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackScalarWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistUpdateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackUpdateManyWithoutPlaylistInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistUpdateManyMutationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackCreateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Playlist',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_PlaylistCreateNestedOneWithoutPlaylistTrackInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_TrackCreateNestedOneWithoutPlaylistTrackInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_PlaylistTrackUpdateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Playlist',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistUpdateOneRequiredWithoutPlaylistTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Track',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_TrackUpdateOneRequiredWithoutPlaylistTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackCreateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Album',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumCreateNestedOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Genre',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreCreateNestedOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaType',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'chinook_MediaTypeCreateNestedOneWithoutTrackInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineCreateNestedManyWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackCreateNestedManyWithoutTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_TrackUpdateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Composer',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Milliseconds',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_IntFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'String',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_NullableIntFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'UnitPrice',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_DecimalFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Album',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AlbumUpdateOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Genre',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_GenreUpdateOneWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'MediaType',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaTypeUpdateOneRequiredWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'InvoiceLine',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLineUpdateManyWithoutTrackInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PlaylistTrack',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrackUpdateManyWithoutTrackInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'Mutation',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_createOneAlbum',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_AlbumCreateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Album',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_upsertOneAlbum',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_AlbumWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'create',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_AlbumCreateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'update',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_AlbumUpdateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Album',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteOneAlbum',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_AlbumWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Album',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateOneAlbum',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_AlbumUpdateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_AlbumWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Album',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateManyAlbum',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_AlbumUpdateManyMutationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_AlbumWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteManyAlbum',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_AlbumWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_createOneArtist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_ArtistCreateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Artist',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_upsertOneArtist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_ArtistWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'create',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_ArtistCreateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'update',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_ArtistUpdateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Artist',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteOneArtist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_ArtistWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Artist',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateOneArtist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_ArtistUpdateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_ArtistWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Artist',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateManyArtist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_ArtistUpdateManyMutationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_ArtistWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteManyArtist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_ArtistWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_createOneCustomer',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_CustomerCreateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Customer',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_upsertOneCustomer',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_CustomerWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'create',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_CustomerCreateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'update',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_CustomerUpdateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Customer',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteOneCustomer',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_CustomerWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Customer',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateOneCustomer',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_CustomerUpdateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_CustomerWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Customer',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateManyCustomer',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_CustomerUpdateManyMutationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_CustomerWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteManyCustomer',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_CustomerWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_createOneEmployee',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_EmployeeCreateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Employee',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_upsertOneEmployee',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_EmployeeWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'create',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_EmployeeCreateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'update',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_EmployeeUpdateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Employee',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteOneEmployee',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_EmployeeWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Employee',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateOneEmployee',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_EmployeeUpdateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_EmployeeWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Employee',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateManyEmployee',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_EmployeeUpdateManyMutationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_EmployeeWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteManyEmployee',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_EmployeeWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_createOneGenre',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_GenreCreateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Genre',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_upsertOneGenre',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_GenreWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'create',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_GenreCreateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'update',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_GenreUpdateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Genre',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteOneGenre',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_GenreWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Genre',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateOneGenre',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_GenreUpdateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_GenreWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Genre',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateManyGenre',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_GenreUpdateManyMutationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_GenreWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteManyGenre',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_GenreWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_createOneInvoice',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceCreateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Invoice',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_upsertOneInvoice',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'create',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceCreateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'update',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceUpdateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Invoice',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteOneInvoice',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Invoice',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateOneInvoice',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceUpdateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Invoice',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateManyInvoice',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceUpdateManyMutationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteManyInvoice',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_createOneInvoiceLine',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceLineCreateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLine',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_upsertOneInvoiceLine',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceLineWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'create',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceLineCreateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'update',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceLineUpdateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLine',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteOneInvoiceLine',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceLineWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLine',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateOneInvoiceLine',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceLineUpdateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceLineWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_InvoiceLine',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateManyInvoiceLine',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_InvoiceLineUpdateManyMutationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceLineWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteManyInvoiceLine',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_InvoiceLineWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_createOneMediaType',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_MediaTypeCreateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_upsertOneMediaType',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_MediaTypeWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'create',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_MediaTypeCreateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'update',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_MediaTypeUpdateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteOneMediaType',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_MediaTypeWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateOneMediaType',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_MediaTypeUpdateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_MediaTypeWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_MediaType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateManyMediaType',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_MediaTypeUpdateManyMutationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_MediaTypeWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteManyMediaType',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_MediaTypeWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_createOnePlaylist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistCreateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Playlist',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_upsertOnePlaylist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'create',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistCreateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'update',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistUpdateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Playlist',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteOnePlaylist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Playlist',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateOnePlaylist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistUpdateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Playlist',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateManyPlaylist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistUpdateManyMutationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteManyPlaylist',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_createOnePlaylistTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistTrackCreateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrack',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_upsertOnePlaylistTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistTrackWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'create',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistTrackCreateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'update',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistTrackUpdateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrack',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteOnePlaylistTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistTrackWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrack',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateOnePlaylistTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistTrackUpdateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_PlaylistTrackWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_PlaylistTrack',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateManyPlaylistTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistTrackWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteManyPlaylistTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_PlaylistTrackWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_createOneTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackCreateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Track',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_upsertOneTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'create',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackCreateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'update',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackUpdateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Track',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteOneTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Track',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateOneTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackUpdateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_Track',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_updateManyTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'chinook_TrackUpdateManyMutationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_TrackWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'chinook_deleteManyTrack',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'chinook_TrackWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'chinook_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_createOnePost',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_PostCreateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_Post',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_upsertOnePost',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_PostWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'create',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_PostCreateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'update',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_PostUpdateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_Post',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_deleteOnePost',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_PostWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_Post',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_updateOnePost',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_PostUpdateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_PostWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_Post',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_updateManyPost',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_PostUpdateManyMutationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_PostWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_deleteManyPost',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_PostWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_createOneProfile',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_ProfileCreateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_Profile',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_upsertOneProfile',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_ProfileWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'create',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_ProfileCreateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'update',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_ProfileUpdateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_Profile',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_deleteOneProfile',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_ProfileWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_Profile',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_updateOneProfile',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_ProfileUpdateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_ProfileWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_Profile',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_updateManyProfile',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_ProfileUpdateManyMutationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_ProfileWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_deleteManyProfile',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_ProfileWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_createOneUser',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_UserCreateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_User',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_upsertOneUser',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_UserWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'create',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_UserCreateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'update',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_UserUpdateInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_User',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_deleteOneUser',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_UserWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_User',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_updateOneUser',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_UserUpdateInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_UserWhereUniqueInput',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_User',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_updateManyUser',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'data',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_UserUpdateManyMutationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_UserWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'db_deleteManyUser',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_UserWhereInput',
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_AffectedRowsOutput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'sdl_setSdlField',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'sdl',
							},
							type: {
								kind: Kind.NON_NULL_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'String',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.SCALAR_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'DateTime',
			},
			directives: [],
		},
		{
			kind: Kind.SCALAR_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'JSON',
			},
			directives: [],
		},
		{
			kind: Kind.SCALAR_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'UUID',
			},
			directives: [],
		},
		{
			kind: Kind.SCALAR_TYPE_DEFINITION,
			description: {
				kind: Kind.STRING,
				value: 'The `BigInt` scalar type represents non-fractional signed whole numeric values.',
				block: true,
			},
			name: {
				kind: Kind.NAME,
				value: 'BigInt',
			},
			directives: [],
		},
		{
			kind: Kind.SCALAR_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'chinook_Bytes',
			},
			directives: [],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_NestedIntFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_IntFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_NestedDateTimeFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedDateTimeFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_DateTimeFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedDateTimeFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_NestedStringFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'contains',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'startsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'endsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedStringFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_StringFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'contains',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'startsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'endsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedStringFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_NestedStringNullableFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'contains',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'startsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'endsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedStringNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_StringNullableFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'contains',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'startsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'endsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedStringNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_NestedBoolFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedBoolFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_BoolFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedBoolFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostListRelationFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'every',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'some',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'none',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_ProfileWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'bio',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'User',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserRelationFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileRelationFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'is',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'isNot',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_UserWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_StringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Post',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostListRelationFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Profile',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileRelationFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserRelationFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'is',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'isNot',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_PostWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'createdAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_DateTimeFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updatedAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_DateTimeFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_StringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'content',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'published',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_BoolFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'authorId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'User',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserRelationFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_SortOrder',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'asc',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'desc',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostOrderByRelationAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileOrderByWithRelationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'bio',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'User',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserOrderByWithRelationInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserOrderByWithRelationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Post',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostOrderByRelationAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Profile',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileOrderByWithRelationInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostOrderByWithRelationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'createdAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updatedAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'content',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'published',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'authorId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'User',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserOrderByWithRelationInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostWhereUniqueInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostScalarFieldEnum',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'createdAt',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updatedAt',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'content',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'published',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'authorId',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_Profile',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'bio',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'User',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_User',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserCountOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Post',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_User',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Post',
					},
					arguments: [
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'where',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_PostWhereInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'orderBy',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_PostOrderByWithRelationInput',
									},
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'cursor',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'db_PostWhereUniqueInput',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'take',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'skip',
							},
							type: {
								kind: Kind.NAMED_TYPE,
								name: {
									kind: Kind.NAME,
									value: 'Int',
								},
							},
							directives: [],
						},
						{
							kind: Kind.INPUT_VALUE_DEFINITION,
							name: {
								kind: Kind.NAME,
								value: 'distinct',
							},
							type: {
								kind: Kind.LIST_TYPE,
								type: {
									kind: Kind.NAMED_TYPE,
									name: {
										kind: Kind.NAME,
										value: 'db_PostScalarFieldEnum',
									},
								},
							},
							directives: [],
						},
					],
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_Post',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Profile',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_Profile',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_UserCountOutputType',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_Post',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'createdAt',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updatedAt',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'content',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'published',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Boolean',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'authorId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'User',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_User',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostCountAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'createdAt',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updatedAt',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'content',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'published',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'authorId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_all',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostAvgAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'authorId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostSumAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'authorId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostMinAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'createdAt',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updatedAt',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'content',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'published',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'authorId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostMaxAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'createdAt',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updatedAt',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'content',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'published',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'authorId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_AggregatePost',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostCountOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'createdAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updatedAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'content',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'published',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'authorId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostAvgOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'authorId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostMaxOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'createdAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updatedAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'content',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'published',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'authorId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostMinOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'createdAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updatedAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'content',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'published',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'authorId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostSumOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'authorId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostOrderByWithAggregationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'createdAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updatedAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'content',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'published',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'authorId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostCountOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostAvgOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostMaxOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostMinOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostSumOrderByAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_NestedFloatFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Float',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedFloatFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_NestedIntWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedFloatFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_IntWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedFloatFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_NestedDateTimeWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedDateTimeWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedDateTimeFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedDateTimeFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_DateTimeWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedDateTimeWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedDateTimeFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedDateTimeFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_NestedStringWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'contains',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'startsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'endsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedStringWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedStringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedStringFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_StringWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'contains',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'startsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'endsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedStringWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedStringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedStringFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_NestedIntNullableFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_NestedStringNullableWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'contains',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'startsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'endsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedStringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedStringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedStringNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_StringNullableWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'in',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'notIn',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'lte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'gte',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'contains',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'startsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'endsWith',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedStringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedStringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedStringNullableFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_NestedBoolWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedBoolWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedBoolFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedBoolFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_BoolWithAggregatesFilter',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'equals',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'not',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedBoolWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedIntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedBoolFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NestedBoolFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostScalarWhereWithAggregatesInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_PostScalarWhereWithAggregatesInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'createdAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_DateTimeWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updatedAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_DateTimeWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_StringWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'content',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'published',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_BoolWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'authorId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostGroupByOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'createdAt',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updatedAt',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'content',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'published',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Boolean',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'authorId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileWhereUniqueInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileScalarFieldEnum',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'bio',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileCountAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'bio',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_all',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileAvgAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileSumAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileMinAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'bio',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileMaxAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'bio',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_AggregateProfile',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileCountOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'bio',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileAvgOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileMaxOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'bio',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileMinOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'bio',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileSumOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileOrderByWithAggregationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'bio',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileCountOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileAvgOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileMaxOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileMinOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileSumOrderByAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileScalarWhereWithAggregatesInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_ProfileScalarWhereWithAggregatesInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'bio',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileGroupByOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'bio',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserWhereUniqueInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserScalarFieldEnum',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserCountAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_all',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserAvgAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Float',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserSumAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserMinAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserMaxAggregateOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_AggregateUser',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserCountOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserAvgOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserMaxOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserMinOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserSumOrderByAggregateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserOrderByWithAggregationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_SortOrder',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserCountOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserAvgOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserMaxOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserMinOrderByAggregateInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserSumOrderByAggregateInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserScalarWhereWithAggregatesInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_UserScalarWhereWithAggregatesInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserScalarWhereWithAggregatesInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_IntWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_StringWithAggregatesFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_StringNullableWithAggregatesFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserGroupByOutputType',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_count',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserCountAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_avg',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserAvgAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_sum',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserSumAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_min',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserMinAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_max',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserMaxAggregateOutputType',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileCreateWithoutUserInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'bio',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileCreateOrConnectWithoutUserInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_ProfileWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_ProfileCreateWithoutUserInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileCreateNestedOneWithoutUserInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileCreateWithoutUserInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileCreateOrConnectWithoutUserInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserCreateWithoutPostInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Profile',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileCreateNestedOneWithoutUserInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserCreateOrConnectWithoutPostInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_UserWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_UserCreateWithoutPostInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserCreateNestedOneWithoutPostInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserCreateWithoutPostInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserCreateOrConnectWithoutPostInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostCreateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'createdAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updatedAt',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'content',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'published',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'User',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_UserCreateNestedOneWithoutPostInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_DateTimeFieldUpdateOperationsInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_StringFieldUpdateOperationsInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_NullableStringFieldUpdateOperationsInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_BoolFieldUpdateOperationsInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileUpdateWithoutUserInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'bio',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileUpsertWithoutUserInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_ProfileUpdateWithoutUserInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_ProfileCreateWithoutUserInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileUpdateOneWithoutUserInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileCreateWithoutUserInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileCreateOrConnectWithoutUserInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileUpsertWithoutUserInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'disconnect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'delete',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileUpdateWithoutUserInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserUpdateWithoutPostInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Profile',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileUpdateOneWithoutUserInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserUpsertWithoutPostInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_UserUpdateWithoutPostInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_UserCreateWithoutPostInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserUpdateOneRequiredWithoutPostInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserCreateWithoutPostInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserCreateOrConnectWithoutPostInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserUpsertWithoutPostInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserUpdateWithoutPostInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostUpdateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'createdAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_DateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updatedAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_DateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'content',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'published',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_BoolFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'User',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserUpdateOneRequiredWithoutPostInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostUpdateManyMutationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'createdAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_DateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updatedAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_DateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'content',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'published',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_BoolFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_AffectedRowsOutput',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'count',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostCreateWithoutUserInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'createdAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'DateTime',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updatedAt',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'DateTime',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'content',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'published',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Boolean',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostCreateOrConnectWithoutUserInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_PostWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_PostCreateWithoutUserInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostCreateNestedManyWithoutUserInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostCreateWithoutUserInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostCreateOrConnectWithoutUserInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserCreateWithoutProfileInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Post',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostCreateNestedManyWithoutUserInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserCreateOrConnectWithoutProfileInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_UserWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_UserCreateWithoutProfileInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserCreateNestedOneWithoutProfileInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserCreateWithoutProfileInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserCreateOrConnectWithoutProfileInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserWhereUniqueInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileCreateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'bio',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'User',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_UserCreateNestedOneWithoutProfileInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostUpdateWithoutUserInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'createdAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_DateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updatedAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_DateTimeFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'content',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'published',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_BoolFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostUpsertWithWhereUniqueWithoutUserInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_PostWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_PostUpdateWithoutUserInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_PostCreateWithoutUserInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostUpdateWithWhereUniqueWithoutUserInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_PostWhereUniqueInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_PostUpdateWithoutUserInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostScalarWhereInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'AND',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostScalarWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'OR',
					},
					type: {
						kind: Kind.LIST_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_PostScalarWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NOT',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostScalarWhereInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_IntFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'createdAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_DateTimeFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updatedAt',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_DateTimeFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_StringFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'content',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_StringNullableFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'published',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_BoolFilter',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'authorId',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_IntFilter',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostUpdateManyWithWhereWithoutUserInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'where',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_PostScalarWhereInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'data',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_PostUpdateManyMutationInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_PostUpdateManyWithoutUserInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostCreateWithoutUserInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostCreateOrConnectWithoutUserInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostUpsertWithWhereUniqueWithoutUserInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'set',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'disconnect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'delete',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostUpdateWithWhereUniqueWithoutUserInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'updateMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostUpdateManyWithWhereWithoutUserInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'deleteMany',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostScalarWhereInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserUpdateWithoutProfileInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Post',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostUpdateManyWithoutUserInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserUpsertWithoutProfileInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_UserUpdateWithoutProfileInput',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'db_UserCreateWithoutProfileInput',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserUpdateOneRequiredWithoutProfileInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'create',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserCreateWithoutProfileInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connectOrCreate',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserCreateOrConnectWithoutProfileInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'upsert',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserUpsertWithoutProfileInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'connect',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserWhereUniqueInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'update',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserUpdateWithoutProfileInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileUpdateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'bio',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'User',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_UserUpdateOneRequiredWithoutProfileInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_ProfileUpdateManyMutationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'bio',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserCreateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Post',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostCreateNestedManyWithoutUserInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Profile',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileCreateNestedOneWithoutUserInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserUpdateInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Post',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_PostUpdateManyWithoutUserInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'Profile',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_ProfileUpdateOneWithoutUserInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_UserUpdateManyMutationInput',
			},
			directives: [],
			fields: [
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_StringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
				{
					kind: Kind.INPUT_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'db_NullableStringFieldUpdateOperationsInput',
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.SCALAR_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'db_Bytes',
			},
			directives: [],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'jsp2_Post',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'jsp2_User',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'username',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'ibm_jsp_Post',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'title',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'String',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'userId',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Int',
							},
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'ibm_jsp_User',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'email',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'Int',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'username',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'public_A',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.OBJECT_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'public_B',
			},
			interfaces: [],
			directives: [],
			fields: [
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'id',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'name',
					},
					arguments: [],
					type: {
						kind: Kind.NAMED_TYPE,
						name: {
							kind: Kind.NAME,
							value: 'String',
						},
					},
					directives: [],
				},
				{
					kind: Kind.FIELD_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: '_join',
					},
					arguments: [],
					type: {
						kind: Kind.NON_NULL_TYPE,
						type: {
							kind: Kind.NAMED_TYPE,
							name: {
								kind: Kind.NAME,
								value: 'Query',
							},
						},
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.UNION_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'public_GqlUnion',
			},
			directives: [],
			types: [
				{
					kind: Kind.NAMED_TYPE,
					name: {
						kind: Kind.NAME,
						value: 'public_A',
					},
				},
				{
					kind: Kind.NAMED_TYPE,
					name: {
						kind: Kind.NAME,
						value: 'public_B',
					},
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'public_Which',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'a',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'b',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'Claim',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'USERID',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EMAIL',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EMAIL_VERIFIED',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NAME',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'NICKNAME',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'LOCATION',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'PROVIDER',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'COMMON_REGEX_PATTERN',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'EMAIL',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'DOMAIN',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'WG_ROLE',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'admin',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					name: {
						kind: Kind.NAME,
						value: 'user',
					},
					directives: [],
				},
			],
		},
		{
			kind: Kind.ENUM_TYPE_DEFINITION,
			name: {
				kind: Kind.NAME,
				value: 'WunderGraphDateTimeFormat',
			},
			directives: [],
			values: [
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: '2006-01-02T15:04:05-0700',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'ISO8601',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: 'Mon Jan _2 15:04:05 2006',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'ANSIC',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: 'Mon Jan _2 15:04:05 MST 2006',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'UnixDate',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: 'Mon Jan 02 15:04:05 -0700 2006',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'RubyDate',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: '02 Jan 06 15:04 MST',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'RFC822',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: '02 Jan 06 15:04 -0700',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'RFC822Z',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: 'Monday, 02-Jan-06 15:04:05 MST',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'RFC850',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: 'Mon, 02 Jan 2006 15:04:05 MST',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'RFC1123',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: 'Mon, 02 Jan 2006 15:04:05 -0700',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'RFC1123Z',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: '2006-01-02T15:04:05Z07:00',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'RFC3339',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: '2006-01-02T15:04:05.999999999Z07:00',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'RFC3339Nano',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: '3:04PM',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'Kitchen',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: 'Jan _2 15:04:05',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'Stamp',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: 'Jan _2 15:04:05.000',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'StampMilli',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: 'Jan _2 15:04:05.000000',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'StampMicro',
					},
					directives: [],
				},
				{
					kind: Kind.ENUM_VALUE_DEFINITION,
					description: {
						kind: Kind.STRING,
						value: 'Jan _2 15:04:05.000000000',
						block: true,
					},
					name: {
						kind: Kind.NAME,
						value: 'StampNano',
					},
					directives: [],
				},
			],
		},
	],
});

export const ENUMS = Object.freeze({
	PRIVATE: true,
	PUBLIC: true,
	af: true,
	al: true,
	ar: true,
	az: true,
	bg: true,
	ca: true,
	cz: true,
	da: true,
	de: true,
	el: true,
	en: true,
	es: true,
	eu: true,
	fa: true,
	fi: true,
	fr: true,
	gl: true,
	he: true,
	hi: true,
	hr: true,
	hu: true,
	id: true,
	it: true,
	ja: true,
	kr: true,
	la: true,
	lt: true,
	mk: true,
	nl: true,
	no: true,
	pl: true,
	pt: true,
	pt_br: true,
	ro: true,
	ru: true,
	se: true,
	sk: true,
	sl: true,
	sp: true,
	sr: true,
	sv: true,
	th: true,
	tr: true,
	ua: true,
	uk: true,
	vi: true,
	zh_cn: true,
	zh_tw: true,
	zu: true,
	imperial: true,
	kelvin: true,
	metric: true,
	asc: true,
	desc: true,
	AlbumId: true,
	Title: true,
	ArtistId: true,
	TrackId: true,
	Name: true,
	MediaTypeId: true,
	GenreId: true,
	Composer: true,
	Milliseconds: true,
	String: true,
	UnitPrice: true,
	InvoiceLineId: true,
	InvoiceId: true,
	Quantity: true,
	CustomerId: true,
	FirstName: true,
	LastName: true,
	Company: true,
	Address: true,
	City: true,
	State: true,
	Country: true,
	PostalCode: true,
	Phone: true,
	Fax: true,
	Email: true,
	SupportRepId: true,
	EmployeeId: true,
	ReportsTo: true,
	BirthDate: true,
	HireDate: true,
	InvoiceDate: true,
	BillingAddress: true,
	BillingCity: true,
	BillingState: true,
	BillingCountry: true,
	BillingPostalCode: true,
	Total: true,
	PlaylistId: true,
	createdAt: true,
	updatedAt: true,
	title: true,
	content: true,
	published: true,
	authorId: true,
	bio: true,
	userId: true,
	email: true,
	name: true,
	a: true,
	b: true,
	USERID: true,
	EMAIL: true,
	EMAIL_VERIFIED: true,
	NAME: true,
	NICKNAME: true,
	LOCATION: true,
	PROVIDER: true,
	DOMAIN: true,
	admin: true,
	user: true,
	ISO8601: true,
	ANSIC: true,
	UnixDate: true,
	RubyDate: true,
	RFC822: true,
	RFC822Z: true,
	RFC850: true,
	RFC1123: true,
	RFC1123Z: true,
	RFC3339: true,
	RFC3339Nano: true,
	Kitchen: true,
	Stamp: true,
	StampMilli: true,
	StampMicro: true,
	StampNano: true,
	SCALAR: true,
	OBJECT: true,
	INTERFACE: true,
	UNION: true,
	ENUM: true,
	INPUT_OBJECT: true,
	LIST: true,
	NON_NULL: true,
	QUERY: true,
	MUTATION: true,
	SUBSCRIPTION: true,
	FIELD: true,
	FRAGMENT_DEFINITION: true,
	FRAGMENT_SPREAD: true,
	INLINE_FRAGMENT: true,
	VARIABLE_DEFINITION: true,
	SCHEMA: true,
	FIELD_DEFINITION: true,
	ARGUMENT_DEFINITION: true,
	ENUM_VALUE: true,
	INPUT_FIELD_DEFINITION: true,
} as const);

export interface ISchema {
	Query: IQuery;
	String: string;
	Int: number;
	ID: string;
	jsp_Post: Ijsp_Post;
	jsp_User: Ijsp_User;
	weather_CacheControlScope: weather_CacheControlScope;
	weather_City: Iweather_City;
	weather_Clouds: Iweather_Clouds;
	weather_ConfigInput: Iweather_ConfigInput;
	weather_Coordinates: Iweather_Coordinates;
	Float: number;
	weather_Language: weather_Language;
	weather_Summary: Iweather_Summary;
	weather_Temperature: Iweather_Temperature;
	weather_Unit: weather_Unit;
	weather_Upload: string;
	weather_Weather: Iweather_Weather;
	weather_Wind: Iweather_Wind;
	countries_Continent: Icountries_Continent;
	countries_ContinentFilterInput: Icountries_ContinentFilterInput;
	countries_Country: Icountries_Country;
	countries_CountryFilterInput: Icountries_CountryFilterInput;
	countries_Language: Icountries_Language;
	Boolean: boolean;
	countries_LanguageFilterInput: Icountries_LanguageFilterInput;
	countries_State: Icountries_State;
	countries_StringQueryOperatorInput: Icountries_StringQueryOperatorInput;
	spacex_Address: Ispacex_Address;
	spacex_Capsule: Ispacex_Capsule;
	spacex_CapsuleMission: Ispacex_CapsuleMission;
	spacex_CapsulesFind: Ispacex_CapsulesFind;
	spacex_Core: Ispacex_Core;
	spacex_CoreMission: Ispacex_CoreMission;
	spacex_CoresFind: Ispacex_CoresFind;
	Date: string;
	spacex_Distance: Ispacex_Distance;
	spacex_Dragon: Ispacex_Dragon;
	spacex_DragonHeatShield: Ispacex_DragonHeatShield;
	spacex_DragonPressurizedCapsule: Ispacex_DragonPressurizedCapsule;
	spacex_DragonThrust: Ispacex_DragonThrust;
	spacex_DragonTrunk: Ispacex_DragonTrunk;
	spacex_DragonTrunkCargo: Ispacex_DragonTrunkCargo;
	spacex_Force: Ispacex_Force;
	spacex_HistoriesResult: Ispacex_HistoriesResult;
	spacex_History: Ispacex_History;
	spacex_HistoryFind: Ispacex_HistoryFind;
	spacex_Info: Ispacex_Info;
	spacex_InfoLinks: Ispacex_InfoLinks;
	spacex_Landpad: Ispacex_Landpad;
	spacex_Launch: Ispacex_Launch;
	spacex_LaunchFind: Ispacex_LaunchFind;
	spacex_LaunchLinks: Ispacex_LaunchLinks;
	spacex_LaunchRocket: Ispacex_LaunchRocket;
	spacex_LaunchRocketFairings: Ispacex_LaunchRocketFairings;
	spacex_LaunchRocketFirstStage: Ispacex_LaunchRocketFirstStage;
	spacex_LaunchRocketFirstStageCore: Ispacex_LaunchRocketFirstStageCore;
	spacex_LaunchRocketSecondStage: Ispacex_LaunchRocketSecondStage;
	spacex_LaunchSite: Ispacex_LaunchSite;
	spacex_LaunchTelemetry: Ispacex_LaunchTelemetry;
	spacex_LaunchesPastResult: Ispacex_LaunchesPastResult;
	spacex_Launchpad: Ispacex_Launchpad;
	spacex_Link: Ispacex_Link;
	spacex_Location: Ispacex_Location;
	spacex_Mass: Ispacex_Mass;
	spacex_Mission: Ispacex_Mission;
	spacex_MissionResult: Ispacex_MissionResult;
	spacex_MissionsFind: Ispacex_MissionsFind;
	spacex_ObjectID: string;
	spacex_Payload: Ispacex_Payload;
	spacex_PayloadOrbitParams: Ispacex_PayloadOrbitParams;
	spacex_PayloadsFind: Ispacex_PayloadsFind;
	spacex_Result: Ispacex_Result;
	spacex_Roadster: Ispacex_Roadster;
	spacex_Rocket: Ispacex_Rocket;
	spacex_RocketEngines: Ispacex_RocketEngines;
	spacex_RocketFirstStage: Ispacex_RocketFirstStage;
	spacex_RocketLandingLegs: Ispacex_RocketLandingLegs;
	spacex_RocketPayloadWeight: Ispacex_RocketPayloadWeight;
	spacex_RocketSecondStage: Ispacex_RocketSecondStage;
	spacex_RocketSecondStagePayloadCompositeFairing: Ispacex_RocketSecondStagePayloadCompositeFairing;
	spacex_RocketSecondStagePayloads: Ispacex_RocketSecondStagePayloads;
	spacex_RocketsResult: Ispacex_RocketsResult;
	spacex_Ship: Ispacex_Ship;
	spacex_ShipLocation: Ispacex_ShipLocation;
	spacex_ShipMission: Ispacex_ShipMission;
	spacex_ShipsFind: Ispacex_ShipsFind;
	spacex_ShipsResult: Ispacex_ShipsResult;
	spacex_Volume: Ispacex_Volume;
	chinook_NestedIntFilter: Ichinook_NestedIntFilter;
	chinook_IntFilter: Ichinook_IntFilter;
	chinook_NestedStringFilter: Ichinook_NestedStringFilter;
	chinook_StringFilter: Ichinook_StringFilter;
	chinook_NestedStringNullableFilter: Ichinook_NestedStringNullableFilter;
	chinook_StringNullableFilter: Ichinook_StringNullableFilter;
	chinook_AlbumListRelationFilter: Ichinook_AlbumListRelationFilter;
	chinook_ArtistWhereInput: Ichinook_ArtistWhereInput;
	chinook_ArtistRelationFilter: Ichinook_ArtistRelationFilter;
	chinook_NestedIntNullableFilter: Ichinook_NestedIntNullableFilter;
	chinook_IntNullableFilter: Ichinook_IntNullableFilter;
	chinook_NestedDecimalFilter: Ichinook_NestedDecimalFilter;
	chinook_DecimalFilter: Ichinook_DecimalFilter;
	chinook_AlbumRelationFilter: Ichinook_AlbumRelationFilter;
	chinook_GenreWhereInput: Ichinook_GenreWhereInput;
	chinook_GenreRelationFilter: Ichinook_GenreRelationFilter;
	chinook_MediaTypeWhereInput: Ichinook_MediaTypeWhereInput;
	chinook_MediaTypeRelationFilter: Ichinook_MediaTypeRelationFilter;
	chinook_NestedDateTimeFilter: Ichinook_NestedDateTimeFilter;
	chinook_DateTimeFilter: Ichinook_DateTimeFilter;
	chinook_NestedDateTimeNullableFilter: Ichinook_NestedDateTimeNullableFilter;
	chinook_DateTimeNullableFilter: Ichinook_DateTimeNullableFilter;
	chinook_CustomerListRelationFilter: Ichinook_CustomerListRelationFilter;
	chinook_EmployeeListRelationFilter: Ichinook_EmployeeListRelationFilter;
	chinook_EmployeeWhereInput: Ichinook_EmployeeWhereInput;
	chinook_EmployeeRelationFilter: Ichinook_EmployeeRelationFilter;
	chinook_InvoiceListRelationFilter: Ichinook_InvoiceListRelationFilter;
	chinook_CustomerWhereInput: Ichinook_CustomerWhereInput;
	chinook_CustomerRelationFilter: Ichinook_CustomerRelationFilter;
	chinook_InvoiceWhereInput: Ichinook_InvoiceWhereInput;
	chinook_InvoiceRelationFilter: Ichinook_InvoiceRelationFilter;
	chinook_TrackRelationFilter: Ichinook_TrackRelationFilter;
	chinook_InvoiceLineWhereInput: Ichinook_InvoiceLineWhereInput;
	chinook_InvoiceLineListRelationFilter: Ichinook_InvoiceLineListRelationFilter;
	chinook_PlaylistWhereInput: Ichinook_PlaylistWhereInput;
	chinook_PlaylistRelationFilter: Ichinook_PlaylistRelationFilter;
	chinook_PlaylistTrackWhereInput: Ichinook_PlaylistTrackWhereInput;
	chinook_PlaylistTrackListRelationFilter: Ichinook_PlaylistTrackListRelationFilter;
	chinook_TrackWhereInput: Ichinook_TrackWhereInput;
	chinook_TrackListRelationFilter: Ichinook_TrackListRelationFilter;
	chinook_AlbumWhereInput: Ichinook_AlbumWhereInput;
	chinook_SortOrder: chinook_SortOrder;
	chinook_AlbumOrderByRelationAggregateInput: Ichinook_AlbumOrderByRelationAggregateInput;
	chinook_ArtistOrderByWithRelationInput: Ichinook_ArtistOrderByWithRelationInput;
	chinook_TrackOrderByRelationAggregateInput: Ichinook_TrackOrderByRelationAggregateInput;
	chinook_AlbumOrderByWithRelationInput: Ichinook_AlbumOrderByWithRelationInput;
	chinook_AlbumWhereUniqueInput: Ichinook_AlbumWhereUniqueInput;
	chinook_AlbumScalarFieldEnum: chinook_AlbumScalarFieldEnum;
	chinook_ArtistCountOutputType: Ichinook_ArtistCountOutputType;
	chinook_Artist: Ichinook_Artist;
	chinook_GenreOrderByWithRelationInput: Ichinook_GenreOrderByWithRelationInput;
	chinook_MediaTypeOrderByWithRelationInput: Ichinook_MediaTypeOrderByWithRelationInput;
	chinook_InvoiceLineOrderByRelationAggregateInput: Ichinook_InvoiceLineOrderByRelationAggregateInput;
	chinook_PlaylistTrackOrderByRelationAggregateInput: Ichinook_PlaylistTrackOrderByRelationAggregateInput;
	chinook_TrackOrderByWithRelationInput: Ichinook_TrackOrderByWithRelationInput;
	chinook_TrackWhereUniqueInput: Ichinook_TrackWhereUniqueInput;
	chinook_TrackScalarFieldEnum: chinook_TrackScalarFieldEnum;
	chinook_GenreCountOutputType: Ichinook_GenreCountOutputType;
	chinook_Genre: Ichinook_Genre;
	chinook_MediaTypeCountOutputType: Ichinook_MediaTypeCountOutputType;
	chinook_MediaType: Ichinook_MediaType;
	chinook_CustomerOrderByRelationAggregateInput: Ichinook_CustomerOrderByRelationAggregateInput;
	chinook_EmployeeOrderByRelationAggregateInput: Ichinook_EmployeeOrderByRelationAggregateInput;
	chinook_EmployeeOrderByWithRelationInput: Ichinook_EmployeeOrderByWithRelationInput;
	chinook_InvoiceOrderByRelationAggregateInput: Ichinook_InvoiceOrderByRelationAggregateInput;
	chinook_CustomerOrderByWithRelationInput: Ichinook_CustomerOrderByWithRelationInput;
	chinook_InvoiceOrderByWithRelationInput: Ichinook_InvoiceOrderByWithRelationInput;
	chinook_InvoiceLineOrderByWithRelationInput: Ichinook_InvoiceLineOrderByWithRelationInput;
	chinook_InvoiceLineWhereUniqueInput: Ichinook_InvoiceLineWhereUniqueInput;
	chinook_InvoiceLineScalarFieldEnum: chinook_InvoiceLineScalarFieldEnum;
	chinook_CustomerWhereUniqueInput: Ichinook_CustomerWhereUniqueInput;
	chinook_CustomerScalarFieldEnum: chinook_CustomerScalarFieldEnum;
	chinook_EmployeeWhereUniqueInput: Ichinook_EmployeeWhereUniqueInput;
	chinook_EmployeeScalarFieldEnum: chinook_EmployeeScalarFieldEnum;
	chinook_EmployeeCountOutputType: Ichinook_EmployeeCountOutputType;
	chinook_Employee: Ichinook_Employee;
	chinook_InvoiceWhereUniqueInput: Ichinook_InvoiceWhereUniqueInput;
	chinook_InvoiceScalarFieldEnum: chinook_InvoiceScalarFieldEnum;
	chinook_CustomerCountOutputType: Ichinook_CustomerCountOutputType;
	chinook_Customer: Ichinook_Customer;
	chinook_InvoiceCountOutputType: Ichinook_InvoiceCountOutputType;
	chinook_Invoice: Ichinook_Invoice;
	chinook_InvoiceLine: Ichinook_InvoiceLine;
	chinook_PlaylistOrderByWithRelationInput: Ichinook_PlaylistOrderByWithRelationInput;
	chinook_PlaylistTrackOrderByWithRelationInput: Ichinook_PlaylistTrackOrderByWithRelationInput;
	chinook_PlaylistTrackPlaylistIdTrackIdCompoundUniqueInput: Ichinook_PlaylistTrackPlaylistIdTrackIdCompoundUniqueInput;
	chinook_PlaylistTrackWhereUniqueInput: Ichinook_PlaylistTrackWhereUniqueInput;
	chinook_PlaylistTrackScalarFieldEnum: chinook_PlaylistTrackScalarFieldEnum;
	chinook_PlaylistCountOutputType: Ichinook_PlaylistCountOutputType;
	chinook_Playlist: Ichinook_Playlist;
	chinook_PlaylistTrack: Ichinook_PlaylistTrack;
	chinook_TrackCountOutputType: Ichinook_TrackCountOutputType;
	chinook_Track: Ichinook_Track;
	chinook_AlbumCountOutputType: Ichinook_AlbumCountOutputType;
	chinook_Album: Ichinook_Album;
	chinook_AlbumCountAggregateOutputType: Ichinook_AlbumCountAggregateOutputType;
	chinook_AlbumAvgAggregateOutputType: Ichinook_AlbumAvgAggregateOutputType;
	chinook_AlbumSumAggregateOutputType: Ichinook_AlbumSumAggregateOutputType;
	chinook_AlbumMinAggregateOutputType: Ichinook_AlbumMinAggregateOutputType;
	chinook_AlbumMaxAggregateOutputType: Ichinook_AlbumMaxAggregateOutputType;
	chinook_AggregateAlbum: Ichinook_AggregateAlbum;
	chinook_AlbumCountOrderByAggregateInput: Ichinook_AlbumCountOrderByAggregateInput;
	chinook_AlbumAvgOrderByAggregateInput: Ichinook_AlbumAvgOrderByAggregateInput;
	chinook_AlbumMaxOrderByAggregateInput: Ichinook_AlbumMaxOrderByAggregateInput;
	chinook_AlbumMinOrderByAggregateInput: Ichinook_AlbumMinOrderByAggregateInput;
	chinook_AlbumSumOrderByAggregateInput: Ichinook_AlbumSumOrderByAggregateInput;
	chinook_AlbumOrderByWithAggregationInput: Ichinook_AlbumOrderByWithAggregationInput;
	chinook_NestedFloatFilter: Ichinook_NestedFloatFilter;
	chinook_NestedIntWithAggregatesFilter: Ichinook_NestedIntWithAggregatesFilter;
	chinook_IntWithAggregatesFilter: Ichinook_IntWithAggregatesFilter;
	chinook_NestedStringWithAggregatesFilter: Ichinook_NestedStringWithAggregatesFilter;
	chinook_StringWithAggregatesFilter: Ichinook_StringWithAggregatesFilter;
	chinook_AlbumScalarWhereWithAggregatesInput: Ichinook_AlbumScalarWhereWithAggregatesInput;
	chinook_AlbumGroupByOutputType: Ichinook_AlbumGroupByOutputType;
	chinook_ArtistWhereUniqueInput: Ichinook_ArtistWhereUniqueInput;
	chinook_ArtistScalarFieldEnum: chinook_ArtistScalarFieldEnum;
	chinook_ArtistCountAggregateOutputType: Ichinook_ArtistCountAggregateOutputType;
	chinook_ArtistAvgAggregateOutputType: Ichinook_ArtistAvgAggregateOutputType;
	chinook_ArtistSumAggregateOutputType: Ichinook_ArtistSumAggregateOutputType;
	chinook_ArtistMinAggregateOutputType: Ichinook_ArtistMinAggregateOutputType;
	chinook_ArtistMaxAggregateOutputType: Ichinook_ArtistMaxAggregateOutputType;
	chinook_AggregateArtist: Ichinook_AggregateArtist;
	chinook_ArtistCountOrderByAggregateInput: Ichinook_ArtistCountOrderByAggregateInput;
	chinook_ArtistAvgOrderByAggregateInput: Ichinook_ArtistAvgOrderByAggregateInput;
	chinook_ArtistMaxOrderByAggregateInput: Ichinook_ArtistMaxOrderByAggregateInput;
	chinook_ArtistMinOrderByAggregateInput: Ichinook_ArtistMinOrderByAggregateInput;
	chinook_ArtistSumOrderByAggregateInput: Ichinook_ArtistSumOrderByAggregateInput;
	chinook_ArtistOrderByWithAggregationInput: Ichinook_ArtistOrderByWithAggregationInput;
	chinook_NestedStringNullableWithAggregatesFilter: Ichinook_NestedStringNullableWithAggregatesFilter;
	chinook_StringNullableWithAggregatesFilter: Ichinook_StringNullableWithAggregatesFilter;
	chinook_ArtistScalarWhereWithAggregatesInput: Ichinook_ArtistScalarWhereWithAggregatesInput;
	chinook_ArtistGroupByOutputType: Ichinook_ArtistGroupByOutputType;
	chinook_CustomerCountAggregateOutputType: Ichinook_CustomerCountAggregateOutputType;
	chinook_CustomerAvgAggregateOutputType: Ichinook_CustomerAvgAggregateOutputType;
	chinook_CustomerSumAggregateOutputType: Ichinook_CustomerSumAggregateOutputType;
	chinook_CustomerMinAggregateOutputType: Ichinook_CustomerMinAggregateOutputType;
	chinook_CustomerMaxAggregateOutputType: Ichinook_CustomerMaxAggregateOutputType;
	chinook_AggregateCustomer: Ichinook_AggregateCustomer;
	chinook_CustomerCountOrderByAggregateInput: Ichinook_CustomerCountOrderByAggregateInput;
	chinook_CustomerAvgOrderByAggregateInput: Ichinook_CustomerAvgOrderByAggregateInput;
	chinook_CustomerMaxOrderByAggregateInput: Ichinook_CustomerMaxOrderByAggregateInput;
	chinook_CustomerMinOrderByAggregateInput: Ichinook_CustomerMinOrderByAggregateInput;
	chinook_CustomerSumOrderByAggregateInput: Ichinook_CustomerSumOrderByAggregateInput;
	chinook_CustomerOrderByWithAggregationInput: Ichinook_CustomerOrderByWithAggregationInput;
	chinook_NestedFloatNullableFilter: Ichinook_NestedFloatNullableFilter;
	chinook_NestedIntNullableWithAggregatesFilter: Ichinook_NestedIntNullableWithAggregatesFilter;
	chinook_IntNullableWithAggregatesFilter: Ichinook_IntNullableWithAggregatesFilter;
	chinook_CustomerScalarWhereWithAggregatesInput: Ichinook_CustomerScalarWhereWithAggregatesInput;
	chinook_CustomerGroupByOutputType: Ichinook_CustomerGroupByOutputType;
	chinook_EmployeeCountAggregateOutputType: Ichinook_EmployeeCountAggregateOutputType;
	chinook_EmployeeAvgAggregateOutputType: Ichinook_EmployeeAvgAggregateOutputType;
	chinook_EmployeeSumAggregateOutputType: Ichinook_EmployeeSumAggregateOutputType;
	chinook_EmployeeMinAggregateOutputType: Ichinook_EmployeeMinAggregateOutputType;
	chinook_EmployeeMaxAggregateOutputType: Ichinook_EmployeeMaxAggregateOutputType;
	chinook_AggregateEmployee: Ichinook_AggregateEmployee;
	chinook_EmployeeCountOrderByAggregateInput: Ichinook_EmployeeCountOrderByAggregateInput;
	chinook_EmployeeAvgOrderByAggregateInput: Ichinook_EmployeeAvgOrderByAggregateInput;
	chinook_EmployeeMaxOrderByAggregateInput: Ichinook_EmployeeMaxOrderByAggregateInput;
	chinook_EmployeeMinOrderByAggregateInput: Ichinook_EmployeeMinOrderByAggregateInput;
	chinook_EmployeeSumOrderByAggregateInput: Ichinook_EmployeeSumOrderByAggregateInput;
	chinook_EmployeeOrderByWithAggregationInput: Ichinook_EmployeeOrderByWithAggregationInput;
	chinook_NestedDateTimeNullableWithAggregatesFilter: Ichinook_NestedDateTimeNullableWithAggregatesFilter;
	chinook_DateTimeNullableWithAggregatesFilter: Ichinook_DateTimeNullableWithAggregatesFilter;
	chinook_EmployeeScalarWhereWithAggregatesInput: Ichinook_EmployeeScalarWhereWithAggregatesInput;
	chinook_EmployeeGroupByOutputType: Ichinook_EmployeeGroupByOutputType;
	chinook_GenreWhereUniqueInput: Ichinook_GenreWhereUniqueInput;
	chinook_GenreScalarFieldEnum: chinook_GenreScalarFieldEnum;
	chinook_GenreCountAggregateOutputType: Ichinook_GenreCountAggregateOutputType;
	chinook_GenreAvgAggregateOutputType: Ichinook_GenreAvgAggregateOutputType;
	chinook_GenreSumAggregateOutputType: Ichinook_GenreSumAggregateOutputType;
	chinook_GenreMinAggregateOutputType: Ichinook_GenreMinAggregateOutputType;
	chinook_GenreMaxAggregateOutputType: Ichinook_GenreMaxAggregateOutputType;
	chinook_AggregateGenre: Ichinook_AggregateGenre;
	chinook_GenreCountOrderByAggregateInput: Ichinook_GenreCountOrderByAggregateInput;
	chinook_GenreAvgOrderByAggregateInput: Ichinook_GenreAvgOrderByAggregateInput;
	chinook_GenreMaxOrderByAggregateInput: Ichinook_GenreMaxOrderByAggregateInput;
	chinook_GenreMinOrderByAggregateInput: Ichinook_GenreMinOrderByAggregateInput;
	chinook_GenreSumOrderByAggregateInput: Ichinook_GenreSumOrderByAggregateInput;
	chinook_GenreOrderByWithAggregationInput: Ichinook_GenreOrderByWithAggregationInput;
	chinook_GenreScalarWhereWithAggregatesInput: Ichinook_GenreScalarWhereWithAggregatesInput;
	chinook_GenreGroupByOutputType: Ichinook_GenreGroupByOutputType;
	chinook_InvoiceCountAggregateOutputType: Ichinook_InvoiceCountAggregateOutputType;
	chinook_InvoiceAvgAggregateOutputType: Ichinook_InvoiceAvgAggregateOutputType;
	chinook_InvoiceSumAggregateOutputType: Ichinook_InvoiceSumAggregateOutputType;
	chinook_InvoiceMinAggregateOutputType: Ichinook_InvoiceMinAggregateOutputType;
	chinook_InvoiceMaxAggregateOutputType: Ichinook_InvoiceMaxAggregateOutputType;
	chinook_AggregateInvoice: Ichinook_AggregateInvoice;
	chinook_InvoiceCountOrderByAggregateInput: Ichinook_InvoiceCountOrderByAggregateInput;
	chinook_InvoiceAvgOrderByAggregateInput: Ichinook_InvoiceAvgOrderByAggregateInput;
	chinook_InvoiceMaxOrderByAggregateInput: Ichinook_InvoiceMaxOrderByAggregateInput;
	chinook_InvoiceMinOrderByAggregateInput: Ichinook_InvoiceMinOrderByAggregateInput;
	chinook_InvoiceSumOrderByAggregateInput: Ichinook_InvoiceSumOrderByAggregateInput;
	chinook_InvoiceOrderByWithAggregationInput: Ichinook_InvoiceOrderByWithAggregationInput;
	chinook_NestedDateTimeWithAggregatesFilter: Ichinook_NestedDateTimeWithAggregatesFilter;
	chinook_DateTimeWithAggregatesFilter: Ichinook_DateTimeWithAggregatesFilter;
	chinook_NestedDecimalWithAggregatesFilter: Ichinook_NestedDecimalWithAggregatesFilter;
	chinook_DecimalWithAggregatesFilter: Ichinook_DecimalWithAggregatesFilter;
	chinook_InvoiceScalarWhereWithAggregatesInput: Ichinook_InvoiceScalarWhereWithAggregatesInput;
	chinook_InvoiceGroupByOutputType: Ichinook_InvoiceGroupByOutputType;
	chinook_InvoiceLineCountAggregateOutputType: Ichinook_InvoiceLineCountAggregateOutputType;
	chinook_InvoiceLineAvgAggregateOutputType: Ichinook_InvoiceLineAvgAggregateOutputType;
	chinook_InvoiceLineSumAggregateOutputType: Ichinook_InvoiceLineSumAggregateOutputType;
	chinook_InvoiceLineMinAggregateOutputType: Ichinook_InvoiceLineMinAggregateOutputType;
	chinook_InvoiceLineMaxAggregateOutputType: Ichinook_InvoiceLineMaxAggregateOutputType;
	chinook_AggregateInvoiceLine: Ichinook_AggregateInvoiceLine;
	chinook_InvoiceLineCountOrderByAggregateInput: Ichinook_InvoiceLineCountOrderByAggregateInput;
	chinook_InvoiceLineAvgOrderByAggregateInput: Ichinook_InvoiceLineAvgOrderByAggregateInput;
	chinook_InvoiceLineMaxOrderByAggregateInput: Ichinook_InvoiceLineMaxOrderByAggregateInput;
	chinook_InvoiceLineMinOrderByAggregateInput: Ichinook_InvoiceLineMinOrderByAggregateInput;
	chinook_InvoiceLineSumOrderByAggregateInput: Ichinook_InvoiceLineSumOrderByAggregateInput;
	chinook_InvoiceLineOrderByWithAggregationInput: Ichinook_InvoiceLineOrderByWithAggregationInput;
	chinook_InvoiceLineScalarWhereWithAggregatesInput: Ichinook_InvoiceLineScalarWhereWithAggregatesInput;
	chinook_InvoiceLineGroupByOutputType: Ichinook_InvoiceLineGroupByOutputType;
	chinook_MediaTypeWhereUniqueInput: Ichinook_MediaTypeWhereUniqueInput;
	chinook_MediaTypeScalarFieldEnum: chinook_MediaTypeScalarFieldEnum;
	chinook_MediaTypeCountAggregateOutputType: Ichinook_MediaTypeCountAggregateOutputType;
	chinook_MediaTypeAvgAggregateOutputType: Ichinook_MediaTypeAvgAggregateOutputType;
	chinook_MediaTypeSumAggregateOutputType: Ichinook_MediaTypeSumAggregateOutputType;
	chinook_MediaTypeMinAggregateOutputType: Ichinook_MediaTypeMinAggregateOutputType;
	chinook_MediaTypeMaxAggregateOutputType: Ichinook_MediaTypeMaxAggregateOutputType;
	chinook_AggregateMediaType: Ichinook_AggregateMediaType;
	chinook_MediaTypeCountOrderByAggregateInput: Ichinook_MediaTypeCountOrderByAggregateInput;
	chinook_MediaTypeAvgOrderByAggregateInput: Ichinook_MediaTypeAvgOrderByAggregateInput;
	chinook_MediaTypeMaxOrderByAggregateInput: Ichinook_MediaTypeMaxOrderByAggregateInput;
	chinook_MediaTypeMinOrderByAggregateInput: Ichinook_MediaTypeMinOrderByAggregateInput;
	chinook_MediaTypeSumOrderByAggregateInput: Ichinook_MediaTypeSumOrderByAggregateInput;
	chinook_MediaTypeOrderByWithAggregationInput: Ichinook_MediaTypeOrderByWithAggregationInput;
	chinook_MediaTypeScalarWhereWithAggregatesInput: Ichinook_MediaTypeScalarWhereWithAggregatesInput;
	chinook_MediaTypeGroupByOutputType: Ichinook_MediaTypeGroupByOutputType;
	chinook_PlaylistWhereUniqueInput: Ichinook_PlaylistWhereUniqueInput;
	chinook_PlaylistScalarFieldEnum: chinook_PlaylistScalarFieldEnum;
	chinook_PlaylistCountAggregateOutputType: Ichinook_PlaylistCountAggregateOutputType;
	chinook_PlaylistAvgAggregateOutputType: Ichinook_PlaylistAvgAggregateOutputType;
	chinook_PlaylistSumAggregateOutputType: Ichinook_PlaylistSumAggregateOutputType;
	chinook_PlaylistMinAggregateOutputType: Ichinook_PlaylistMinAggregateOutputType;
	chinook_PlaylistMaxAggregateOutputType: Ichinook_PlaylistMaxAggregateOutputType;
	chinook_AggregatePlaylist: Ichinook_AggregatePlaylist;
	chinook_PlaylistCountOrderByAggregateInput: Ichinook_PlaylistCountOrderByAggregateInput;
	chinook_PlaylistAvgOrderByAggregateInput: Ichinook_PlaylistAvgOrderByAggregateInput;
	chinook_PlaylistMaxOrderByAggregateInput: Ichinook_PlaylistMaxOrderByAggregateInput;
	chinook_PlaylistMinOrderByAggregateInput: Ichinook_PlaylistMinOrderByAggregateInput;
	chinook_PlaylistSumOrderByAggregateInput: Ichinook_PlaylistSumOrderByAggregateInput;
	chinook_PlaylistOrderByWithAggregationInput: Ichinook_PlaylistOrderByWithAggregationInput;
	chinook_PlaylistScalarWhereWithAggregatesInput: Ichinook_PlaylistScalarWhereWithAggregatesInput;
	chinook_PlaylistGroupByOutputType: Ichinook_PlaylistGroupByOutputType;
	chinook_PlaylistTrackCountAggregateOutputType: Ichinook_PlaylistTrackCountAggregateOutputType;
	chinook_PlaylistTrackAvgAggregateOutputType: Ichinook_PlaylistTrackAvgAggregateOutputType;
	chinook_PlaylistTrackSumAggregateOutputType: Ichinook_PlaylistTrackSumAggregateOutputType;
	chinook_PlaylistTrackMinAggregateOutputType: Ichinook_PlaylistTrackMinAggregateOutputType;
	chinook_PlaylistTrackMaxAggregateOutputType: Ichinook_PlaylistTrackMaxAggregateOutputType;
	chinook_AggregatePlaylistTrack: Ichinook_AggregatePlaylistTrack;
	chinook_PlaylistTrackCountOrderByAggregateInput: Ichinook_PlaylistTrackCountOrderByAggregateInput;
	chinook_PlaylistTrackAvgOrderByAggregateInput: Ichinook_PlaylistTrackAvgOrderByAggregateInput;
	chinook_PlaylistTrackMaxOrderByAggregateInput: Ichinook_PlaylistTrackMaxOrderByAggregateInput;
	chinook_PlaylistTrackMinOrderByAggregateInput: Ichinook_PlaylistTrackMinOrderByAggregateInput;
	chinook_PlaylistTrackSumOrderByAggregateInput: Ichinook_PlaylistTrackSumOrderByAggregateInput;
	chinook_PlaylistTrackOrderByWithAggregationInput: Ichinook_PlaylistTrackOrderByWithAggregationInput;
	chinook_PlaylistTrackScalarWhereWithAggregatesInput: Ichinook_PlaylistTrackScalarWhereWithAggregatesInput;
	chinook_PlaylistTrackGroupByOutputType: Ichinook_PlaylistTrackGroupByOutputType;
	chinook_TrackCountAggregateOutputType: Ichinook_TrackCountAggregateOutputType;
	chinook_TrackAvgAggregateOutputType: Ichinook_TrackAvgAggregateOutputType;
	chinook_TrackSumAggregateOutputType: Ichinook_TrackSumAggregateOutputType;
	chinook_TrackMinAggregateOutputType: Ichinook_TrackMinAggregateOutputType;
	chinook_TrackMaxAggregateOutputType: Ichinook_TrackMaxAggregateOutputType;
	chinook_AggregateTrack: Ichinook_AggregateTrack;
	chinook_TrackCountOrderByAggregateInput: Ichinook_TrackCountOrderByAggregateInput;
	chinook_TrackAvgOrderByAggregateInput: Ichinook_TrackAvgOrderByAggregateInput;
	chinook_TrackMaxOrderByAggregateInput: Ichinook_TrackMaxOrderByAggregateInput;
	chinook_TrackMinOrderByAggregateInput: Ichinook_TrackMinOrderByAggregateInput;
	chinook_TrackSumOrderByAggregateInput: Ichinook_TrackSumOrderByAggregateInput;
	chinook_TrackOrderByWithAggregationInput: Ichinook_TrackOrderByWithAggregationInput;
	chinook_TrackScalarWhereWithAggregatesInput: Ichinook_TrackScalarWhereWithAggregatesInput;
	chinook_TrackGroupByOutputType: Ichinook_TrackGroupByOutputType;
	chinook_ArtistCreateWithoutAlbumInput: Ichinook_ArtistCreateWithoutAlbumInput;
	chinook_ArtistCreateOrConnectWithoutAlbumInput: Ichinook_ArtistCreateOrConnectWithoutAlbumInput;
	chinook_ArtistCreateNestedOneWithoutAlbumInput: Ichinook_ArtistCreateNestedOneWithoutAlbumInput;
	chinook_GenreCreateWithoutTrackInput: Ichinook_GenreCreateWithoutTrackInput;
	chinook_GenreCreateOrConnectWithoutTrackInput: Ichinook_GenreCreateOrConnectWithoutTrackInput;
	chinook_GenreCreateNestedOneWithoutTrackInput: Ichinook_GenreCreateNestedOneWithoutTrackInput;
	chinook_MediaTypeCreateWithoutTrackInput: Ichinook_MediaTypeCreateWithoutTrackInput;
	chinook_MediaTypeCreateOrConnectWithoutTrackInput: Ichinook_MediaTypeCreateOrConnectWithoutTrackInput;
	chinook_MediaTypeCreateNestedOneWithoutTrackInput: Ichinook_MediaTypeCreateNestedOneWithoutTrackInput;
	chinook_AlbumCreateWithoutTrackInput: Ichinook_AlbumCreateWithoutTrackInput;
	chinook_AlbumCreateOrConnectWithoutTrackInput: Ichinook_AlbumCreateOrConnectWithoutTrackInput;
	chinook_AlbumCreateNestedOneWithoutTrackInput: Ichinook_AlbumCreateNestedOneWithoutTrackInput;
	chinook_PlaylistCreateWithoutPlaylistTrackInput: Ichinook_PlaylistCreateWithoutPlaylistTrackInput;
	chinook_PlaylistCreateOrConnectWithoutPlaylistTrackInput: Ichinook_PlaylistCreateOrConnectWithoutPlaylistTrackInput;
	chinook_PlaylistCreateNestedOneWithoutPlaylistTrackInput: Ichinook_PlaylistCreateNestedOneWithoutPlaylistTrackInput;
	chinook_PlaylistTrackCreateWithoutTrackInput: Ichinook_PlaylistTrackCreateWithoutTrackInput;
	chinook_PlaylistTrackCreateOrConnectWithoutTrackInput: Ichinook_PlaylistTrackCreateOrConnectWithoutTrackInput;
	chinook_PlaylistTrackCreateNestedManyWithoutTrackInput: Ichinook_PlaylistTrackCreateNestedManyWithoutTrackInput;
	chinook_TrackCreateWithoutInvoiceLineInput: Ichinook_TrackCreateWithoutInvoiceLineInput;
	chinook_TrackCreateOrConnectWithoutInvoiceLineInput: Ichinook_TrackCreateOrConnectWithoutInvoiceLineInput;
	chinook_TrackCreateNestedOneWithoutInvoiceLineInput: Ichinook_TrackCreateNestedOneWithoutInvoiceLineInput;
	chinook_InvoiceLineCreateWithoutInvoiceInput: Ichinook_InvoiceLineCreateWithoutInvoiceInput;
	chinook_InvoiceLineCreateOrConnectWithoutInvoiceInput: Ichinook_InvoiceLineCreateOrConnectWithoutInvoiceInput;
	chinook_InvoiceLineCreateNestedManyWithoutInvoiceInput: Ichinook_InvoiceLineCreateNestedManyWithoutInvoiceInput;
	chinook_InvoiceCreateWithoutCustomerInput: Ichinook_InvoiceCreateWithoutCustomerInput;
	chinook_InvoiceCreateOrConnectWithoutCustomerInput: Ichinook_InvoiceCreateOrConnectWithoutCustomerInput;
	chinook_InvoiceCreateNestedManyWithoutCustomerInput: Ichinook_InvoiceCreateNestedManyWithoutCustomerInput;
	chinook_CustomerCreateWithoutEmployeeInput: Ichinook_CustomerCreateWithoutEmployeeInput;
	chinook_CustomerCreateOrConnectWithoutEmployeeInput: Ichinook_CustomerCreateOrConnectWithoutEmployeeInput;
	chinook_CustomerCreateNestedManyWithoutEmployeeInput: Ichinook_CustomerCreateNestedManyWithoutEmployeeInput;
	chinook_EmployeeCreateWithoutOther_EmployeeInput: Ichinook_EmployeeCreateWithoutOther_EmployeeInput;
	chinook_EmployeeCreateOrConnectWithoutOther_EmployeeInput: Ichinook_EmployeeCreateOrConnectWithoutOther_EmployeeInput;
	chinook_EmployeeCreateNestedOneWithoutOther_EmployeeInput: Ichinook_EmployeeCreateNestedOneWithoutOther_EmployeeInput;
	chinook_EmployeeCreateWithoutEmployeeInput: Ichinook_EmployeeCreateWithoutEmployeeInput;
	chinook_EmployeeCreateOrConnectWithoutEmployeeInput: Ichinook_EmployeeCreateOrConnectWithoutEmployeeInput;
	chinook_EmployeeCreateNestedManyWithoutEmployeeInput: Ichinook_EmployeeCreateNestedManyWithoutEmployeeInput;
	chinook_EmployeeCreateWithoutCustomerInput: Ichinook_EmployeeCreateWithoutCustomerInput;
	chinook_EmployeeCreateOrConnectWithoutCustomerInput: Ichinook_EmployeeCreateOrConnectWithoutCustomerInput;
	chinook_EmployeeCreateNestedOneWithoutCustomerInput: Ichinook_EmployeeCreateNestedOneWithoutCustomerInput;
	chinook_CustomerCreateWithoutInvoiceInput: Ichinook_CustomerCreateWithoutInvoiceInput;
	chinook_CustomerCreateOrConnectWithoutInvoiceInput: Ichinook_CustomerCreateOrConnectWithoutInvoiceInput;
	chinook_CustomerCreateNestedOneWithoutInvoiceInput: Ichinook_CustomerCreateNestedOneWithoutInvoiceInput;
	chinook_InvoiceCreateWithoutInvoiceLineInput: Ichinook_InvoiceCreateWithoutInvoiceLineInput;
	chinook_InvoiceCreateOrConnectWithoutInvoiceLineInput: Ichinook_InvoiceCreateOrConnectWithoutInvoiceLineInput;
	chinook_InvoiceCreateNestedOneWithoutInvoiceLineInput: Ichinook_InvoiceCreateNestedOneWithoutInvoiceLineInput;
	chinook_InvoiceLineCreateWithoutTrackInput: Ichinook_InvoiceLineCreateWithoutTrackInput;
	chinook_InvoiceLineCreateOrConnectWithoutTrackInput: Ichinook_InvoiceLineCreateOrConnectWithoutTrackInput;
	chinook_InvoiceLineCreateNestedManyWithoutTrackInput: Ichinook_InvoiceLineCreateNestedManyWithoutTrackInput;
	chinook_TrackCreateWithoutAlbumInput: Ichinook_TrackCreateWithoutAlbumInput;
	chinook_TrackCreateOrConnectWithoutAlbumInput: Ichinook_TrackCreateOrConnectWithoutAlbumInput;
	chinook_TrackCreateNestedManyWithoutAlbumInput: Ichinook_TrackCreateNestedManyWithoutAlbumInput;
	chinook_AlbumCreateInput: Ichinook_AlbumCreateInput;
	chinook_StringFieldUpdateOperationsInput: Ichinook_StringFieldUpdateOperationsInput;
	chinook_NullableStringFieldUpdateOperationsInput: Ichinook_NullableStringFieldUpdateOperationsInput;
	chinook_ArtistUpdateWithoutAlbumInput: Ichinook_ArtistUpdateWithoutAlbumInput;
	chinook_ArtistUpsertWithoutAlbumInput: Ichinook_ArtistUpsertWithoutAlbumInput;
	chinook_ArtistUpdateOneRequiredWithoutAlbumInput: Ichinook_ArtistUpdateOneRequiredWithoutAlbumInput;
	chinook_IntFieldUpdateOperationsInput: Ichinook_IntFieldUpdateOperationsInput;
	chinook_NullableIntFieldUpdateOperationsInput: Ichinook_NullableIntFieldUpdateOperationsInput;
	chinook_DecimalFieldUpdateOperationsInput: Ichinook_DecimalFieldUpdateOperationsInput;
	chinook_GenreUpdateWithoutTrackInput: Ichinook_GenreUpdateWithoutTrackInput;
	chinook_GenreUpsertWithoutTrackInput: Ichinook_GenreUpsertWithoutTrackInput;
	chinook_GenreUpdateOneWithoutTrackInput: Ichinook_GenreUpdateOneWithoutTrackInput;
	chinook_MediaTypeUpdateWithoutTrackInput: Ichinook_MediaTypeUpdateWithoutTrackInput;
	chinook_MediaTypeUpsertWithoutTrackInput: Ichinook_MediaTypeUpsertWithoutTrackInput;
	chinook_MediaTypeUpdateOneRequiredWithoutTrackInput: Ichinook_MediaTypeUpdateOneRequiredWithoutTrackInput;
	chinook_DateTimeFieldUpdateOperationsInput: Ichinook_DateTimeFieldUpdateOperationsInput;
	chinook_NullableDateTimeFieldUpdateOperationsInput: Ichinook_NullableDateTimeFieldUpdateOperationsInput;
	chinook_AlbumUpdateWithoutTrackInput: Ichinook_AlbumUpdateWithoutTrackInput;
	chinook_AlbumUpsertWithoutTrackInput: Ichinook_AlbumUpsertWithoutTrackInput;
	chinook_AlbumUpdateOneWithoutTrackInput: Ichinook_AlbumUpdateOneWithoutTrackInput;
	chinook_PlaylistUpdateWithoutPlaylistTrackInput: Ichinook_PlaylistUpdateWithoutPlaylistTrackInput;
	chinook_PlaylistUpsertWithoutPlaylistTrackInput: Ichinook_PlaylistUpsertWithoutPlaylistTrackInput;
	chinook_PlaylistUpdateOneRequiredWithoutPlaylistTrackInput: Ichinook_PlaylistUpdateOneRequiredWithoutPlaylistTrackInput;
	chinook_PlaylistTrackUpdateWithoutTrackInput: Ichinook_PlaylistTrackUpdateWithoutTrackInput;
	chinook_PlaylistTrackUpsertWithWhereUniqueWithoutTrackInput: Ichinook_PlaylistTrackUpsertWithWhereUniqueWithoutTrackInput;
	chinook_PlaylistTrackUpdateWithWhereUniqueWithoutTrackInput: Ichinook_PlaylistTrackUpdateWithWhereUniqueWithoutTrackInput;
	chinook_PlaylistTrackScalarWhereInput: Ichinook_PlaylistTrackScalarWhereInput;
	chinook_PlaylistTrackUpdateManyWithWhereWithoutTrackInput: Ichinook_PlaylistTrackUpdateManyWithWhereWithoutTrackInput;
	chinook_PlaylistTrackUpdateManyWithoutTrackInput: Ichinook_PlaylistTrackUpdateManyWithoutTrackInput;
	chinook_TrackUpdateWithoutInvoiceLineInput: Ichinook_TrackUpdateWithoutInvoiceLineInput;
	chinook_TrackUpsertWithoutInvoiceLineInput: Ichinook_TrackUpsertWithoutInvoiceLineInput;
	chinook_TrackUpdateOneRequiredWithoutInvoiceLineInput: Ichinook_TrackUpdateOneRequiredWithoutInvoiceLineInput;
	chinook_InvoiceLineUpdateWithoutInvoiceInput: Ichinook_InvoiceLineUpdateWithoutInvoiceInput;
	chinook_InvoiceLineUpsertWithWhereUniqueWithoutInvoiceInput: Ichinook_InvoiceLineUpsertWithWhereUniqueWithoutInvoiceInput;
	chinook_InvoiceLineUpdateWithWhereUniqueWithoutInvoiceInput: Ichinook_InvoiceLineUpdateWithWhereUniqueWithoutInvoiceInput;
	chinook_InvoiceLineScalarWhereInput: Ichinook_InvoiceLineScalarWhereInput;
	chinook_InvoiceLineUpdateManyMutationInput: Ichinook_InvoiceLineUpdateManyMutationInput;
	chinook_InvoiceLineUpdateManyWithWhereWithoutInvoiceInput: Ichinook_InvoiceLineUpdateManyWithWhereWithoutInvoiceInput;
	chinook_InvoiceLineUpdateManyWithoutInvoiceInput: Ichinook_InvoiceLineUpdateManyWithoutInvoiceInput;
	chinook_InvoiceUpdateWithoutCustomerInput: Ichinook_InvoiceUpdateWithoutCustomerInput;
	chinook_InvoiceUpsertWithWhereUniqueWithoutCustomerInput: Ichinook_InvoiceUpsertWithWhereUniqueWithoutCustomerInput;
	chinook_InvoiceUpdateWithWhereUniqueWithoutCustomerInput: Ichinook_InvoiceUpdateWithWhereUniqueWithoutCustomerInput;
	chinook_InvoiceScalarWhereInput: Ichinook_InvoiceScalarWhereInput;
	chinook_InvoiceUpdateManyMutationInput: Ichinook_InvoiceUpdateManyMutationInput;
	chinook_InvoiceUpdateManyWithWhereWithoutCustomerInput: Ichinook_InvoiceUpdateManyWithWhereWithoutCustomerInput;
	chinook_InvoiceUpdateManyWithoutCustomerInput: Ichinook_InvoiceUpdateManyWithoutCustomerInput;
	chinook_CustomerUpdateWithoutEmployeeInput: Ichinook_CustomerUpdateWithoutEmployeeInput;
	chinook_CustomerUpsertWithWhereUniqueWithoutEmployeeInput: Ichinook_CustomerUpsertWithWhereUniqueWithoutEmployeeInput;
	chinook_CustomerUpdateWithWhereUniqueWithoutEmployeeInput: Ichinook_CustomerUpdateWithWhereUniqueWithoutEmployeeInput;
	chinook_CustomerScalarWhereInput: Ichinook_CustomerScalarWhereInput;
	chinook_CustomerUpdateManyMutationInput: Ichinook_CustomerUpdateManyMutationInput;
	chinook_CustomerUpdateManyWithWhereWithoutEmployeeInput: Ichinook_CustomerUpdateManyWithWhereWithoutEmployeeInput;
	chinook_CustomerUpdateManyWithoutEmployeeInput: Ichinook_CustomerUpdateManyWithoutEmployeeInput;
	chinook_EmployeeUpdateWithoutOther_EmployeeInput: Ichinook_EmployeeUpdateWithoutOther_EmployeeInput;
	chinook_EmployeeUpsertWithoutOther_EmployeeInput: Ichinook_EmployeeUpsertWithoutOther_EmployeeInput;
	chinook_EmployeeUpdateOneWithoutOther_EmployeeInput: Ichinook_EmployeeUpdateOneWithoutOther_EmployeeInput;
	chinook_EmployeeUpdateWithoutEmployeeInput: Ichinook_EmployeeUpdateWithoutEmployeeInput;
	chinook_EmployeeUpsertWithWhereUniqueWithoutEmployeeInput: Ichinook_EmployeeUpsertWithWhereUniqueWithoutEmployeeInput;
	chinook_EmployeeUpdateWithWhereUniqueWithoutEmployeeInput: Ichinook_EmployeeUpdateWithWhereUniqueWithoutEmployeeInput;
	chinook_EmployeeScalarWhereInput: Ichinook_EmployeeScalarWhereInput;
	chinook_EmployeeUpdateManyMutationInput: Ichinook_EmployeeUpdateManyMutationInput;
	chinook_EmployeeUpdateManyWithWhereWithoutEmployeeInput: Ichinook_EmployeeUpdateManyWithWhereWithoutEmployeeInput;
	chinook_EmployeeUpdateManyWithoutEmployeeInput: Ichinook_EmployeeUpdateManyWithoutEmployeeInput;
	chinook_EmployeeUpdateWithoutCustomerInput: Ichinook_EmployeeUpdateWithoutCustomerInput;
	chinook_EmployeeUpsertWithoutCustomerInput: Ichinook_EmployeeUpsertWithoutCustomerInput;
	chinook_EmployeeUpdateOneWithoutCustomerInput: Ichinook_EmployeeUpdateOneWithoutCustomerInput;
	chinook_CustomerUpdateWithoutInvoiceInput: Ichinook_CustomerUpdateWithoutInvoiceInput;
	chinook_CustomerUpsertWithoutInvoiceInput: Ichinook_CustomerUpsertWithoutInvoiceInput;
	chinook_CustomerUpdateOneRequiredWithoutInvoiceInput: Ichinook_CustomerUpdateOneRequiredWithoutInvoiceInput;
	chinook_InvoiceUpdateWithoutInvoiceLineInput: Ichinook_InvoiceUpdateWithoutInvoiceLineInput;
	chinook_InvoiceUpsertWithoutInvoiceLineInput: Ichinook_InvoiceUpsertWithoutInvoiceLineInput;
	chinook_InvoiceUpdateOneRequiredWithoutInvoiceLineInput: Ichinook_InvoiceUpdateOneRequiredWithoutInvoiceLineInput;
	chinook_InvoiceLineUpdateWithoutTrackInput: Ichinook_InvoiceLineUpdateWithoutTrackInput;
	chinook_InvoiceLineUpsertWithWhereUniqueWithoutTrackInput: Ichinook_InvoiceLineUpsertWithWhereUniqueWithoutTrackInput;
	chinook_InvoiceLineUpdateWithWhereUniqueWithoutTrackInput: Ichinook_InvoiceLineUpdateWithWhereUniqueWithoutTrackInput;
	chinook_InvoiceLineUpdateManyWithWhereWithoutTrackInput: Ichinook_InvoiceLineUpdateManyWithWhereWithoutTrackInput;
	chinook_InvoiceLineUpdateManyWithoutTrackInput: Ichinook_InvoiceLineUpdateManyWithoutTrackInput;
	chinook_TrackUpdateWithoutAlbumInput: Ichinook_TrackUpdateWithoutAlbumInput;
	chinook_TrackUpsertWithWhereUniqueWithoutAlbumInput: Ichinook_TrackUpsertWithWhereUniqueWithoutAlbumInput;
	chinook_TrackUpdateWithWhereUniqueWithoutAlbumInput: Ichinook_TrackUpdateWithWhereUniqueWithoutAlbumInput;
	chinook_TrackScalarWhereInput: Ichinook_TrackScalarWhereInput;
	chinook_TrackUpdateManyMutationInput: Ichinook_TrackUpdateManyMutationInput;
	chinook_TrackUpdateManyWithWhereWithoutAlbumInput: Ichinook_TrackUpdateManyWithWhereWithoutAlbumInput;
	chinook_TrackUpdateManyWithoutAlbumInput: Ichinook_TrackUpdateManyWithoutAlbumInput;
	chinook_AlbumUpdateInput: Ichinook_AlbumUpdateInput;
	chinook_AlbumUpdateManyMutationInput: Ichinook_AlbumUpdateManyMutationInput;
	chinook_AffectedRowsOutput: Ichinook_AffectedRowsOutput;
	chinook_AlbumCreateWithoutArtistInput: Ichinook_AlbumCreateWithoutArtistInput;
	chinook_AlbumCreateOrConnectWithoutArtistInput: Ichinook_AlbumCreateOrConnectWithoutArtistInput;
	chinook_AlbumCreateNestedManyWithoutArtistInput: Ichinook_AlbumCreateNestedManyWithoutArtistInput;
	chinook_ArtistCreateInput: Ichinook_ArtistCreateInput;
	chinook_AlbumUpdateWithoutArtistInput: Ichinook_AlbumUpdateWithoutArtistInput;
	chinook_AlbumUpsertWithWhereUniqueWithoutArtistInput: Ichinook_AlbumUpsertWithWhereUniqueWithoutArtistInput;
	chinook_AlbumUpdateWithWhereUniqueWithoutArtistInput: Ichinook_AlbumUpdateWithWhereUniqueWithoutArtistInput;
	chinook_AlbumScalarWhereInput: Ichinook_AlbumScalarWhereInput;
	chinook_AlbumUpdateManyWithWhereWithoutArtistInput: Ichinook_AlbumUpdateManyWithWhereWithoutArtistInput;
	chinook_AlbumUpdateManyWithoutArtistInput: Ichinook_AlbumUpdateManyWithoutArtistInput;
	chinook_ArtistUpdateInput: Ichinook_ArtistUpdateInput;
	chinook_ArtistUpdateManyMutationInput: Ichinook_ArtistUpdateManyMutationInput;
	chinook_CustomerCreateInput: Ichinook_CustomerCreateInput;
	chinook_CustomerUpdateInput: Ichinook_CustomerUpdateInput;
	chinook_EmployeeCreateInput: Ichinook_EmployeeCreateInput;
	chinook_EmployeeUpdateInput: Ichinook_EmployeeUpdateInput;
	chinook_TrackCreateWithoutGenreInput: Ichinook_TrackCreateWithoutGenreInput;
	chinook_TrackCreateOrConnectWithoutGenreInput: Ichinook_TrackCreateOrConnectWithoutGenreInput;
	chinook_TrackCreateNestedManyWithoutGenreInput: Ichinook_TrackCreateNestedManyWithoutGenreInput;
	chinook_GenreCreateInput: Ichinook_GenreCreateInput;
	chinook_TrackUpdateWithoutGenreInput: Ichinook_TrackUpdateWithoutGenreInput;
	chinook_TrackUpsertWithWhereUniqueWithoutGenreInput: Ichinook_TrackUpsertWithWhereUniqueWithoutGenreInput;
	chinook_TrackUpdateWithWhereUniqueWithoutGenreInput: Ichinook_TrackUpdateWithWhereUniqueWithoutGenreInput;
	chinook_TrackUpdateManyWithWhereWithoutGenreInput: Ichinook_TrackUpdateManyWithWhereWithoutGenreInput;
	chinook_TrackUpdateManyWithoutGenreInput: Ichinook_TrackUpdateManyWithoutGenreInput;
	chinook_GenreUpdateInput: Ichinook_GenreUpdateInput;
	chinook_GenreUpdateManyMutationInput: Ichinook_GenreUpdateManyMutationInput;
	chinook_InvoiceCreateInput: Ichinook_InvoiceCreateInput;
	chinook_InvoiceUpdateInput: Ichinook_InvoiceUpdateInput;
	chinook_InvoiceLineCreateInput: Ichinook_InvoiceLineCreateInput;
	chinook_InvoiceLineUpdateInput: Ichinook_InvoiceLineUpdateInput;
	chinook_TrackCreateWithoutMediaTypeInput: Ichinook_TrackCreateWithoutMediaTypeInput;
	chinook_TrackCreateOrConnectWithoutMediaTypeInput: Ichinook_TrackCreateOrConnectWithoutMediaTypeInput;
	chinook_TrackCreateNestedManyWithoutMediaTypeInput: Ichinook_TrackCreateNestedManyWithoutMediaTypeInput;
	chinook_MediaTypeCreateInput: Ichinook_MediaTypeCreateInput;
	chinook_TrackUpdateWithoutMediaTypeInput: Ichinook_TrackUpdateWithoutMediaTypeInput;
	chinook_TrackUpsertWithWhereUniqueWithoutMediaTypeInput: Ichinook_TrackUpsertWithWhereUniqueWithoutMediaTypeInput;
	chinook_TrackUpdateWithWhereUniqueWithoutMediaTypeInput: Ichinook_TrackUpdateWithWhereUniqueWithoutMediaTypeInput;
	chinook_TrackUpdateManyWithWhereWithoutMediaTypeInput: Ichinook_TrackUpdateManyWithWhereWithoutMediaTypeInput;
	chinook_TrackUpdateManyWithoutMediaTypeInput: Ichinook_TrackUpdateManyWithoutMediaTypeInput;
	chinook_MediaTypeUpdateInput: Ichinook_MediaTypeUpdateInput;
	chinook_MediaTypeUpdateManyMutationInput: Ichinook_MediaTypeUpdateManyMutationInput;
	chinook_TrackCreateWithoutPlaylistTrackInput: Ichinook_TrackCreateWithoutPlaylistTrackInput;
	chinook_TrackCreateOrConnectWithoutPlaylistTrackInput: Ichinook_TrackCreateOrConnectWithoutPlaylistTrackInput;
	chinook_TrackCreateNestedOneWithoutPlaylistTrackInput: Ichinook_TrackCreateNestedOneWithoutPlaylistTrackInput;
	chinook_PlaylistTrackCreateWithoutPlaylistInput: Ichinook_PlaylistTrackCreateWithoutPlaylistInput;
	chinook_PlaylistTrackCreateOrConnectWithoutPlaylistInput: Ichinook_PlaylistTrackCreateOrConnectWithoutPlaylistInput;
	chinook_PlaylistTrackCreateNestedManyWithoutPlaylistInput: Ichinook_PlaylistTrackCreateNestedManyWithoutPlaylistInput;
	chinook_PlaylistCreateInput: Ichinook_PlaylistCreateInput;
	chinook_TrackUpdateWithoutPlaylistTrackInput: Ichinook_TrackUpdateWithoutPlaylistTrackInput;
	chinook_TrackUpsertWithoutPlaylistTrackInput: Ichinook_TrackUpsertWithoutPlaylistTrackInput;
	chinook_TrackUpdateOneRequiredWithoutPlaylistTrackInput: Ichinook_TrackUpdateOneRequiredWithoutPlaylistTrackInput;
	chinook_PlaylistTrackUpdateWithoutPlaylistInput: Ichinook_PlaylistTrackUpdateWithoutPlaylistInput;
	chinook_PlaylistTrackUpsertWithWhereUniqueWithoutPlaylistInput: Ichinook_PlaylistTrackUpsertWithWhereUniqueWithoutPlaylistInput;
	chinook_PlaylistTrackUpdateWithWhereUniqueWithoutPlaylistInput: Ichinook_PlaylistTrackUpdateWithWhereUniqueWithoutPlaylistInput;
	chinook_PlaylistTrackUpdateManyWithWhereWithoutPlaylistInput: Ichinook_PlaylistTrackUpdateManyWithWhereWithoutPlaylistInput;
	chinook_PlaylistTrackUpdateManyWithoutPlaylistInput: Ichinook_PlaylistTrackUpdateManyWithoutPlaylistInput;
	chinook_PlaylistUpdateInput: Ichinook_PlaylistUpdateInput;
	chinook_PlaylistUpdateManyMutationInput: Ichinook_PlaylistUpdateManyMutationInput;
	chinook_PlaylistTrackCreateInput: Ichinook_PlaylistTrackCreateInput;
	chinook_PlaylistTrackUpdateInput: Ichinook_PlaylistTrackUpdateInput;
	chinook_TrackCreateInput: Ichinook_TrackCreateInput;
	chinook_TrackUpdateInput: Ichinook_TrackUpdateInput;
	Mutation: IMutation;
	DateTime: string;
	JSON: string;
	UUID: string;
	BigInt: string;
	chinook_Bytes: string;
	db_NestedIntFilter: Idb_NestedIntFilter;
	db_IntFilter: Idb_IntFilter;
	db_NestedDateTimeFilter: Idb_NestedDateTimeFilter;
	db_DateTimeFilter: Idb_DateTimeFilter;
	db_NestedStringFilter: Idb_NestedStringFilter;
	db_StringFilter: Idb_StringFilter;
	db_NestedStringNullableFilter: Idb_NestedStringNullableFilter;
	db_StringNullableFilter: Idb_StringNullableFilter;
	db_NestedBoolFilter: Idb_NestedBoolFilter;
	db_BoolFilter: Idb_BoolFilter;
	db_PostListRelationFilter: Idb_PostListRelationFilter;
	db_ProfileWhereInput: Idb_ProfileWhereInput;
	db_ProfileRelationFilter: Idb_ProfileRelationFilter;
	db_UserWhereInput: Idb_UserWhereInput;
	db_UserRelationFilter: Idb_UserRelationFilter;
	db_PostWhereInput: Idb_PostWhereInput;
	db_SortOrder: db_SortOrder;
	db_PostOrderByRelationAggregateInput: Idb_PostOrderByRelationAggregateInput;
	db_ProfileOrderByWithRelationInput: Idb_ProfileOrderByWithRelationInput;
	db_UserOrderByWithRelationInput: Idb_UserOrderByWithRelationInput;
	db_PostOrderByWithRelationInput: Idb_PostOrderByWithRelationInput;
	db_PostWhereUniqueInput: Idb_PostWhereUniqueInput;
	db_PostScalarFieldEnum: db_PostScalarFieldEnum;
	db_Profile: Idb_Profile;
	db_UserCountOutputType: Idb_UserCountOutputType;
	db_User: Idb_User;
	db_Post: Idb_Post;
	db_PostCountAggregateOutputType: Idb_PostCountAggregateOutputType;
	db_PostAvgAggregateOutputType: Idb_PostAvgAggregateOutputType;
	db_PostSumAggregateOutputType: Idb_PostSumAggregateOutputType;
	db_PostMinAggregateOutputType: Idb_PostMinAggregateOutputType;
	db_PostMaxAggregateOutputType: Idb_PostMaxAggregateOutputType;
	db_AggregatePost: Idb_AggregatePost;
	db_PostCountOrderByAggregateInput: Idb_PostCountOrderByAggregateInput;
	db_PostAvgOrderByAggregateInput: Idb_PostAvgOrderByAggregateInput;
	db_PostMaxOrderByAggregateInput: Idb_PostMaxOrderByAggregateInput;
	db_PostMinOrderByAggregateInput: Idb_PostMinOrderByAggregateInput;
	db_PostSumOrderByAggregateInput: Idb_PostSumOrderByAggregateInput;
	db_PostOrderByWithAggregationInput: Idb_PostOrderByWithAggregationInput;
	db_NestedFloatFilter: Idb_NestedFloatFilter;
	db_NestedIntWithAggregatesFilter: Idb_NestedIntWithAggregatesFilter;
	db_IntWithAggregatesFilter: Idb_IntWithAggregatesFilter;
	db_NestedDateTimeWithAggregatesFilter: Idb_NestedDateTimeWithAggregatesFilter;
	db_DateTimeWithAggregatesFilter: Idb_DateTimeWithAggregatesFilter;
	db_NestedStringWithAggregatesFilter: Idb_NestedStringWithAggregatesFilter;
	db_StringWithAggregatesFilter: Idb_StringWithAggregatesFilter;
	db_NestedIntNullableFilter: Idb_NestedIntNullableFilter;
	db_NestedStringNullableWithAggregatesFilter: Idb_NestedStringNullableWithAggregatesFilter;
	db_StringNullableWithAggregatesFilter: Idb_StringNullableWithAggregatesFilter;
	db_NestedBoolWithAggregatesFilter: Idb_NestedBoolWithAggregatesFilter;
	db_BoolWithAggregatesFilter: Idb_BoolWithAggregatesFilter;
	db_PostScalarWhereWithAggregatesInput: Idb_PostScalarWhereWithAggregatesInput;
	db_PostGroupByOutputType: Idb_PostGroupByOutputType;
	db_ProfileWhereUniqueInput: Idb_ProfileWhereUniqueInput;
	db_ProfileScalarFieldEnum: db_ProfileScalarFieldEnum;
	db_ProfileCountAggregateOutputType: Idb_ProfileCountAggregateOutputType;
	db_ProfileAvgAggregateOutputType: Idb_ProfileAvgAggregateOutputType;
	db_ProfileSumAggregateOutputType: Idb_ProfileSumAggregateOutputType;
	db_ProfileMinAggregateOutputType: Idb_ProfileMinAggregateOutputType;
	db_ProfileMaxAggregateOutputType: Idb_ProfileMaxAggregateOutputType;
	db_AggregateProfile: Idb_AggregateProfile;
	db_ProfileCountOrderByAggregateInput: Idb_ProfileCountOrderByAggregateInput;
	db_ProfileAvgOrderByAggregateInput: Idb_ProfileAvgOrderByAggregateInput;
	db_ProfileMaxOrderByAggregateInput: Idb_ProfileMaxOrderByAggregateInput;
	db_ProfileMinOrderByAggregateInput: Idb_ProfileMinOrderByAggregateInput;
	db_ProfileSumOrderByAggregateInput: Idb_ProfileSumOrderByAggregateInput;
	db_ProfileOrderByWithAggregationInput: Idb_ProfileOrderByWithAggregationInput;
	db_ProfileScalarWhereWithAggregatesInput: Idb_ProfileScalarWhereWithAggregatesInput;
	db_ProfileGroupByOutputType: Idb_ProfileGroupByOutputType;
	db_UserWhereUniqueInput: Idb_UserWhereUniqueInput;
	db_UserScalarFieldEnum: db_UserScalarFieldEnum;
	db_UserCountAggregateOutputType: Idb_UserCountAggregateOutputType;
	db_UserAvgAggregateOutputType: Idb_UserAvgAggregateOutputType;
	db_UserSumAggregateOutputType: Idb_UserSumAggregateOutputType;
	db_UserMinAggregateOutputType: Idb_UserMinAggregateOutputType;
	db_UserMaxAggregateOutputType: Idb_UserMaxAggregateOutputType;
	db_AggregateUser: Idb_AggregateUser;
	db_UserCountOrderByAggregateInput: Idb_UserCountOrderByAggregateInput;
	db_UserAvgOrderByAggregateInput: Idb_UserAvgOrderByAggregateInput;
	db_UserMaxOrderByAggregateInput: Idb_UserMaxOrderByAggregateInput;
	db_UserMinOrderByAggregateInput: Idb_UserMinOrderByAggregateInput;
	db_UserSumOrderByAggregateInput: Idb_UserSumOrderByAggregateInput;
	db_UserOrderByWithAggregationInput: Idb_UserOrderByWithAggregationInput;
	db_UserScalarWhereWithAggregatesInput: Idb_UserScalarWhereWithAggregatesInput;
	db_UserGroupByOutputType: Idb_UserGroupByOutputType;
	db_ProfileCreateWithoutUserInput: Idb_ProfileCreateWithoutUserInput;
	db_ProfileCreateOrConnectWithoutUserInput: Idb_ProfileCreateOrConnectWithoutUserInput;
	db_ProfileCreateNestedOneWithoutUserInput: Idb_ProfileCreateNestedOneWithoutUserInput;
	db_UserCreateWithoutPostInput: Idb_UserCreateWithoutPostInput;
	db_UserCreateOrConnectWithoutPostInput: Idb_UserCreateOrConnectWithoutPostInput;
	db_UserCreateNestedOneWithoutPostInput: Idb_UserCreateNestedOneWithoutPostInput;
	db_PostCreateInput: Idb_PostCreateInput;
	db_DateTimeFieldUpdateOperationsInput: Idb_DateTimeFieldUpdateOperationsInput;
	db_StringFieldUpdateOperationsInput: Idb_StringFieldUpdateOperationsInput;
	db_NullableStringFieldUpdateOperationsInput: Idb_NullableStringFieldUpdateOperationsInput;
	db_BoolFieldUpdateOperationsInput: Idb_BoolFieldUpdateOperationsInput;
	db_ProfileUpdateWithoutUserInput: Idb_ProfileUpdateWithoutUserInput;
	db_ProfileUpsertWithoutUserInput: Idb_ProfileUpsertWithoutUserInput;
	db_ProfileUpdateOneWithoutUserInput: Idb_ProfileUpdateOneWithoutUserInput;
	db_UserUpdateWithoutPostInput: Idb_UserUpdateWithoutPostInput;
	db_UserUpsertWithoutPostInput: Idb_UserUpsertWithoutPostInput;
	db_UserUpdateOneRequiredWithoutPostInput: Idb_UserUpdateOneRequiredWithoutPostInput;
	db_PostUpdateInput: Idb_PostUpdateInput;
	db_PostUpdateManyMutationInput: Idb_PostUpdateManyMutationInput;
	db_AffectedRowsOutput: Idb_AffectedRowsOutput;
	db_PostCreateWithoutUserInput: Idb_PostCreateWithoutUserInput;
	db_PostCreateOrConnectWithoutUserInput: Idb_PostCreateOrConnectWithoutUserInput;
	db_PostCreateNestedManyWithoutUserInput: Idb_PostCreateNestedManyWithoutUserInput;
	db_UserCreateWithoutProfileInput: Idb_UserCreateWithoutProfileInput;
	db_UserCreateOrConnectWithoutProfileInput: Idb_UserCreateOrConnectWithoutProfileInput;
	db_UserCreateNestedOneWithoutProfileInput: Idb_UserCreateNestedOneWithoutProfileInput;
	db_ProfileCreateInput: Idb_ProfileCreateInput;
	db_PostUpdateWithoutUserInput: Idb_PostUpdateWithoutUserInput;
	db_PostUpsertWithWhereUniqueWithoutUserInput: Idb_PostUpsertWithWhereUniqueWithoutUserInput;
	db_PostUpdateWithWhereUniqueWithoutUserInput: Idb_PostUpdateWithWhereUniqueWithoutUserInput;
	db_PostScalarWhereInput: Idb_PostScalarWhereInput;
	db_PostUpdateManyWithWhereWithoutUserInput: Idb_PostUpdateManyWithWhereWithoutUserInput;
	db_PostUpdateManyWithoutUserInput: Idb_PostUpdateManyWithoutUserInput;
	db_UserUpdateWithoutProfileInput: Idb_UserUpdateWithoutProfileInput;
	db_UserUpsertWithoutProfileInput: Idb_UserUpsertWithoutProfileInput;
	db_UserUpdateOneRequiredWithoutProfileInput: Idb_UserUpdateOneRequiredWithoutProfileInput;
	db_ProfileUpdateInput: Idb_ProfileUpdateInput;
	db_ProfileUpdateManyMutationInput: Idb_ProfileUpdateManyMutationInput;
	db_UserCreateInput: Idb_UserCreateInput;
	db_UserUpdateInput: Idb_UserUpdateInput;
	db_UserUpdateManyMutationInput: Idb_UserUpdateManyMutationInput;
	db_Bytes: string;
	jsp2_Post: Ijsp2_Post;
	jsp2_User: Ijsp2_User;
	ibm_jsp_Post: Iibm_jsp_Post;
	ibm_jsp_User: Iibm_jsp_User;
	public_A: Ipublic_A;
	public_B: Ipublic_B;
	public_GqlUnion: Ipublic_GqlUnion;
	public_Which: public_Which;
	Claim: Claim;
	COMMON_REGEX_PATTERN: COMMON_REGEX_PATTERN;
	WG_ROLE: WG_ROLE;
	WunderGraphDateTimeFormat: WunderGraphDateTimeFormat;
}

export interface IQuery {
	readonly __typename: 'Query';
	jsp_getPosts(variables: { tld: string }): ReadonlyArray<Ijsp_Post> | null;
	jsp_getUsers(variables: { tld: string }): ReadonlyArray<Ijsp_User> | null;
	jsp_getUser(variables: { tld: string; id: number }): Ijsp_User | null;
	jsp_getPost(variables: { tld: string; id: number }): Ijsp_Post | null;
	weather_getCityById(variables: {
		config: Iweather_ConfigInput | undefined;
		id: string[] | undefined;
	}): ReadonlyArray<Iweather_City> | null;
	weather_getCityByName(variables: {
		config: Iweather_ConfigInput | undefined;
		country: string | undefined;
		name: string;
	}): Iweather_City | null;
	countries_continent(variables: { code: string }): Icountries_Continent | null;
	countries_continents(variables: {
		filter: Icountries_ContinentFilterInput | undefined;
	}): ReadonlyArray<Icountries_Continent>;
	countries_countries(variables: {
		filter: Icountries_CountryFilterInput | undefined;
	}): ReadonlyArray<Icountries_Country>;
	countries_country(variables: { code: string }): Icountries_Country | null;
	countries_language(variables: { code: string }): Icountries_Language | null;
	countries_languages(variables: {
		filter: Icountries_LanguageFilterInput | undefined;
	}): ReadonlyArray<Icountries_Language>;
	spacex_capsule(variables: { id: string }): Ispacex_Capsule | null;
	spacex_capsules(variables: {
		find: Ispacex_CapsulesFind | undefined;
		limit: number | undefined;
		offset: number | undefined;
		order: string | undefined;
		sort: string | undefined;
	}): ReadonlyArray<Ispacex_Capsule> | null;
	spacex_capsulesPast(variables: {
		find: Ispacex_CapsulesFind | undefined;
		limit: number | undefined;
		offset: number | undefined;
		order: string | undefined;
		sort: string | undefined;
	}): ReadonlyArray<Ispacex_Capsule> | null;
	spacex_capsulesUpcoming(variables: {
		find: Ispacex_CapsulesFind | undefined;
		limit: number | undefined;
		offset: number | undefined;
		order: string | undefined;
		sort: string | undefined;
	}): ReadonlyArray<Ispacex_Capsule> | null;
	readonly spacex_company: Ispacex_Info | null;
	spacex_core(variables: { id: string }): Ispacex_Core | null;
	spacex_cores(variables: {
		find: Ispacex_CoresFind | undefined;
		limit: number | undefined;
		offset: number | undefined;
		order: string | undefined;
		sort: string | undefined;
	}): ReadonlyArray<Ispacex_Core> | null;
	spacex_coresPast(variables: {
		find: Ispacex_CoresFind | undefined;
		limit: number | undefined;
		offset: number | undefined;
		order: string | undefined;
		sort: string | undefined;
	}): ReadonlyArray<Ispacex_Core> | null;
	spacex_coresUpcoming(variables: {
		find: Ispacex_CoresFind | undefined;
		limit: number | undefined;
		offset: number | undefined;
		order: string | undefined;
		sort: string | undefined;
	}): ReadonlyArray<Ispacex_Core> | null;
	spacex_dragon(variables: { id: string }): Ispacex_Dragon | null;
	spacex_dragons(variables: {
		limit: number | undefined;
		offset: number | undefined;
	}): ReadonlyArray<Ispacex_Dragon> | null;
	spacex_histories(variables: {
		find: Ispacex_HistoryFind | undefined;
		limit: number | undefined;
		offset: number | undefined;
		order: string | undefined;
		sort: string | undefined;
	}): ReadonlyArray<Ispacex_History> | null;
	spacex_historiesResult(variables: {
		find: Ispacex_HistoryFind | undefined;
		limit: number | undefined;
		offset: number | undefined;
		order: string | undefined;
		sort: string | undefined;
	}): Ispacex_HistoriesResult | null;
	spacex_history(variables: { id: string }): Ispacex_History | null;
	spacex_landpad(variables: { id: string }): Ispacex_Landpad | null;
	spacex_landpads(variables: {
		limit: number | undefined;
		offset: number | undefined;
	}): ReadonlyArray<Ispacex_Landpad> | null;
	spacex_launch(variables: { id: string }): Ispacex_Launch | null;
	spacex_launchLatest(variables: { offset: number | undefined }): Ispacex_Launch | null;
	spacex_launchNext(variables: { offset: number | undefined }): Ispacex_Launch | null;
	spacex_launches(variables: {
		find: Ispacex_LaunchFind | undefined;
		limit: number | undefined;
		offset: number | undefined;
		order: string | undefined;
		sort: string | undefined;
	}): ReadonlyArray<Ispacex_Launch> | null;
	spacex_launchesPast(variables: {
		find: Ispacex_LaunchFind | undefined;
		limit: number | undefined;
		offset: number | undefined;
		order: string | undefined;
		sort: string | undefined;
	}): ReadonlyArray<Ispacex_Launch> | null;
	spacex_launchesPastResult(variables: {
		find: Ispacex_LaunchFind | undefined;
		limit: number | undefined;
		offset: number | undefined;
		order: string | undefined;
		sort: string | undefined;
	}): Ispacex_LaunchesPastResult | null;
	spacex_launchesUpcoming(variables: {
		find: Ispacex_LaunchFind | undefined;
		limit: number | undefined;
		offset: number | undefined;
		order: string | undefined;
		sort: string | undefined;
	}): ReadonlyArray<Ispacex_Launch> | null;
	spacex_launchpad(variables: { id: string }): Ispacex_Launchpad | null;
	spacex_launchpads(variables: {
		limit: number | undefined;
		offset: number | undefined;
	}): ReadonlyArray<Ispacex_Launchpad> | null;
	spacex_mission(variables: { id: string }): Ispacex_Mission | null;
	spacex_missions(variables: {
		find: Ispacex_MissionsFind | undefined;
		limit: number | undefined;
		offset: number | undefined;
	}): ReadonlyArray<Ispacex_Mission> | null;
	spacex_missionsResult(variables: {
		find: Ispacex_MissionsFind | undefined;
		limit: number | undefined;
		offset: number | undefined;
	}): Ispacex_MissionResult | null;
	spacex_payload(variables: { id: string }): Ispacex_Payload | null;
	spacex_payloads(variables: {
		find: Ispacex_PayloadsFind | undefined;
		limit: number | undefined;
		offset: number | undefined;
		order: string | undefined;
		sort: string | undefined;
	}): ReadonlyArray<Ispacex_Payload> | null;
	readonly spacex_roadster: Ispacex_Roadster | null;
	spacex_rocket(variables: { id: string }): Ispacex_Rocket | null;
	spacex_rockets(variables: {
		limit: number | undefined;
		offset: number | undefined;
	}): ReadonlyArray<Ispacex_Rocket> | null;
	spacex_rocketsResult(variables: {
		limit: number | undefined;
		offset: number | undefined;
	}): Ispacex_RocketsResult | null;
	spacex_ship(variables: { id: string }): Ispacex_Ship | null;
	spacex_ships(variables: {
		find: Ispacex_ShipsFind | undefined;
		limit: number | undefined;
		offset: number | undefined;
		order: string | undefined;
		sort: string | undefined;
	}): ReadonlyArray<Ispacex_Ship> | null;
	spacex_shipsResult(variables: {
		find: Ispacex_ShipsFind | undefined;
		limit: number | undefined;
		offset: number | undefined;
		order: string | undefined;
		sort: string | undefined;
	}): Ispacex_ShipsResult | null;
	chinook_findFirstAlbum(variables: {
		where: Ichinook_AlbumWhereInput | undefined;
		orderBy: Ichinook_AlbumOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_AlbumWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_AlbumScalarFieldEnum[] | undefined;
	}): Ichinook_Album | null;
	chinook_findManyAlbum(variables: {
		where: Ichinook_AlbumWhereInput | undefined;
		orderBy: Ichinook_AlbumOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_AlbumWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_AlbumScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_Album>;
	chinook_aggregateAlbum(variables: {
		where: Ichinook_AlbumWhereInput | undefined;
		orderBy: Ichinook_AlbumOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_AlbumWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): Ichinook_AggregateAlbum;
	chinook_groupByAlbum(variables: {
		where: Ichinook_AlbumWhereInput | undefined;
		orderBy: Ichinook_AlbumOrderByWithAggregationInput[] | undefined;
		by: chinook_AlbumScalarFieldEnum[];
		having: Ichinook_AlbumScalarWhereWithAggregatesInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): ReadonlyArray<Ichinook_AlbumGroupByOutputType>;
	chinook_findUniqueAlbum(variables: { where: Ichinook_AlbumWhereUniqueInput }): Ichinook_Album | null;
	chinook_findFirstArtist(variables: {
		where: Ichinook_ArtistWhereInput | undefined;
		orderBy: Ichinook_ArtistOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_ArtistWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_ArtistScalarFieldEnum[] | undefined;
	}): Ichinook_Artist | null;
	chinook_findManyArtist(variables: {
		where: Ichinook_ArtistWhereInput | undefined;
		orderBy: Ichinook_ArtistOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_ArtistWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_ArtistScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_Artist>;
	chinook_aggregateArtist(variables: {
		where: Ichinook_ArtistWhereInput | undefined;
		orderBy: Ichinook_ArtistOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_ArtistWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): Ichinook_AggregateArtist;
	chinook_groupByArtist(variables: {
		where: Ichinook_ArtistWhereInput | undefined;
		orderBy: Ichinook_ArtistOrderByWithAggregationInput[] | undefined;
		by: chinook_ArtistScalarFieldEnum[];
		having: Ichinook_ArtistScalarWhereWithAggregatesInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): ReadonlyArray<Ichinook_ArtistGroupByOutputType>;
	chinook_findUniqueArtist(variables: { where: Ichinook_ArtistWhereUniqueInput }): Ichinook_Artist | null;
	chinook_findFirstCustomer(variables: {
		where: Ichinook_CustomerWhereInput | undefined;
		orderBy: Ichinook_CustomerOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_CustomerWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_CustomerScalarFieldEnum[] | undefined;
	}): Ichinook_Customer | null;
	chinook_findManyCustomer(variables: {
		where: Ichinook_CustomerWhereInput | undefined;
		orderBy: Ichinook_CustomerOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_CustomerWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_CustomerScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_Customer>;
	chinook_aggregateCustomer(variables: {
		where: Ichinook_CustomerWhereInput | undefined;
		orderBy: Ichinook_CustomerOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_CustomerWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): Ichinook_AggregateCustomer;
	chinook_groupByCustomer(variables: {
		where: Ichinook_CustomerWhereInput | undefined;
		orderBy: Ichinook_CustomerOrderByWithAggregationInput[] | undefined;
		by: chinook_CustomerScalarFieldEnum[];
		having: Ichinook_CustomerScalarWhereWithAggregatesInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): ReadonlyArray<Ichinook_CustomerGroupByOutputType>;
	chinook_findUniqueCustomer(variables: { where: Ichinook_CustomerWhereUniqueInput }): Ichinook_Customer | null;
	chinook_findFirstEmployee(variables: {
		where: Ichinook_EmployeeWhereInput | undefined;
		orderBy: Ichinook_EmployeeOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_EmployeeWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_EmployeeScalarFieldEnum[] | undefined;
	}): Ichinook_Employee | null;
	chinook_findManyEmployee(variables: {
		where: Ichinook_EmployeeWhereInput | undefined;
		orderBy: Ichinook_EmployeeOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_EmployeeWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_EmployeeScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_Employee>;
	chinook_aggregateEmployee(variables: {
		where: Ichinook_EmployeeWhereInput | undefined;
		orderBy: Ichinook_EmployeeOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_EmployeeWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): Ichinook_AggregateEmployee;
	chinook_groupByEmployee(variables: {
		where: Ichinook_EmployeeWhereInput | undefined;
		orderBy: Ichinook_EmployeeOrderByWithAggregationInput[] | undefined;
		by: chinook_EmployeeScalarFieldEnum[];
		having: Ichinook_EmployeeScalarWhereWithAggregatesInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): ReadonlyArray<Ichinook_EmployeeGroupByOutputType>;
	chinook_findUniqueEmployee(variables: { where: Ichinook_EmployeeWhereUniqueInput }): Ichinook_Employee | null;
	chinook_findFirstGenre(variables: {
		where: Ichinook_GenreWhereInput | undefined;
		orderBy: Ichinook_GenreOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_GenreWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_GenreScalarFieldEnum[] | undefined;
	}): Ichinook_Genre | null;
	chinook_findManyGenre(variables: {
		where: Ichinook_GenreWhereInput | undefined;
		orderBy: Ichinook_GenreOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_GenreWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_GenreScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_Genre>;
	chinook_aggregateGenre(variables: {
		where: Ichinook_GenreWhereInput | undefined;
		orderBy: Ichinook_GenreOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_GenreWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): Ichinook_AggregateGenre;
	chinook_groupByGenre(variables: {
		where: Ichinook_GenreWhereInput | undefined;
		orderBy: Ichinook_GenreOrderByWithAggregationInput[] | undefined;
		by: chinook_GenreScalarFieldEnum[];
		having: Ichinook_GenreScalarWhereWithAggregatesInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): ReadonlyArray<Ichinook_GenreGroupByOutputType>;
	chinook_findUniqueGenre(variables: { where: Ichinook_GenreWhereUniqueInput }): Ichinook_Genre | null;
	chinook_findFirstInvoice(variables: {
		where: Ichinook_InvoiceWhereInput | undefined;
		orderBy: Ichinook_InvoiceOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_InvoiceWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_InvoiceScalarFieldEnum[] | undefined;
	}): Ichinook_Invoice | null;
	chinook_findManyInvoice(variables: {
		where: Ichinook_InvoiceWhereInput | undefined;
		orderBy: Ichinook_InvoiceOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_InvoiceWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_InvoiceScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_Invoice>;
	chinook_aggregateInvoice(variables: {
		where: Ichinook_InvoiceWhereInput | undefined;
		orderBy: Ichinook_InvoiceOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_InvoiceWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): Ichinook_AggregateInvoice;
	chinook_groupByInvoice(variables: {
		where: Ichinook_InvoiceWhereInput | undefined;
		orderBy: Ichinook_InvoiceOrderByWithAggregationInput[] | undefined;
		by: chinook_InvoiceScalarFieldEnum[];
		having: Ichinook_InvoiceScalarWhereWithAggregatesInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): ReadonlyArray<Ichinook_InvoiceGroupByOutputType>;
	chinook_findUniqueInvoice(variables: { where: Ichinook_InvoiceWhereUniqueInput }): Ichinook_Invoice | null;
	chinook_findFirstInvoiceLine(variables: {
		where: Ichinook_InvoiceLineWhereInput | undefined;
		orderBy: Ichinook_InvoiceLineOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_InvoiceLineWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_InvoiceLineScalarFieldEnum[] | undefined;
	}): Ichinook_InvoiceLine | null;
	chinook_findManyInvoiceLine(variables: {
		where: Ichinook_InvoiceLineWhereInput | undefined;
		orderBy: Ichinook_InvoiceLineOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_InvoiceLineWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_InvoiceLineScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_InvoiceLine>;
	chinook_aggregateInvoiceLine(variables: {
		where: Ichinook_InvoiceLineWhereInput | undefined;
		orderBy: Ichinook_InvoiceLineOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_InvoiceLineWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): Ichinook_AggregateInvoiceLine;
	chinook_groupByInvoiceLine(variables: {
		where: Ichinook_InvoiceLineWhereInput | undefined;
		orderBy: Ichinook_InvoiceLineOrderByWithAggregationInput[] | undefined;
		by: chinook_InvoiceLineScalarFieldEnum[];
		having: Ichinook_InvoiceLineScalarWhereWithAggregatesInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): ReadonlyArray<Ichinook_InvoiceLineGroupByOutputType>;
	chinook_findUniqueInvoiceLine(variables: {
		where: Ichinook_InvoiceLineWhereUniqueInput;
	}): Ichinook_InvoiceLine | null;
	chinook_findFirstMediaType(variables: {
		where: Ichinook_MediaTypeWhereInput | undefined;
		orderBy: Ichinook_MediaTypeOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_MediaTypeWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_MediaTypeScalarFieldEnum[] | undefined;
	}): Ichinook_MediaType | null;
	chinook_findManyMediaType(variables: {
		where: Ichinook_MediaTypeWhereInput | undefined;
		orderBy: Ichinook_MediaTypeOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_MediaTypeWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_MediaTypeScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_MediaType>;
	chinook_aggregateMediaType(variables: {
		where: Ichinook_MediaTypeWhereInput | undefined;
		orderBy: Ichinook_MediaTypeOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_MediaTypeWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): Ichinook_AggregateMediaType;
	chinook_groupByMediaType(variables: {
		where: Ichinook_MediaTypeWhereInput | undefined;
		orderBy: Ichinook_MediaTypeOrderByWithAggregationInput[] | undefined;
		by: chinook_MediaTypeScalarFieldEnum[];
		having: Ichinook_MediaTypeScalarWhereWithAggregatesInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): ReadonlyArray<Ichinook_MediaTypeGroupByOutputType>;
	chinook_findUniqueMediaType(variables: { where: Ichinook_MediaTypeWhereUniqueInput }): Ichinook_MediaType | null;
	chinook_findFirstPlaylist(variables: {
		where: Ichinook_PlaylistWhereInput | undefined;
		orderBy: Ichinook_PlaylistOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_PlaylistWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_PlaylistScalarFieldEnum[] | undefined;
	}): Ichinook_Playlist | null;
	chinook_findManyPlaylist(variables: {
		where: Ichinook_PlaylistWhereInput | undefined;
		orderBy: Ichinook_PlaylistOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_PlaylistWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_PlaylistScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_Playlist>;
	chinook_aggregatePlaylist(variables: {
		where: Ichinook_PlaylistWhereInput | undefined;
		orderBy: Ichinook_PlaylistOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_PlaylistWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): Ichinook_AggregatePlaylist;
	chinook_groupByPlaylist(variables: {
		where: Ichinook_PlaylistWhereInput | undefined;
		orderBy: Ichinook_PlaylistOrderByWithAggregationInput[] | undefined;
		by: chinook_PlaylistScalarFieldEnum[];
		having: Ichinook_PlaylistScalarWhereWithAggregatesInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): ReadonlyArray<Ichinook_PlaylistGroupByOutputType>;
	chinook_findUniquePlaylist(variables: { where: Ichinook_PlaylistWhereUniqueInput }): Ichinook_Playlist | null;
	chinook_findFirstPlaylistTrack(variables: {
		where: Ichinook_PlaylistTrackWhereInput | undefined;
		orderBy: Ichinook_PlaylistTrackOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_PlaylistTrackWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_PlaylistTrackScalarFieldEnum[] | undefined;
	}): Ichinook_PlaylistTrack | null;
	chinook_findManyPlaylistTrack(variables: {
		where: Ichinook_PlaylistTrackWhereInput | undefined;
		orderBy: Ichinook_PlaylistTrackOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_PlaylistTrackWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_PlaylistTrackScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_PlaylistTrack>;
	chinook_aggregatePlaylistTrack(variables: {
		where: Ichinook_PlaylistTrackWhereInput | undefined;
		orderBy: Ichinook_PlaylistTrackOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_PlaylistTrackWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): Ichinook_AggregatePlaylistTrack;
	chinook_groupByPlaylistTrack(variables: {
		where: Ichinook_PlaylistTrackWhereInput | undefined;
		orderBy: Ichinook_PlaylistTrackOrderByWithAggregationInput[] | undefined;
		by: chinook_PlaylistTrackScalarFieldEnum[];
		having: Ichinook_PlaylistTrackScalarWhereWithAggregatesInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): ReadonlyArray<Ichinook_PlaylistTrackGroupByOutputType>;
	chinook_findUniquePlaylistTrack(variables: {
		where: Ichinook_PlaylistTrackWhereUniqueInput;
	}): Ichinook_PlaylistTrack | null;
	chinook_findFirstTrack(variables: {
		where: Ichinook_TrackWhereInput | undefined;
		orderBy: Ichinook_TrackOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_TrackWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_TrackScalarFieldEnum[] | undefined;
	}): Ichinook_Track | null;
	chinook_findManyTrack(variables: {
		where: Ichinook_TrackWhereInput | undefined;
		orderBy: Ichinook_TrackOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_TrackWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_TrackScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_Track>;
	chinook_aggregateTrack(variables: {
		where: Ichinook_TrackWhereInput | undefined;
		orderBy: Ichinook_TrackOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_TrackWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): Ichinook_AggregateTrack;
	chinook_groupByTrack(variables: {
		where: Ichinook_TrackWhereInput | undefined;
		orderBy: Ichinook_TrackOrderByWithAggregationInput[] | undefined;
		by: chinook_TrackScalarFieldEnum[];
		having: Ichinook_TrackScalarWhereWithAggregatesInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): ReadonlyArray<Ichinook_TrackGroupByOutputType>;
	chinook_findUniqueTrack(variables: { where: Ichinook_TrackWhereUniqueInput }): Ichinook_Track | null;
	db_findFirstPost(variables: {
		where: Idb_PostWhereInput | undefined;
		orderBy: Idb_PostOrderByWithRelationInput[] | undefined;
		cursor: Idb_PostWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: db_PostScalarFieldEnum[] | undefined;
	}): Idb_Post | null;
	db_findManyPost(variables: {
		where: Idb_PostWhereInput | undefined;
		orderBy: Idb_PostOrderByWithRelationInput[] | undefined;
		cursor: Idb_PostWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: db_PostScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Idb_Post>;
	db_aggregatePost(variables: {
		where: Idb_PostWhereInput | undefined;
		orderBy: Idb_PostOrderByWithRelationInput[] | undefined;
		cursor: Idb_PostWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): Idb_AggregatePost;
	db_groupByPost(variables: {
		where: Idb_PostWhereInput | undefined;
		orderBy: Idb_PostOrderByWithAggregationInput[] | undefined;
		by: db_PostScalarFieldEnum[];
		having: Idb_PostScalarWhereWithAggregatesInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): ReadonlyArray<Idb_PostGroupByOutputType>;
	db_findUniquePost(variables: { where: Idb_PostWhereUniqueInput }): Idb_Post | null;
	db_findFirstProfile(variables: {
		where: Idb_ProfileWhereInput | undefined;
		orderBy: Idb_ProfileOrderByWithRelationInput[] | undefined;
		cursor: Idb_ProfileWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: db_ProfileScalarFieldEnum[] | undefined;
	}): Idb_Profile | null;
	db_findManyProfile(variables: {
		where: Idb_ProfileWhereInput | undefined;
		orderBy: Idb_ProfileOrderByWithRelationInput[] | undefined;
		cursor: Idb_ProfileWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: db_ProfileScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Idb_Profile>;
	db_aggregateProfile(variables: {
		where: Idb_ProfileWhereInput | undefined;
		orderBy: Idb_ProfileOrderByWithRelationInput[] | undefined;
		cursor: Idb_ProfileWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): Idb_AggregateProfile;
	db_groupByProfile(variables: {
		where: Idb_ProfileWhereInput | undefined;
		orderBy: Idb_ProfileOrderByWithAggregationInput[] | undefined;
		by: db_ProfileScalarFieldEnum[];
		having: Idb_ProfileScalarWhereWithAggregatesInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): ReadonlyArray<Idb_ProfileGroupByOutputType>;
	db_findUniqueProfile(variables: { where: Idb_ProfileWhereUniqueInput }): Idb_Profile | null;
	db_findFirstUser(variables: {
		where: Idb_UserWhereInput | undefined;
		orderBy: Idb_UserOrderByWithRelationInput[] | undefined;
		cursor: Idb_UserWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: db_UserScalarFieldEnum[] | undefined;
	}): Idb_User | null;
	db_findManyUser(variables: {
		where: Idb_UserWhereInput | undefined;
		orderBy: Idb_UserOrderByWithRelationInput[] | undefined;
		cursor: Idb_UserWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: db_UserScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Idb_User>;
	db_aggregateUser(variables: {
		where: Idb_UserWhereInput | undefined;
		orderBy: Idb_UserOrderByWithRelationInput[] | undefined;
		cursor: Idb_UserWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): Idb_AggregateUser;
	db_groupByUser(variables: {
		where: Idb_UserWhereInput | undefined;
		orderBy: Idb_UserOrderByWithAggregationInput[] | undefined;
		by: db_UserScalarFieldEnum[];
		having: Idb_UserScalarWhereWithAggregatesInput | undefined;
		take: number | undefined;
		skip: number | undefined;
	}): ReadonlyArray<Idb_UserGroupByOutputType>;
	db_findUniqueUser(variables: { where: Idb_UserWhereUniqueInput }): Idb_User | null;
	readonly jsp2_getPosts: ReadonlyArray<Ijsp2_Post> | null;
	readonly jsp2_getUsers: ReadonlyArray<Ijsp2_User> | null;
	jsp2_getUser(variables: { id: number }): Ijsp2_User | null;
	jsp2_getPost(variables: { id: number }): Ijsp2_Post | null;
	ibm_jsp_post(variables: { id: string }): Iibm_jsp_Post | null;
	readonly ibm_jsp_postsList: ReadonlyArray<Iibm_jsp_Post> | null;
	ibm_jsp_user(variables: { id: string }): Iibm_jsp_User | null;
	readonly ibm_jsp_userList: ReadonlyArray<Iibm_jsp_User> | null;
	readonly sdl_sdlField: string;
	public_gqlUnion(variables: { which: public_Which }): Ipublic_GqlUnion | null;
}

export interface Ijsp_Post {
	readonly __typename: 'jsp_Post';
	readonly id: number;
	readonly userId: number;
	readonly title: string;
	readonly _join: IQuery;
}

export interface Ijsp_User {
	readonly __typename: 'jsp_User';
	readonly id: number | null;
	readonly name: string | null;
	readonly username: string | null;
	readonly email: string | null;
	readonly _join: IQuery;
}

export enum weather_CacheControlScope {
	PRIVATE = 'PRIVATE',
	PUBLIC = 'PUBLIC',
}

export interface Iweather_City {
	readonly __typename: 'weather_City';
	readonly coord: Iweather_Coordinates | null;
	readonly country: string | null;
	readonly id: string | null;
	readonly name: string | null;
	readonly weather: Iweather_Weather | null;
	readonly _join: IQuery;
}

export interface Iweather_Clouds {
	readonly __typename: 'weather_Clouds';
	readonly all: number | null;
	readonly humidity: number | null;
	readonly visibility: number | null;
	readonly _join: IQuery;
}

export interface Iweather_ConfigInput {
	lang?: weather_Language;
	units?: weather_Unit;
}

export interface Iweather_Coordinates {
	readonly __typename: 'weather_Coordinates';
	readonly lat: number | null;
	readonly lon: number | null;
	readonly _join: IQuery;
}

export enum weather_Language {
	af = 'af',
	al = 'al',
	ar = 'ar',
	az = 'az',
	bg = 'bg',
	ca = 'ca',
	cz = 'cz',
	da = 'da',
	de = 'de',
	el = 'el',
	en = 'en',
	es = 'es',
	eu = 'eu',
	fa = 'fa',
	fi = 'fi',
	fr = 'fr',
	gl = 'gl',
	he = 'he',
	hi = 'hi',
	hr = 'hr',
	hu = 'hu',
	id = 'id',
	it = 'it',
	ja = 'ja',
	kr = 'kr',
	la = 'la',
	lt = 'lt',
	mk = 'mk',
	nl = 'nl',
	no = 'no',
	pl = 'pl',
	pt = 'pt',
	pt_br = 'pt_br',
	ro = 'ro',
	ru = 'ru',
	se = 'se',
	sk = 'sk',
	sl = 'sl',
	sp = 'sp',
	sr = 'sr',
	sv = 'sv',
	th = 'th',
	tr = 'tr',
	ua = 'ua',
	uk = 'uk',
	vi = 'vi',
	zh_cn = 'zh_cn',
	zh_tw = 'zh_tw',
	zu = 'zu',
}

export interface Iweather_Summary {
	readonly __typename: 'weather_Summary';
	readonly description: string | null;
	readonly icon: string | null;
	readonly title: string | null;
	readonly _join: IQuery;
}

export interface Iweather_Temperature {
	readonly __typename: 'weather_Temperature';
	readonly actual: number | null;
	readonly feelsLike: number | null;
	readonly max: number | null;
	readonly min: number | null;
	readonly _join: IQuery;
}

export enum weather_Unit {
	imperial = 'imperial',
	kelvin = 'kelvin',
	metric = 'metric',
}

export interface Iweather_Weather {
	readonly __typename: 'weather_Weather';
	readonly clouds: Iweather_Clouds | null;
	readonly summary: Iweather_Summary | null;
	readonly temperature: Iweather_Temperature | null;
	readonly timestamp: number | null;
	readonly wind: Iweather_Wind | null;
	readonly _join: IQuery;
}

export interface Iweather_Wind {
	readonly __typename: 'weather_Wind';
	readonly deg: number | null;
	readonly speed: number | null;
	readonly _join: IQuery;
}

export interface Icountries_Continent {
	readonly __typename: 'countries_Continent';
	readonly code: string;
	readonly countries: ReadonlyArray<Icountries_Country>;
	readonly name: string;
	readonly _join: IQuery;
}

export interface Icountries_ContinentFilterInput {
	code?: Icountries_StringQueryOperatorInput;
}

export interface Icountries_Country {
	readonly __typename: 'countries_Country';
	readonly capital: string | null;
	readonly code: string;
	readonly continent: Icountries_Continent;
	readonly currency: string | null;
	readonly emoji: string;
	readonly emojiU: string;
	readonly languages: ReadonlyArray<Icountries_Language>;
	readonly name: string;
	readonly native: string;
	readonly phone: string;
	readonly states: ReadonlyArray<Icountries_State>;
	readonly _join: IQuery;
}

export interface Icountries_CountryFilterInput {
	code?: Icountries_StringQueryOperatorInput;
	continent?: Icountries_StringQueryOperatorInput;
	currency?: Icountries_StringQueryOperatorInput;
}

export interface Icountries_Language {
	readonly __typename: 'countries_Language';
	readonly code: string;
	readonly name: string | null;
	readonly native: string | null;
	readonly rtl: boolean;
	readonly _join: IQuery;
}

export interface Icountries_LanguageFilterInput {
	code?: Icountries_StringQueryOperatorInput;
}

export interface Icountries_State {
	readonly __typename: 'countries_State';
	readonly code: string | null;
	readonly country: Icountries_Country;
	readonly name: string;
	readonly _join: IQuery;
}

export interface Icountries_StringQueryOperatorInput {
	eq?: string;
	glob?: string;
	in?: string[];
	ne?: string;
	nin?: string[];
	regex?: string;
}

export interface Ispacex_Address {
	readonly __typename: 'spacex_Address';
	readonly address: string | null;
	readonly city: string | null;
	readonly state: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_Capsule {
	readonly __typename: 'spacex_Capsule';
	readonly dragon: Ispacex_Dragon | null;
	readonly id: string | null;
	readonly landings: number | null;
	readonly missions: ReadonlyArray<Ispacex_CapsuleMission> | null;
	readonly original_launch: string | null;
	readonly reuse_count: number | null;
	readonly status: string | null;
	readonly type: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_CapsuleMission {
	readonly __typename: 'spacex_CapsuleMission';
	readonly flight: number | null;
	readonly name: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_CapsulesFind {
	id?: string;
	landings?: number;
	mission?: string;
	original_launch?: string;
	reuse_count?: number;
	status?: string;
	type?: string;
}

export interface Ispacex_Core {
	readonly __typename: 'spacex_Core';
	readonly asds_attempts: number | null;
	readonly asds_landings: number | null;
	readonly block: number | null;
	readonly id: string | null;
	readonly missions: ReadonlyArray<Ispacex_CapsuleMission> | null;
	readonly original_launch: string | null;
	readonly reuse_count: number | null;
	readonly rtls_attempts: number | null;
	readonly rtls_landings: number | null;
	readonly status: string | null;
	readonly water_landing: boolean | null;
	readonly _join: IQuery;
}

export interface Ispacex_CoreMission {
	readonly __typename: 'spacex_CoreMission';
	readonly flight: number | null;
	readonly name: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_CoresFind {
	asds_attempts?: number;
	asds_landings?: number;
	block?: number;
	id?: string;
	missions?: string;
	original_launch?: string;
	reuse_count?: number;
	rtls_attempts?: number;
	rtls_landings?: number;
	status?: string;
	water_landing?: boolean;
}

export interface Ispacex_Distance {
	readonly __typename: 'spacex_Distance';
	readonly feet: number | null;
	readonly meters: number | null;
	readonly _join: IQuery;
}

export interface Ispacex_Dragon {
	readonly __typename: 'spacex_Dragon';
	readonly active: boolean | null;
	readonly crew_capacity: number | null;
	readonly description: string | null;
	readonly diameter: Ispacex_Distance | null;
	readonly dry_mass_kg: number | null;
	readonly dry_mass_lb: number | null;
	readonly first_flight: string | null;
	readonly heat_shield: Ispacex_DragonHeatShield | null;
	readonly height_w_trunk: Ispacex_Distance | null;
	readonly id: string | null;
	readonly launch_payload_mass: Ispacex_Mass | null;
	readonly launch_payload_vol: Ispacex_Volume | null;
	readonly name: string | null;
	readonly orbit_duration_yr: number | null;
	readonly pressurized_capsule: Ispacex_DragonPressurizedCapsule | null;
	readonly return_payload_mass: Ispacex_Mass | null;
	readonly return_payload_vol: Ispacex_Volume | null;
	readonly sidewall_angle_deg: number | null;
	readonly thrusters: ReadonlyArray<Ispacex_DragonThrust> | null;
	readonly trunk: Ispacex_DragonTrunk | null;
	readonly type: string | null;
	readonly wikipedia: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_DragonHeatShield {
	readonly __typename: 'spacex_DragonHeatShield';
	readonly dev_partner: string | null;
	readonly material: string | null;
	readonly size_meters: number | null;
	readonly temp_degrees: number | null;
	readonly _join: IQuery;
}

export interface Ispacex_DragonPressurizedCapsule {
	readonly __typename: 'spacex_DragonPressurizedCapsule';
	readonly payload_volume: Ispacex_Volume | null;
	readonly _join: IQuery;
}

export interface Ispacex_DragonThrust {
	readonly __typename: 'spacex_DragonThrust';
	readonly amount: number | null;
	readonly fuel_1: string | null;
	readonly fuel_2: string | null;
	readonly pods: number | null;
	readonly thrust: Ispacex_Force | null;
	readonly type: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_DragonTrunk {
	readonly __typename: 'spacex_DragonTrunk';
	readonly cargo: Ispacex_DragonTrunkCargo | null;
	readonly trunk_volume: Ispacex_Volume | null;
	readonly _join: IQuery;
}

export interface Ispacex_DragonTrunkCargo {
	readonly __typename: 'spacex_DragonTrunkCargo';
	readonly solar_array: number | null;
	readonly unpressurized_cargo: boolean | null;
	readonly _join: IQuery;
}

export interface Ispacex_Force {
	readonly __typename: 'spacex_Force';
	readonly kN: number | null;
	readonly lbf: number | null;
	readonly _join: IQuery;
}

export interface Ispacex_HistoriesResult {
	readonly __typename: 'spacex_HistoriesResult';
	readonly data: ReadonlyArray<Ispacex_History> | null;
	readonly result: Ispacex_Result | null;
	readonly _join: IQuery;
}

export interface Ispacex_History {
	readonly __typename: 'spacex_History';
	readonly details: string | null;
	readonly event_date_unix: string | null;
	readonly event_date_utc: string | null;
	readonly flight: Ispacex_Launch | null;
	readonly id: string | null;
	readonly links: Ispacex_Link | null;
	readonly title: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_HistoryFind {
	end?: string;
	flight_number?: number;
	id?: string;
	start?: string;
}

export interface Ispacex_Info {
	readonly __typename: 'spacex_Info';
	readonly ceo: string | null;
	readonly coo: string | null;
	readonly cto: string | null;
	readonly cto_propulsion: string | null;
	readonly employees: number | null;
	readonly founded: number | null;
	readonly founder: string | null;
	readonly headquarters: Ispacex_Address | null;
	readonly launch_sites: number | null;
	readonly links: Ispacex_InfoLinks | null;
	readonly name: string | null;
	readonly summary: string | null;
	readonly test_sites: number | null;
	readonly valuation: number | null;
	readonly vehicles: number | null;
	readonly _join: IQuery;
}

export interface Ispacex_InfoLinks {
	readonly __typename: 'spacex_InfoLinks';
	readonly elon_twitter: string | null;
	readonly flickr: string | null;
	readonly twitter: string | null;
	readonly website: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_Landpad {
	readonly __typename: 'spacex_Landpad';
	readonly attempted_landings: string | null;
	readonly details: string | null;
	readonly full_name: string | null;
	readonly id: string | null;
	readonly landing_type: string | null;
	readonly location: Ispacex_Location | null;
	readonly status: string | null;
	readonly successful_landings: string | null;
	readonly wikipedia: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_Launch {
	readonly __typename: 'spacex_Launch';
	readonly details: string | null;
	readonly id: string | null;
	readonly is_tentative: boolean | null;
	readonly launch_date_local: string | null;
	readonly launch_date_unix: string | null;
	readonly launch_date_utc: string | null;
	readonly launch_site: Ispacex_LaunchSite | null;
	readonly launch_success: boolean | null;
	readonly launch_year: string | null;
	readonly links: Ispacex_LaunchLinks | null;
	readonly mission_id: ReadonlyArray<string> | null;
	readonly mission_name: string | null;
	readonly rocket: Ispacex_LaunchRocket | null;
	readonly ships: ReadonlyArray<Ispacex_Ship> | null;
	readonly static_fire_date_unix: string | null;
	readonly static_fire_date_utc: string | null;
	readonly telemetry: Ispacex_LaunchTelemetry | null;
	readonly tentative_max_precision: string | null;
	readonly upcoming: boolean | null;
	readonly _join: IQuery;
}

export interface Ispacex_LaunchFind {
	apoapsis_km?: number;
	block?: number;
	cap_serial?: string;
	capsule_reuse?: string;
	core_flight?: number;
	core_reuse?: string;
	core_serial?: string;
	customer?: string;
	eccentricity?: number;
	end?: string;
	epoch?: string;
	fairings_recovered?: string;
	fairings_recovery_attempt?: string;
	fairings_reuse?: string;
	fairings_reused?: string;
	fairings_ship?: string;
	gridfins?: string;
	id?: string;
	inclination_deg?: number;
	land_success?: string;
	landing_intent?: string;
	landing_type?: string;
	landing_vehicle?: string;
	launch_date_local?: string;
	launch_date_utc?: string;
	launch_success?: string;
	launch_year?: string;
	legs?: string;
	lifespan_years?: number;
	longitude?: number;
	manufacturer?: string;
	mean_motion?: number;
	mission_id?: string;
	mission_name?: string;
	nationality?: string;
	norad_id?: number;
	orbit?: string;
	payload_id?: string;
	payload_type?: string;
	periapsis_km?: number;
	period_min?: number;
	raan?: number;
	reference_system?: string;
	regime?: string;
	reused?: string;
	rocket_id?: string;
	rocket_name?: string;
	rocket_type?: string;
	second_stage_block?: string;
	semi_major_axis_km?: number;
	ship?: string;
	side_core1_reuse?: string;
	side_core2_reuse?: string;
	site_id?: string;
	site_name?: string;
	site_name_long?: string;
	start?: string;
	tbd?: string;
	tentative?: string;
	tentative_max_precision?: string;
}

export interface Ispacex_LaunchLinks {
	readonly __typename: 'spacex_LaunchLinks';
	readonly article_link: string | null;
	readonly flickr_images: ReadonlyArray<string> | null;
	readonly mission_patch: string | null;
	readonly mission_patch_small: string | null;
	readonly presskit: string | null;
	readonly reddit_campaign: string | null;
	readonly reddit_launch: string | null;
	readonly reddit_media: string | null;
	readonly reddit_recovery: string | null;
	readonly video_link: string | null;
	readonly wikipedia: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_LaunchRocket {
	readonly __typename: 'spacex_LaunchRocket';
	readonly fairings: Ispacex_LaunchRocketFairings | null;
	readonly first_stage: Ispacex_LaunchRocketFirstStage | null;
	readonly rocket: Ispacex_Rocket | null;
	readonly rocket_name: string | null;
	readonly rocket_type: string | null;
	readonly second_stage: Ispacex_LaunchRocketSecondStage | null;
	readonly _join: IQuery;
}

export interface Ispacex_LaunchRocketFairings {
	readonly __typename: 'spacex_LaunchRocketFairings';
	readonly recovered: boolean | null;
	readonly recovery_attempt: boolean | null;
	readonly reused: boolean | null;
	readonly ship: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_LaunchRocketFirstStage {
	readonly __typename: 'spacex_LaunchRocketFirstStage';
	readonly cores: ReadonlyArray<Ispacex_LaunchRocketFirstStageCore> | null;
	readonly _join: IQuery;
}

export interface Ispacex_LaunchRocketFirstStageCore {
	readonly __typename: 'spacex_LaunchRocketFirstStageCore';
	readonly block: number | null;
	readonly core: Ispacex_Core | null;
	readonly flight: number | null;
	readonly gridfins: boolean | null;
	readonly land_success: boolean | null;
	readonly landing_intent: boolean | null;
	readonly landing_type: string | null;
	readonly landing_vehicle: string | null;
	readonly legs: boolean | null;
	readonly reused: boolean | null;
	readonly _join: IQuery;
}

export interface Ispacex_LaunchRocketSecondStage {
	readonly __typename: 'spacex_LaunchRocketSecondStage';
	readonly block: number | null;
	readonly payloads: ReadonlyArray<Ispacex_Payload> | null;
	readonly _join: IQuery;
}

export interface Ispacex_LaunchSite {
	readonly __typename: 'spacex_LaunchSite';
	readonly site_id: string | null;
	readonly site_name: string | null;
	readonly site_name_long: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_LaunchTelemetry {
	readonly __typename: 'spacex_LaunchTelemetry';
	readonly flight_club: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_LaunchesPastResult {
	readonly __typename: 'spacex_LaunchesPastResult';
	readonly data: ReadonlyArray<Ispacex_Launch> | null;
	readonly result: Ispacex_Result | null;
	readonly _join: IQuery;
}

export interface Ispacex_Launchpad {
	readonly __typename: 'spacex_Launchpad';
	readonly attempted_launches: number | null;
	readonly details: string | null;
	readonly id: string | null;
	readonly location: Ispacex_Location | null;
	readonly name: string | null;
	readonly status: string | null;
	readonly successful_launches: number | null;
	readonly vehicles_launched: ReadonlyArray<Ispacex_Rocket> | null;
	readonly wikipedia: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_Link {
	readonly __typename: 'spacex_Link';
	readonly article: string | null;
	readonly reddit: string | null;
	readonly wikipedia: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_Location {
	readonly __typename: 'spacex_Location';
	readonly latitude: number | null;
	readonly longitude: number | null;
	readonly name: string | null;
	readonly region: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_Mass {
	readonly __typename: 'spacex_Mass';
	readonly kg: number | null;
	readonly lb: number | null;
	readonly _join: IQuery;
}

export interface Ispacex_Mission {
	readonly __typename: 'spacex_Mission';
	readonly description: string | null;
	readonly id: string | null;
	readonly manufacturers: ReadonlyArray<string> | null;
	readonly name: string | null;
	readonly payloads: ReadonlyArray<Ispacex_Payload> | null;
	readonly twitter: string | null;
	readonly website: string | null;
	readonly wikipedia: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_MissionResult {
	readonly __typename: 'spacex_MissionResult';
	readonly data: ReadonlyArray<Ispacex_Mission> | null;
	readonly result: Ispacex_Result | null;
	readonly _join: IQuery;
}

export interface Ispacex_MissionsFind {
	id?: string;
	manufacturer?: string;
	name?: string;
	payload_id?: string;
}

export interface Ispacex_Payload {
	readonly __typename: 'spacex_Payload';
	readonly customers: ReadonlyArray<string> | null;
	readonly id: string | null;
	readonly manufacturer: string | null;
	readonly nationality: string | null;
	readonly norad_id: ReadonlyArray<number> | null;
	readonly orbit: string | null;
	readonly orbit_params: Ispacex_PayloadOrbitParams | null;
	readonly payload_mass_kg: number | null;
	readonly payload_mass_lbs: number | null;
	readonly payload_type: string | null;
	readonly reused: boolean | null;
	readonly _join: IQuery;
}

export interface Ispacex_PayloadOrbitParams {
	readonly __typename: 'spacex_PayloadOrbitParams';
	readonly apoapsis_km: number | null;
	readonly arg_of_pericenter: number | null;
	readonly eccentricity: number | null;
	readonly epoch: string | null;
	readonly inclination_deg: number | null;
	readonly lifespan_years: number | null;
	readonly longitude: number | null;
	readonly mean_anomaly: number | null;
	readonly mean_motion: number | null;
	readonly periapsis_km: number | null;
	readonly period_min: number | null;
	readonly raan: number | null;
	readonly reference_system: string | null;
	readonly regime: string | null;
	readonly semi_major_axis_km: number | null;
	readonly _join: IQuery;
}

export interface Ispacex_PayloadsFind {
	apoapsis_km?: number;
	customer?: string;
	eccentricity?: number;
	epoch?: string;
	inclination_deg?: number;
	lifespan_years?: number;
	longitude?: number;
	manufacturer?: string;
	mean_motion?: number;
	nationality?: string;
	norad_id?: number;
	orbit?: string;
	payload_id?: string;
	payload_type?: string;
	periapsis_km?: number;
	period_min?: number;
	raan?: number;
	reference_system?: string;
	regime?: string;
	reused?: boolean;
	semi_major_axis_km?: number;
}

export interface Ispacex_Result {
	readonly __typename: 'spacex_Result';
	readonly totalCount: number | null;
	readonly _join: IQuery;
}

export interface Ispacex_Roadster {
	readonly __typename: 'spacex_Roadster';
	readonly apoapsis_au: number | null;
	readonly details: string | null;
	readonly earth_distance_km: number | null;
	readonly earth_distance_mi: number | null;
	readonly eccentricity: number | null;
	readonly epoch_jd: number | null;
	readonly inclination: number | null;
	readonly launch_date_unix: string | null;
	readonly launch_date_utc: string | null;
	readonly launch_mass_kg: number | null;
	readonly launch_mass_lbs: number | null;
	readonly longitude: number | null;
	readonly mars_distance_km: number | null;
	readonly mars_distance_mi: number | null;
	readonly name: string | null;
	readonly norad_id: number | null;
	readonly orbit_type: number | null;
	readonly periapsis_arg: number | null;
	readonly periapsis_au: number | null;
	readonly period_days: number | null;
	readonly semi_major_axis_au: number | null;
	readonly speed_kph: number | null;
	readonly speed_mph: number | null;
	readonly wikipedia: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_Rocket {
	readonly __typename: 'spacex_Rocket';
	readonly active: boolean | null;
	readonly boosters: number | null;
	readonly company: string | null;
	readonly cost_per_launch: number | null;
	readonly country: string | null;
	readonly description: string | null;
	readonly diameter: Ispacex_Distance | null;
	readonly engines: Ispacex_RocketEngines | null;
	readonly first_flight: string | null;
	readonly first_stage: Ispacex_RocketFirstStage | null;
	readonly height: Ispacex_Distance | null;
	readonly id: string | null;
	readonly landing_legs: Ispacex_RocketLandingLegs | null;
	readonly mass: Ispacex_Mass | null;
	readonly name: string | null;
	readonly payload_weights: ReadonlyArray<Ispacex_RocketPayloadWeight> | null;
	readonly second_stage: Ispacex_RocketSecondStage | null;
	readonly stages: number | null;
	readonly success_rate_pct: number | null;
	readonly type: string | null;
	readonly wikipedia: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_RocketEngines {
	readonly __typename: 'spacex_RocketEngines';
	readonly engine_loss_max: string | null;
	readonly layout: string | null;
	readonly number: number | null;
	readonly propellant_1: string | null;
	readonly propellant_2: string | null;
	readonly thrust_sea_level: Ispacex_Force | null;
	readonly thrust_to_weight: number | null;
	readonly thrust_vacuum: Ispacex_Force | null;
	readonly type: string | null;
	readonly version: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_RocketFirstStage {
	readonly __typename: 'spacex_RocketFirstStage';
	readonly burn_time_sec: number | null;
	readonly engines: number | null;
	readonly fuel_amount_tons: number | null;
	readonly reusable: boolean | null;
	readonly thrust_sea_level: Ispacex_Force | null;
	readonly thrust_vacuum: Ispacex_Force | null;
	readonly _join: IQuery;
}

export interface Ispacex_RocketLandingLegs {
	readonly __typename: 'spacex_RocketLandingLegs';
	readonly material: string | null;
	readonly number: number | null;
	readonly _join: IQuery;
}

export interface Ispacex_RocketPayloadWeight {
	readonly __typename: 'spacex_RocketPayloadWeight';
	readonly id: string | null;
	readonly kg: number | null;
	readonly lb: number | null;
	readonly name: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_RocketSecondStage {
	readonly __typename: 'spacex_RocketSecondStage';
	readonly burn_time_sec: number | null;
	readonly engines: number | null;
	readonly fuel_amount_tons: number | null;
	readonly payloads: Ispacex_RocketSecondStagePayloads | null;
	readonly thrust: Ispacex_Force | null;
	readonly _join: IQuery;
}

export interface Ispacex_RocketSecondStagePayloadCompositeFairing {
	readonly __typename: 'spacex_RocketSecondStagePayloadCompositeFairing';
	readonly diameter: Ispacex_Distance | null;
	readonly height: Ispacex_Distance | null;
	readonly _join: IQuery;
}

export interface Ispacex_RocketSecondStagePayloads {
	readonly __typename: 'spacex_RocketSecondStagePayloads';
	readonly composite_fairing: Ispacex_RocketSecondStagePayloadCompositeFairing | null;
	readonly option_1: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_RocketsResult {
	readonly __typename: 'spacex_RocketsResult';
	readonly data: ReadonlyArray<Ispacex_Rocket> | null;
	readonly result: Ispacex_Result | null;
	readonly _join: IQuery;
}

export interface Ispacex_Ship {
	readonly __typename: 'spacex_Ship';
	readonly abs: number | null;
	readonly active: boolean | null;
	readonly attempted_landings: number | null;
	readonly class: number | null;
	readonly course_deg: number | null;
	readonly home_port: string | null;
	readonly id: string | null;
	readonly image: string | null;
	readonly imo: number | null;
	readonly missions: ReadonlyArray<Ispacex_ShipMission> | null;
	readonly mmsi: number | null;
	readonly model: string | null;
	readonly name: string | null;
	readonly position: Ispacex_ShipLocation | null;
	readonly roles: ReadonlyArray<string> | null;
	readonly speed_kn: number | null;
	readonly status: string | null;
	readonly successful_landings: number | null;
	readonly type: string | null;
	readonly url: string | null;
	readonly weight_kg: number | null;
	readonly weight_lbs: number | null;
	readonly year_built: number | null;
	readonly _join: IQuery;
}

export interface Ispacex_ShipLocation {
	readonly __typename: 'spacex_ShipLocation';
	readonly latitude: number | null;
	readonly longitude: number | null;
	readonly _join: IQuery;
}

export interface Ispacex_ShipMission {
	readonly __typename: 'spacex_ShipMission';
	readonly flight: string | null;
	readonly name: string | null;
	readonly _join: IQuery;
}

export interface Ispacex_ShipsFind {
	abs?: number;
	active?: boolean;
	attempted_landings?: number;
	class?: number;
	course_deg?: number;
	home_port?: string;
	id?: string;
	imo?: number;
	latitude?: number;
	longitude?: number;
	mission?: string;
	mmsi?: number;
	model?: string;
	name?: string;
	role?: string;
	speed_kn?: number;
	status?: string;
	successful_landings?: number;
	type?: string;
	weight_kg?: number;
	weight_lbs?: number;
	year_built?: number;
}

export interface Ispacex_ShipsResult {
	readonly __typename: 'spacex_ShipsResult';
	readonly data: ReadonlyArray<Ispacex_Ship> | null;
	readonly result: Ispacex_Result | null;
	readonly _join: IQuery;
}

export interface Ispacex_Volume {
	readonly __typename: 'spacex_Volume';
	readonly cubic_feet: number | null;
	readonly cubic_meters: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_NestedIntFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Ichinook_NestedIntFilter;
}

export interface Ichinook_IntFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Ichinook_NestedIntFilter;
}

export interface Ichinook_NestedStringFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	not?: Ichinook_NestedStringFilter;
}

export interface Ichinook_StringFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	not?: Ichinook_NestedStringFilter;
}

export interface Ichinook_NestedStringNullableFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	not?: Ichinook_NestedStringNullableFilter;
}

export interface Ichinook_StringNullableFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	not?: Ichinook_NestedStringNullableFilter;
}

export interface Ichinook_AlbumListRelationFilter {
	every?: Ichinook_AlbumWhereInput;
	some?: Ichinook_AlbumWhereInput;
	none?: Ichinook_AlbumWhereInput;
}

export interface Ichinook_ArtistWhereInput {
	AND?: Ichinook_ArtistWhereInput;
	OR?: Ichinook_ArtistWhereInput[];
	NOT?: Ichinook_ArtistWhereInput;
	ArtistId?: Ichinook_IntFilter;
	Name?: Ichinook_StringNullableFilter;
	Album?: Ichinook_AlbumListRelationFilter;
}

export interface Ichinook_ArtistRelationFilter {
	is?: Ichinook_ArtistWhereInput;
	isNot?: Ichinook_ArtistWhereInput;
}

export interface Ichinook_NestedIntNullableFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Ichinook_NestedIntNullableFilter;
}

export interface Ichinook_IntNullableFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Ichinook_NestedIntNullableFilter;
}

export interface Ichinook_NestedDecimalFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Ichinook_NestedDecimalFilter;
}

export interface Ichinook_DecimalFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Ichinook_NestedDecimalFilter;
}

export interface Ichinook_AlbumRelationFilter {
	is?: Ichinook_AlbumWhereInput;
	isNot?: Ichinook_AlbumWhereInput;
}

export interface Ichinook_GenreWhereInput {
	AND?: Ichinook_GenreWhereInput;
	OR?: Ichinook_GenreWhereInput[];
	NOT?: Ichinook_GenreWhereInput;
	GenreId?: Ichinook_IntFilter;
	Name?: Ichinook_StringNullableFilter;
	Track?: Ichinook_TrackListRelationFilter;
}

export interface Ichinook_GenreRelationFilter {
	is?: Ichinook_GenreWhereInput;
	isNot?: Ichinook_GenreWhereInput;
}

export interface Ichinook_MediaTypeWhereInput {
	AND?: Ichinook_MediaTypeWhereInput;
	OR?: Ichinook_MediaTypeWhereInput[];
	NOT?: Ichinook_MediaTypeWhereInput;
	MediaTypeId?: Ichinook_IntFilter;
	Name?: Ichinook_StringNullableFilter;
	Track?: Ichinook_TrackListRelationFilter;
}

export interface Ichinook_MediaTypeRelationFilter {
	is?: Ichinook_MediaTypeWhereInput;
	isNot?: Ichinook_MediaTypeWhereInput;
}

export interface Ichinook_NestedDateTimeFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: Ichinook_NestedDateTimeFilter;
}

export interface Ichinook_DateTimeFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: Ichinook_NestedDateTimeFilter;
}

export interface Ichinook_NestedDateTimeNullableFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: Ichinook_NestedDateTimeNullableFilter;
}

export interface Ichinook_DateTimeNullableFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: Ichinook_NestedDateTimeNullableFilter;
}

export interface Ichinook_CustomerListRelationFilter {
	every?: Ichinook_CustomerWhereInput;
	some?: Ichinook_CustomerWhereInput;
	none?: Ichinook_CustomerWhereInput;
}

export interface Ichinook_EmployeeListRelationFilter {
	every?: Ichinook_EmployeeWhereInput;
	some?: Ichinook_EmployeeWhereInput;
	none?: Ichinook_EmployeeWhereInput;
}

export interface Ichinook_EmployeeWhereInput {
	AND?: Ichinook_EmployeeWhereInput;
	OR?: Ichinook_EmployeeWhereInput[];
	NOT?: Ichinook_EmployeeWhereInput;
	EmployeeId?: Ichinook_IntFilter;
	LastName?: Ichinook_StringFilter;
	FirstName?: Ichinook_StringFilter;
	Title?: Ichinook_StringNullableFilter;
	ReportsTo?: Ichinook_IntNullableFilter;
	BirthDate?: Ichinook_DateTimeNullableFilter;
	HireDate?: Ichinook_DateTimeNullableFilter;
	Address?: Ichinook_StringNullableFilter;
	City?: Ichinook_StringNullableFilter;
	State?: Ichinook_StringNullableFilter;
	Country?: Ichinook_StringNullableFilter;
	PostalCode?: Ichinook_StringNullableFilter;
	Phone?: Ichinook_StringNullableFilter;
	Fax?: Ichinook_StringNullableFilter;
	Email?: Ichinook_StringNullableFilter;
	Employee?: Ichinook_EmployeeRelationFilter;
	Customer?: Ichinook_CustomerListRelationFilter;
	other_Employee?: Ichinook_EmployeeListRelationFilter;
}

export interface Ichinook_EmployeeRelationFilter {
	is?: Ichinook_EmployeeWhereInput;
	isNot?: Ichinook_EmployeeWhereInput;
}

export interface Ichinook_InvoiceListRelationFilter {
	every?: Ichinook_InvoiceWhereInput;
	some?: Ichinook_InvoiceWhereInput;
	none?: Ichinook_InvoiceWhereInput;
}

export interface Ichinook_CustomerWhereInput {
	AND?: Ichinook_CustomerWhereInput;
	OR?: Ichinook_CustomerWhereInput[];
	NOT?: Ichinook_CustomerWhereInput;
	CustomerId?: Ichinook_IntFilter;
	FirstName?: Ichinook_StringFilter;
	LastName?: Ichinook_StringFilter;
	Company?: Ichinook_StringNullableFilter;
	Address?: Ichinook_StringNullableFilter;
	City?: Ichinook_StringNullableFilter;
	State?: Ichinook_StringNullableFilter;
	Country?: Ichinook_StringNullableFilter;
	PostalCode?: Ichinook_StringNullableFilter;
	Phone?: Ichinook_StringNullableFilter;
	Fax?: Ichinook_StringNullableFilter;
	Email?: Ichinook_StringFilter;
	SupportRepId?: Ichinook_IntNullableFilter;
	Employee?: Ichinook_EmployeeRelationFilter;
	Invoice?: Ichinook_InvoiceListRelationFilter;
}

export interface Ichinook_CustomerRelationFilter {
	is?: Ichinook_CustomerWhereInput;
	isNot?: Ichinook_CustomerWhereInput;
}

export interface Ichinook_InvoiceWhereInput {
	AND?: Ichinook_InvoiceWhereInput;
	OR?: Ichinook_InvoiceWhereInput[];
	NOT?: Ichinook_InvoiceWhereInput;
	InvoiceId?: Ichinook_IntFilter;
	CustomerId?: Ichinook_IntFilter;
	InvoiceDate?: Ichinook_DateTimeFilter;
	BillingAddress?: Ichinook_StringNullableFilter;
	BillingCity?: Ichinook_StringNullableFilter;
	BillingState?: Ichinook_StringNullableFilter;
	BillingCountry?: Ichinook_StringNullableFilter;
	BillingPostalCode?: Ichinook_StringNullableFilter;
	Total?: Ichinook_DecimalFilter;
	Customer?: Ichinook_CustomerRelationFilter;
	InvoiceLine?: Ichinook_InvoiceLineListRelationFilter;
}

export interface Ichinook_InvoiceRelationFilter {
	is?: Ichinook_InvoiceWhereInput;
	isNot?: Ichinook_InvoiceWhereInput;
}

export interface Ichinook_TrackRelationFilter {
	is?: Ichinook_TrackWhereInput;
	isNot?: Ichinook_TrackWhereInput;
}

export interface Ichinook_InvoiceLineWhereInput {
	AND?: Ichinook_InvoiceLineWhereInput;
	OR?: Ichinook_InvoiceLineWhereInput[];
	NOT?: Ichinook_InvoiceLineWhereInput;
	InvoiceLineId?: Ichinook_IntFilter;
	InvoiceId?: Ichinook_IntFilter;
	TrackId?: Ichinook_IntFilter;
	UnitPrice?: Ichinook_DecimalFilter;
	Quantity?: Ichinook_IntFilter;
	Invoice?: Ichinook_InvoiceRelationFilter;
	Track?: Ichinook_TrackRelationFilter;
}

export interface Ichinook_InvoiceLineListRelationFilter {
	every?: Ichinook_InvoiceLineWhereInput;
	some?: Ichinook_InvoiceLineWhereInput;
	none?: Ichinook_InvoiceLineWhereInput;
}

export interface Ichinook_PlaylistWhereInput {
	AND?: Ichinook_PlaylistWhereInput;
	OR?: Ichinook_PlaylistWhereInput[];
	NOT?: Ichinook_PlaylistWhereInput;
	PlaylistId?: Ichinook_IntFilter;
	Name?: Ichinook_StringNullableFilter;
	PlaylistTrack?: Ichinook_PlaylistTrackListRelationFilter;
}

export interface Ichinook_PlaylistRelationFilter {
	is?: Ichinook_PlaylistWhereInput;
	isNot?: Ichinook_PlaylistWhereInput;
}

export interface Ichinook_PlaylistTrackWhereInput {
	AND?: Ichinook_PlaylistTrackWhereInput;
	OR?: Ichinook_PlaylistTrackWhereInput[];
	NOT?: Ichinook_PlaylistTrackWhereInput;
	PlaylistId?: Ichinook_IntFilter;
	TrackId?: Ichinook_IntFilter;
	Playlist?: Ichinook_PlaylistRelationFilter;
	Track?: Ichinook_TrackRelationFilter;
}

export interface Ichinook_PlaylistTrackListRelationFilter {
	every?: Ichinook_PlaylistTrackWhereInput;
	some?: Ichinook_PlaylistTrackWhereInput;
	none?: Ichinook_PlaylistTrackWhereInput;
}

export interface Ichinook_TrackWhereInput {
	AND?: Ichinook_TrackWhereInput;
	OR?: Ichinook_TrackWhereInput[];
	NOT?: Ichinook_TrackWhereInput;
	TrackId?: Ichinook_IntFilter;
	Name?: Ichinook_StringFilter;
	AlbumId?: Ichinook_IntNullableFilter;
	MediaTypeId?: Ichinook_IntFilter;
	GenreId?: Ichinook_IntNullableFilter;
	Composer?: Ichinook_StringNullableFilter;
	Milliseconds?: Ichinook_IntFilter;
	String?: Ichinook_IntNullableFilter;
	UnitPrice?: Ichinook_DecimalFilter;
	Album?: Ichinook_AlbumRelationFilter;
	Genre?: Ichinook_GenreRelationFilter;
	MediaType?: Ichinook_MediaTypeRelationFilter;
	InvoiceLine?: Ichinook_InvoiceLineListRelationFilter;
	PlaylistTrack?: Ichinook_PlaylistTrackListRelationFilter;
}

export interface Ichinook_TrackListRelationFilter {
	every?: Ichinook_TrackWhereInput;
	some?: Ichinook_TrackWhereInput;
	none?: Ichinook_TrackWhereInput;
}

export interface Ichinook_AlbumWhereInput {
	AND?: Ichinook_AlbumWhereInput;
	OR?: Ichinook_AlbumWhereInput[];
	NOT?: Ichinook_AlbumWhereInput;
	AlbumId?: Ichinook_IntFilter;
	Title?: Ichinook_StringFilter;
	ArtistId?: Ichinook_IntFilter;
	Artist?: Ichinook_ArtistRelationFilter;
	Track?: Ichinook_TrackListRelationFilter;
}

export enum chinook_SortOrder {
	asc = 'asc',
	desc = 'desc',
}

export interface Ichinook_AlbumOrderByRelationAggregateInput {
	_count?: chinook_SortOrder;
}

export interface Ichinook_ArtistOrderByWithRelationInput {
	ArtistId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
	Album?: Ichinook_AlbumOrderByRelationAggregateInput;
}

export interface Ichinook_TrackOrderByRelationAggregateInput {
	_count?: chinook_SortOrder;
}

export interface Ichinook_AlbumOrderByWithRelationInput {
	AlbumId?: chinook_SortOrder;
	Title?: chinook_SortOrder;
	ArtistId?: chinook_SortOrder;
	Artist?: Ichinook_ArtistOrderByWithRelationInput;
	Track?: Ichinook_TrackOrderByRelationAggregateInput;
}

export interface Ichinook_AlbumWhereUniqueInput {
	AlbumId?: number;
}

export enum chinook_AlbumScalarFieldEnum {
	AlbumId = 'AlbumId',
	Title = 'Title',
	ArtistId = 'ArtistId',
}

export interface Ichinook_ArtistCountOutputType {
	readonly __typename: 'chinook_ArtistCountOutputType';
	readonly Album: number;
	readonly _join: IQuery;
}

export interface Ichinook_Artist {
	readonly __typename: 'chinook_Artist';
	readonly ArtistId: number;
	readonly Name: string | null;
	Album(variables: {
		where: Ichinook_AlbumWhereInput | undefined;
		orderBy: Ichinook_AlbumOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_AlbumWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_AlbumScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_Album> | null;
	readonly _count: Ichinook_ArtistCountOutputType;
	readonly _join: IQuery;
}

export interface Ichinook_GenreOrderByWithRelationInput {
	GenreId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
	Track?: Ichinook_TrackOrderByRelationAggregateInput;
}

export interface Ichinook_MediaTypeOrderByWithRelationInput {
	MediaTypeId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
	Track?: Ichinook_TrackOrderByRelationAggregateInput;
}

export interface Ichinook_InvoiceLineOrderByRelationAggregateInput {
	_count?: chinook_SortOrder;
}

export interface Ichinook_PlaylistTrackOrderByRelationAggregateInput {
	_count?: chinook_SortOrder;
}

export interface Ichinook_TrackOrderByWithRelationInput {
	TrackId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
	AlbumId?: chinook_SortOrder;
	MediaTypeId?: chinook_SortOrder;
	GenreId?: chinook_SortOrder;
	Composer?: chinook_SortOrder;
	Milliseconds?: chinook_SortOrder;
	String?: chinook_SortOrder;
	UnitPrice?: chinook_SortOrder;
	Album?: Ichinook_AlbumOrderByWithRelationInput;
	Genre?: Ichinook_GenreOrderByWithRelationInput;
	MediaType?: Ichinook_MediaTypeOrderByWithRelationInput;
	InvoiceLine?: Ichinook_InvoiceLineOrderByRelationAggregateInput;
	PlaylistTrack?: Ichinook_PlaylistTrackOrderByRelationAggregateInput;
}

export interface Ichinook_TrackWhereUniqueInput {
	TrackId?: number;
}

export enum chinook_TrackScalarFieldEnum {
	TrackId = 'TrackId',
	Name = 'Name',
	AlbumId = 'AlbumId',
	MediaTypeId = 'MediaTypeId',
	GenreId = 'GenreId',
	Composer = 'Composer',
	Milliseconds = 'Milliseconds',
	String = 'String',
	UnitPrice = 'UnitPrice',
}

export interface Ichinook_GenreCountOutputType {
	readonly __typename: 'chinook_GenreCountOutputType';
	readonly Track: number;
	readonly _join: IQuery;
}

export interface Ichinook_Genre {
	readonly __typename: 'chinook_Genre';
	readonly GenreId: number;
	readonly Name: string | null;
	Track(variables: {
		where: Ichinook_TrackWhereInput | undefined;
		orderBy: Ichinook_TrackOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_TrackWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_TrackScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_Track> | null;
	readonly _count: Ichinook_GenreCountOutputType;
	readonly _join: IQuery;
}

export interface Ichinook_MediaTypeCountOutputType {
	readonly __typename: 'chinook_MediaTypeCountOutputType';
	readonly Track: number;
	readonly _join: IQuery;
}

export interface Ichinook_MediaType {
	readonly __typename: 'chinook_MediaType';
	readonly MediaTypeId: number;
	readonly Name: string | null;
	Track(variables: {
		where: Ichinook_TrackWhereInput | undefined;
		orderBy: Ichinook_TrackOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_TrackWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_TrackScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_Track> | null;
	readonly _count: Ichinook_MediaTypeCountOutputType;
	readonly _join: IQuery;
}

export interface Ichinook_CustomerOrderByRelationAggregateInput {
	_count?: chinook_SortOrder;
}

export interface Ichinook_EmployeeOrderByRelationAggregateInput {
	_count?: chinook_SortOrder;
}

export interface Ichinook_EmployeeOrderByWithRelationInput {
	EmployeeId?: chinook_SortOrder;
	LastName?: chinook_SortOrder;
	FirstName?: chinook_SortOrder;
	Title?: chinook_SortOrder;
	ReportsTo?: chinook_SortOrder;
	BirthDate?: chinook_SortOrder;
	HireDate?: chinook_SortOrder;
	Address?: chinook_SortOrder;
	City?: chinook_SortOrder;
	State?: chinook_SortOrder;
	Country?: chinook_SortOrder;
	PostalCode?: chinook_SortOrder;
	Phone?: chinook_SortOrder;
	Fax?: chinook_SortOrder;
	Email?: chinook_SortOrder;
	Employee?: Ichinook_EmployeeOrderByWithRelationInput;
	Customer?: Ichinook_CustomerOrderByRelationAggregateInput;
	other_Employee?: Ichinook_EmployeeOrderByRelationAggregateInput;
}

export interface Ichinook_InvoiceOrderByRelationAggregateInput {
	_count?: chinook_SortOrder;
}

export interface Ichinook_CustomerOrderByWithRelationInput {
	CustomerId?: chinook_SortOrder;
	FirstName?: chinook_SortOrder;
	LastName?: chinook_SortOrder;
	Company?: chinook_SortOrder;
	Address?: chinook_SortOrder;
	City?: chinook_SortOrder;
	State?: chinook_SortOrder;
	Country?: chinook_SortOrder;
	PostalCode?: chinook_SortOrder;
	Phone?: chinook_SortOrder;
	Fax?: chinook_SortOrder;
	Email?: chinook_SortOrder;
	SupportRepId?: chinook_SortOrder;
	Employee?: Ichinook_EmployeeOrderByWithRelationInput;
	Invoice?: Ichinook_InvoiceOrderByRelationAggregateInput;
}

export interface Ichinook_InvoiceOrderByWithRelationInput {
	InvoiceId?: chinook_SortOrder;
	CustomerId?: chinook_SortOrder;
	InvoiceDate?: chinook_SortOrder;
	BillingAddress?: chinook_SortOrder;
	BillingCity?: chinook_SortOrder;
	BillingState?: chinook_SortOrder;
	BillingCountry?: chinook_SortOrder;
	BillingPostalCode?: chinook_SortOrder;
	Total?: chinook_SortOrder;
	Customer?: Ichinook_CustomerOrderByWithRelationInput;
	InvoiceLine?: Ichinook_InvoiceLineOrderByRelationAggregateInput;
}

export interface Ichinook_InvoiceLineOrderByWithRelationInput {
	InvoiceLineId?: chinook_SortOrder;
	InvoiceId?: chinook_SortOrder;
	TrackId?: chinook_SortOrder;
	UnitPrice?: chinook_SortOrder;
	Quantity?: chinook_SortOrder;
	Invoice?: Ichinook_InvoiceOrderByWithRelationInput;
	Track?: Ichinook_TrackOrderByWithRelationInput;
}

export interface Ichinook_InvoiceLineWhereUniqueInput {
	InvoiceLineId?: number;
}

export enum chinook_InvoiceLineScalarFieldEnum {
	InvoiceLineId = 'InvoiceLineId',
	InvoiceId = 'InvoiceId',
	TrackId = 'TrackId',
	UnitPrice = 'UnitPrice',
	Quantity = 'Quantity',
}

export interface Ichinook_CustomerWhereUniqueInput {
	CustomerId?: number;
}

export enum chinook_CustomerScalarFieldEnum {
	CustomerId = 'CustomerId',
	FirstName = 'FirstName',
	LastName = 'LastName',
	Company = 'Company',
	Address = 'Address',
	City = 'City',
	State = 'State',
	Country = 'Country',
	PostalCode = 'PostalCode',
	Phone = 'Phone',
	Fax = 'Fax',
	Email = 'Email',
	SupportRepId = 'SupportRepId',
}

export interface Ichinook_EmployeeWhereUniqueInput {
	EmployeeId?: number;
}

export enum chinook_EmployeeScalarFieldEnum {
	EmployeeId = 'EmployeeId',
	LastName = 'LastName',
	FirstName = 'FirstName',
	Title = 'Title',
	ReportsTo = 'ReportsTo',
	BirthDate = 'BirthDate',
	HireDate = 'HireDate',
	Address = 'Address',
	City = 'City',
	State = 'State',
	Country = 'Country',
	PostalCode = 'PostalCode',
	Phone = 'Phone',
	Fax = 'Fax',
	Email = 'Email',
}

export interface Ichinook_EmployeeCountOutputType {
	readonly __typename: 'chinook_EmployeeCountOutputType';
	readonly Customer: number;
	readonly other_Employee: number;
	readonly _join: IQuery;
}

export interface Ichinook_Employee {
	readonly __typename: 'chinook_Employee';
	readonly EmployeeId: number;
	readonly LastName: string;
	readonly FirstName: string;
	readonly Title: string | null;
	readonly ReportsTo: number | null;
	readonly BirthDate: string | null;
	readonly HireDate: string | null;
	readonly Address: string | null;
	readonly City: string | null;
	readonly State: string | null;
	readonly Country: string | null;
	readonly PostalCode: string | null;
	readonly Phone: string | null;
	readonly Fax: string | null;
	readonly Email: string | null;
	readonly Employee: Ichinook_Employee | null;
	Customer(variables: {
		where: Ichinook_CustomerWhereInput | undefined;
		orderBy: Ichinook_CustomerOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_CustomerWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_CustomerScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_Customer> | null;
	other_Employee(variables: {
		where: Ichinook_EmployeeWhereInput | undefined;
		orderBy: Ichinook_EmployeeOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_EmployeeWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_EmployeeScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_Employee> | null;
	readonly _count: Ichinook_EmployeeCountOutputType;
	readonly _join: IQuery;
}

export interface Ichinook_InvoiceWhereUniqueInput {
	InvoiceId?: number;
}

export enum chinook_InvoiceScalarFieldEnum {
	InvoiceId = 'InvoiceId',
	CustomerId = 'CustomerId',
	InvoiceDate = 'InvoiceDate',
	BillingAddress = 'BillingAddress',
	BillingCity = 'BillingCity',
	BillingState = 'BillingState',
	BillingCountry = 'BillingCountry',
	BillingPostalCode = 'BillingPostalCode',
	Total = 'Total',
}

export interface Ichinook_CustomerCountOutputType {
	readonly __typename: 'chinook_CustomerCountOutputType';
	readonly Invoice: number;
	readonly _join: IQuery;
}

export interface Ichinook_Customer {
	readonly __typename: 'chinook_Customer';
	readonly CustomerId: number;
	readonly FirstName: string;
	readonly LastName: string;
	readonly Company: string | null;
	readonly Address: string | null;
	readonly City: string | null;
	readonly State: string | null;
	readonly Country: string | null;
	readonly PostalCode: string | null;
	readonly Phone: string | null;
	readonly Fax: string | null;
	readonly Email: string;
	readonly SupportRepId: number | null;
	readonly Employee: Ichinook_Employee | null;
	Invoice(variables: {
		where: Ichinook_InvoiceWhereInput | undefined;
		orderBy: Ichinook_InvoiceOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_InvoiceWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_InvoiceScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_Invoice> | null;
	readonly _count: Ichinook_CustomerCountOutputType;
	readonly _join: IQuery;
}

export interface Ichinook_InvoiceCountOutputType {
	readonly __typename: 'chinook_InvoiceCountOutputType';
	readonly InvoiceLine: number;
	readonly _join: IQuery;
}

export interface Ichinook_Invoice {
	readonly __typename: 'chinook_Invoice';
	readonly InvoiceId: number;
	readonly CustomerId: number;
	readonly InvoiceDate: string;
	readonly BillingAddress: string | null;
	readonly BillingCity: string | null;
	readonly BillingState: string | null;
	readonly BillingCountry: string | null;
	readonly BillingPostalCode: string | null;
	readonly Total: number;
	readonly Customer: Ichinook_Customer;
	InvoiceLine(variables: {
		where: Ichinook_InvoiceLineWhereInput | undefined;
		orderBy: Ichinook_InvoiceLineOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_InvoiceLineWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_InvoiceLineScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_InvoiceLine> | null;
	readonly _count: Ichinook_InvoiceCountOutputType;
	readonly _join: IQuery;
}

export interface Ichinook_InvoiceLine {
	readonly __typename: 'chinook_InvoiceLine';
	readonly InvoiceLineId: number;
	readonly InvoiceId: number;
	readonly TrackId: number;
	readonly UnitPrice: number;
	readonly Quantity: number;
	readonly Invoice: Ichinook_Invoice;
	readonly Track: Ichinook_Track;
	readonly _join: IQuery;
}

export interface Ichinook_PlaylistOrderByWithRelationInput {
	PlaylistId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
	PlaylistTrack?: Ichinook_PlaylistTrackOrderByRelationAggregateInput;
}

export interface Ichinook_PlaylistTrackOrderByWithRelationInput {
	PlaylistId?: chinook_SortOrder;
	TrackId?: chinook_SortOrder;
	Playlist?: Ichinook_PlaylistOrderByWithRelationInput;
	Track?: Ichinook_TrackOrderByWithRelationInput;
}

export interface Ichinook_PlaylistTrackPlaylistIdTrackIdCompoundUniqueInput {
	PlaylistId: number;
	TrackId: number;
}

export interface Ichinook_PlaylistTrackWhereUniqueInput {
	PlaylistId_TrackId?: Ichinook_PlaylistTrackPlaylistIdTrackIdCompoundUniqueInput;
}

export enum chinook_PlaylistTrackScalarFieldEnum {
	PlaylistId = 'PlaylistId',
	TrackId = 'TrackId',
}

export interface Ichinook_PlaylistCountOutputType {
	readonly __typename: 'chinook_PlaylistCountOutputType';
	readonly PlaylistTrack: number;
	readonly _join: IQuery;
}

export interface Ichinook_Playlist {
	readonly __typename: 'chinook_Playlist';
	readonly PlaylistId: number;
	readonly Name: string | null;
	PlaylistTrack(variables: {
		where: Ichinook_PlaylistTrackWhereInput | undefined;
		orderBy: Ichinook_PlaylistTrackOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_PlaylistTrackWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_PlaylistTrackScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_PlaylistTrack> | null;
	readonly _count: Ichinook_PlaylistCountOutputType;
	readonly _join: IQuery;
}

export interface Ichinook_PlaylistTrack {
	readonly __typename: 'chinook_PlaylistTrack';
	readonly PlaylistId: number;
	readonly TrackId: number;
	readonly Playlist: Ichinook_Playlist;
	readonly Track: Ichinook_Track;
	readonly _join: IQuery;
}

export interface Ichinook_TrackCountOutputType {
	readonly __typename: 'chinook_TrackCountOutputType';
	readonly InvoiceLine: number;
	readonly PlaylistTrack: number;
	readonly _join: IQuery;
}

export interface Ichinook_Track {
	readonly __typename: 'chinook_Track';
	readonly TrackId: number;
	readonly Name: string;
	readonly AlbumId: number | null;
	readonly MediaTypeId: number;
	readonly GenreId: number | null;
	readonly Composer: string | null;
	readonly Milliseconds: number;
	readonly String: number | null;
	readonly UnitPrice: number;
	readonly Album: Ichinook_Album | null;
	readonly Genre: Ichinook_Genre | null;
	readonly MediaType: Ichinook_MediaType;
	InvoiceLine(variables: {
		where: Ichinook_InvoiceLineWhereInput | undefined;
		orderBy: Ichinook_InvoiceLineOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_InvoiceLineWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_InvoiceLineScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_InvoiceLine> | null;
	PlaylistTrack(variables: {
		where: Ichinook_PlaylistTrackWhereInput | undefined;
		orderBy: Ichinook_PlaylistTrackOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_PlaylistTrackWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_PlaylistTrackScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_PlaylistTrack> | null;
	readonly _count: Ichinook_TrackCountOutputType;
	readonly _join: IQuery;
}

export interface Ichinook_AlbumCountOutputType {
	readonly __typename: 'chinook_AlbumCountOutputType';
	readonly Track: number;
	readonly _join: IQuery;
}

export interface Ichinook_Album {
	readonly __typename: 'chinook_Album';
	readonly AlbumId: number;
	readonly Title: string;
	readonly ArtistId: number;
	readonly Artist: Ichinook_Artist;
	Track(variables: {
		where: Ichinook_TrackWhereInput | undefined;
		orderBy: Ichinook_TrackOrderByWithRelationInput[] | undefined;
		cursor: Ichinook_TrackWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: chinook_TrackScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Ichinook_Track> | null;
	readonly _count: Ichinook_AlbumCountOutputType;
	readonly _join: IQuery;
}

export interface Ichinook_AlbumCountAggregateOutputType {
	readonly __typename: 'chinook_AlbumCountAggregateOutputType';
	readonly AlbumId: number;
	readonly Title: number;
	readonly ArtistId: number;
	readonly _all: number;
	readonly _join: IQuery;
}

export interface Ichinook_AlbumAvgAggregateOutputType {
	readonly __typename: 'chinook_AlbumAvgAggregateOutputType';
	readonly AlbumId: number | null;
	readonly ArtistId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_AlbumSumAggregateOutputType {
	readonly __typename: 'chinook_AlbumSumAggregateOutputType';
	readonly AlbumId: number | null;
	readonly ArtistId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_AlbumMinAggregateOutputType {
	readonly __typename: 'chinook_AlbumMinAggregateOutputType';
	readonly AlbumId: number | null;
	readonly Title: string | null;
	readonly ArtistId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_AlbumMaxAggregateOutputType {
	readonly __typename: 'chinook_AlbumMaxAggregateOutputType';
	readonly AlbumId: number | null;
	readonly Title: string | null;
	readonly ArtistId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_AggregateAlbum {
	readonly __typename: 'chinook_AggregateAlbum';
	readonly _count: Ichinook_AlbumCountAggregateOutputType | null;
	readonly _avg: Ichinook_AlbumAvgAggregateOutputType | null;
	readonly _sum: Ichinook_AlbumSumAggregateOutputType | null;
	readonly _min: Ichinook_AlbumMinAggregateOutputType | null;
	readonly _max: Ichinook_AlbumMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_AlbumCountOrderByAggregateInput {
	AlbumId?: chinook_SortOrder;
	Title?: chinook_SortOrder;
	ArtistId?: chinook_SortOrder;
}

export interface Ichinook_AlbumAvgOrderByAggregateInput {
	AlbumId?: chinook_SortOrder;
	ArtistId?: chinook_SortOrder;
}

export interface Ichinook_AlbumMaxOrderByAggregateInput {
	AlbumId?: chinook_SortOrder;
	Title?: chinook_SortOrder;
	ArtistId?: chinook_SortOrder;
}

export interface Ichinook_AlbumMinOrderByAggregateInput {
	AlbumId?: chinook_SortOrder;
	Title?: chinook_SortOrder;
	ArtistId?: chinook_SortOrder;
}

export interface Ichinook_AlbumSumOrderByAggregateInput {
	AlbumId?: chinook_SortOrder;
	ArtistId?: chinook_SortOrder;
}

export interface Ichinook_AlbumOrderByWithAggregationInput {
	AlbumId?: chinook_SortOrder;
	Title?: chinook_SortOrder;
	ArtistId?: chinook_SortOrder;
	_count?: Ichinook_AlbumCountOrderByAggregateInput;
	_avg?: Ichinook_AlbumAvgOrderByAggregateInput;
	_max?: Ichinook_AlbumMaxOrderByAggregateInput;
	_min?: Ichinook_AlbumMinOrderByAggregateInput;
	_sum?: Ichinook_AlbumSumOrderByAggregateInput;
}

export interface Ichinook_NestedFloatFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Ichinook_NestedFloatFilter;
}

export interface Ichinook_NestedIntWithAggregatesFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Ichinook_NestedIntWithAggregatesFilter;
	_count?: Ichinook_NestedIntFilter;
	_avg?: Ichinook_NestedFloatFilter;
	_sum?: Ichinook_NestedIntFilter;
	_min?: Ichinook_NestedIntFilter;
	_max?: Ichinook_NestedIntFilter;
}

export interface Ichinook_IntWithAggregatesFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Ichinook_NestedIntWithAggregatesFilter;
	_count?: Ichinook_NestedIntFilter;
	_avg?: Ichinook_NestedFloatFilter;
	_sum?: Ichinook_NestedIntFilter;
	_min?: Ichinook_NestedIntFilter;
	_max?: Ichinook_NestedIntFilter;
}

export interface Ichinook_NestedStringWithAggregatesFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	not?: Ichinook_NestedStringWithAggregatesFilter;
	_count?: Ichinook_NestedIntFilter;
	_min?: Ichinook_NestedStringFilter;
	_max?: Ichinook_NestedStringFilter;
}

export interface Ichinook_StringWithAggregatesFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	not?: Ichinook_NestedStringWithAggregatesFilter;
	_count?: Ichinook_NestedIntFilter;
	_min?: Ichinook_NestedStringFilter;
	_max?: Ichinook_NestedStringFilter;
}

export interface Ichinook_AlbumScalarWhereWithAggregatesInput {
	AND?: Ichinook_AlbumScalarWhereWithAggregatesInput;
	OR?: Ichinook_AlbumScalarWhereWithAggregatesInput[];
	NOT?: Ichinook_AlbumScalarWhereWithAggregatesInput;
	AlbumId?: Ichinook_IntWithAggregatesFilter;
	Title?: Ichinook_StringWithAggregatesFilter;
	ArtistId?: Ichinook_IntWithAggregatesFilter;
}

export interface Ichinook_AlbumGroupByOutputType {
	readonly __typename: 'chinook_AlbumGroupByOutputType';
	readonly AlbumId: number;
	readonly Title: string;
	readonly ArtistId: number;
	readonly _count: Ichinook_AlbumCountAggregateOutputType | null;
	readonly _avg: Ichinook_AlbumAvgAggregateOutputType | null;
	readonly _sum: Ichinook_AlbumSumAggregateOutputType | null;
	readonly _min: Ichinook_AlbumMinAggregateOutputType | null;
	readonly _max: Ichinook_AlbumMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_ArtistWhereUniqueInput {
	ArtistId?: number;
}

export enum chinook_ArtistScalarFieldEnum {
	ArtistId = 'ArtistId',
	Name = 'Name',
}

export interface Ichinook_ArtistCountAggregateOutputType {
	readonly __typename: 'chinook_ArtistCountAggregateOutputType';
	readonly ArtistId: number;
	readonly Name: number;
	readonly _all: number;
	readonly _join: IQuery;
}

export interface Ichinook_ArtistAvgAggregateOutputType {
	readonly __typename: 'chinook_ArtistAvgAggregateOutputType';
	readonly ArtistId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_ArtistSumAggregateOutputType {
	readonly __typename: 'chinook_ArtistSumAggregateOutputType';
	readonly ArtistId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_ArtistMinAggregateOutputType {
	readonly __typename: 'chinook_ArtistMinAggregateOutputType';
	readonly ArtistId: number | null;
	readonly Name: string | null;
	readonly _join: IQuery;
}

export interface Ichinook_ArtistMaxAggregateOutputType {
	readonly __typename: 'chinook_ArtistMaxAggregateOutputType';
	readonly ArtistId: number | null;
	readonly Name: string | null;
	readonly _join: IQuery;
}

export interface Ichinook_AggregateArtist {
	readonly __typename: 'chinook_AggregateArtist';
	readonly _count: Ichinook_ArtistCountAggregateOutputType | null;
	readonly _avg: Ichinook_ArtistAvgAggregateOutputType | null;
	readonly _sum: Ichinook_ArtistSumAggregateOutputType | null;
	readonly _min: Ichinook_ArtistMinAggregateOutputType | null;
	readonly _max: Ichinook_ArtistMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_ArtistCountOrderByAggregateInput {
	ArtistId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
}

export interface Ichinook_ArtistAvgOrderByAggregateInput {
	ArtistId?: chinook_SortOrder;
}

export interface Ichinook_ArtistMaxOrderByAggregateInput {
	ArtistId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
}

export interface Ichinook_ArtistMinOrderByAggregateInput {
	ArtistId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
}

export interface Ichinook_ArtistSumOrderByAggregateInput {
	ArtistId?: chinook_SortOrder;
}

export interface Ichinook_ArtistOrderByWithAggregationInput {
	ArtistId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
	_count?: Ichinook_ArtistCountOrderByAggregateInput;
	_avg?: Ichinook_ArtistAvgOrderByAggregateInput;
	_max?: Ichinook_ArtistMaxOrderByAggregateInput;
	_min?: Ichinook_ArtistMinOrderByAggregateInput;
	_sum?: Ichinook_ArtistSumOrderByAggregateInput;
}

export interface Ichinook_NestedStringNullableWithAggregatesFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	not?: Ichinook_NestedStringNullableWithAggregatesFilter;
	_count?: Ichinook_NestedIntNullableFilter;
	_min?: Ichinook_NestedStringNullableFilter;
	_max?: Ichinook_NestedStringNullableFilter;
}

export interface Ichinook_StringNullableWithAggregatesFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	not?: Ichinook_NestedStringNullableWithAggregatesFilter;
	_count?: Ichinook_NestedIntNullableFilter;
	_min?: Ichinook_NestedStringNullableFilter;
	_max?: Ichinook_NestedStringNullableFilter;
}

export interface Ichinook_ArtistScalarWhereWithAggregatesInput {
	AND?: Ichinook_ArtistScalarWhereWithAggregatesInput;
	OR?: Ichinook_ArtistScalarWhereWithAggregatesInput[];
	NOT?: Ichinook_ArtistScalarWhereWithAggregatesInput;
	ArtistId?: Ichinook_IntWithAggregatesFilter;
	Name?: Ichinook_StringNullableWithAggregatesFilter;
}

export interface Ichinook_ArtistGroupByOutputType {
	readonly __typename: 'chinook_ArtistGroupByOutputType';
	readonly ArtistId: number;
	readonly Name: string | null;
	readonly _count: Ichinook_ArtistCountAggregateOutputType | null;
	readonly _avg: Ichinook_ArtistAvgAggregateOutputType | null;
	readonly _sum: Ichinook_ArtistSumAggregateOutputType | null;
	readonly _min: Ichinook_ArtistMinAggregateOutputType | null;
	readonly _max: Ichinook_ArtistMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_CustomerCountAggregateOutputType {
	readonly __typename: 'chinook_CustomerCountAggregateOutputType';
	readonly CustomerId: number;
	readonly FirstName: number;
	readonly LastName: number;
	readonly Company: number;
	readonly Address: number;
	readonly City: number;
	readonly State: number;
	readonly Country: number;
	readonly PostalCode: number;
	readonly Phone: number;
	readonly Fax: number;
	readonly Email: number;
	readonly SupportRepId: number;
	readonly _all: number;
	readonly _join: IQuery;
}

export interface Ichinook_CustomerAvgAggregateOutputType {
	readonly __typename: 'chinook_CustomerAvgAggregateOutputType';
	readonly CustomerId: number | null;
	readonly SupportRepId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_CustomerSumAggregateOutputType {
	readonly __typename: 'chinook_CustomerSumAggregateOutputType';
	readonly CustomerId: number | null;
	readonly SupportRepId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_CustomerMinAggregateOutputType {
	readonly __typename: 'chinook_CustomerMinAggregateOutputType';
	readonly CustomerId: number | null;
	readonly FirstName: string | null;
	readonly LastName: string | null;
	readonly Company: string | null;
	readonly Address: string | null;
	readonly City: string | null;
	readonly State: string | null;
	readonly Country: string | null;
	readonly PostalCode: string | null;
	readonly Phone: string | null;
	readonly Fax: string | null;
	readonly Email: string | null;
	readonly SupportRepId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_CustomerMaxAggregateOutputType {
	readonly __typename: 'chinook_CustomerMaxAggregateOutputType';
	readonly CustomerId: number | null;
	readonly FirstName: string | null;
	readonly LastName: string | null;
	readonly Company: string | null;
	readonly Address: string | null;
	readonly City: string | null;
	readonly State: string | null;
	readonly Country: string | null;
	readonly PostalCode: string | null;
	readonly Phone: string | null;
	readonly Fax: string | null;
	readonly Email: string | null;
	readonly SupportRepId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_AggregateCustomer {
	readonly __typename: 'chinook_AggregateCustomer';
	readonly _count: Ichinook_CustomerCountAggregateOutputType | null;
	readonly _avg: Ichinook_CustomerAvgAggregateOutputType | null;
	readonly _sum: Ichinook_CustomerSumAggregateOutputType | null;
	readonly _min: Ichinook_CustomerMinAggregateOutputType | null;
	readonly _max: Ichinook_CustomerMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_CustomerCountOrderByAggregateInput {
	CustomerId?: chinook_SortOrder;
	FirstName?: chinook_SortOrder;
	LastName?: chinook_SortOrder;
	Company?: chinook_SortOrder;
	Address?: chinook_SortOrder;
	City?: chinook_SortOrder;
	State?: chinook_SortOrder;
	Country?: chinook_SortOrder;
	PostalCode?: chinook_SortOrder;
	Phone?: chinook_SortOrder;
	Fax?: chinook_SortOrder;
	Email?: chinook_SortOrder;
	SupportRepId?: chinook_SortOrder;
}

export interface Ichinook_CustomerAvgOrderByAggregateInput {
	CustomerId?: chinook_SortOrder;
	SupportRepId?: chinook_SortOrder;
}

export interface Ichinook_CustomerMaxOrderByAggregateInput {
	CustomerId?: chinook_SortOrder;
	FirstName?: chinook_SortOrder;
	LastName?: chinook_SortOrder;
	Company?: chinook_SortOrder;
	Address?: chinook_SortOrder;
	City?: chinook_SortOrder;
	State?: chinook_SortOrder;
	Country?: chinook_SortOrder;
	PostalCode?: chinook_SortOrder;
	Phone?: chinook_SortOrder;
	Fax?: chinook_SortOrder;
	Email?: chinook_SortOrder;
	SupportRepId?: chinook_SortOrder;
}

export interface Ichinook_CustomerMinOrderByAggregateInput {
	CustomerId?: chinook_SortOrder;
	FirstName?: chinook_SortOrder;
	LastName?: chinook_SortOrder;
	Company?: chinook_SortOrder;
	Address?: chinook_SortOrder;
	City?: chinook_SortOrder;
	State?: chinook_SortOrder;
	Country?: chinook_SortOrder;
	PostalCode?: chinook_SortOrder;
	Phone?: chinook_SortOrder;
	Fax?: chinook_SortOrder;
	Email?: chinook_SortOrder;
	SupportRepId?: chinook_SortOrder;
}

export interface Ichinook_CustomerSumOrderByAggregateInput {
	CustomerId?: chinook_SortOrder;
	SupportRepId?: chinook_SortOrder;
}

export interface Ichinook_CustomerOrderByWithAggregationInput {
	CustomerId?: chinook_SortOrder;
	FirstName?: chinook_SortOrder;
	LastName?: chinook_SortOrder;
	Company?: chinook_SortOrder;
	Address?: chinook_SortOrder;
	City?: chinook_SortOrder;
	State?: chinook_SortOrder;
	Country?: chinook_SortOrder;
	PostalCode?: chinook_SortOrder;
	Phone?: chinook_SortOrder;
	Fax?: chinook_SortOrder;
	Email?: chinook_SortOrder;
	SupportRepId?: chinook_SortOrder;
	_count?: Ichinook_CustomerCountOrderByAggregateInput;
	_avg?: Ichinook_CustomerAvgOrderByAggregateInput;
	_max?: Ichinook_CustomerMaxOrderByAggregateInput;
	_min?: Ichinook_CustomerMinOrderByAggregateInput;
	_sum?: Ichinook_CustomerSumOrderByAggregateInput;
}

export interface Ichinook_NestedFloatNullableFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Ichinook_NestedFloatNullableFilter;
}

export interface Ichinook_NestedIntNullableWithAggregatesFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Ichinook_NestedIntNullableWithAggregatesFilter;
	_count?: Ichinook_NestedIntNullableFilter;
	_avg?: Ichinook_NestedFloatNullableFilter;
	_sum?: Ichinook_NestedIntNullableFilter;
	_min?: Ichinook_NestedIntNullableFilter;
	_max?: Ichinook_NestedIntNullableFilter;
}

export interface Ichinook_IntNullableWithAggregatesFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Ichinook_NestedIntNullableWithAggregatesFilter;
	_count?: Ichinook_NestedIntNullableFilter;
	_avg?: Ichinook_NestedFloatNullableFilter;
	_sum?: Ichinook_NestedIntNullableFilter;
	_min?: Ichinook_NestedIntNullableFilter;
	_max?: Ichinook_NestedIntNullableFilter;
}

export interface Ichinook_CustomerScalarWhereWithAggregatesInput {
	AND?: Ichinook_CustomerScalarWhereWithAggregatesInput;
	OR?: Ichinook_CustomerScalarWhereWithAggregatesInput[];
	NOT?: Ichinook_CustomerScalarWhereWithAggregatesInput;
	CustomerId?: Ichinook_IntWithAggregatesFilter;
	FirstName?: Ichinook_StringWithAggregatesFilter;
	LastName?: Ichinook_StringWithAggregatesFilter;
	Company?: Ichinook_StringNullableWithAggregatesFilter;
	Address?: Ichinook_StringNullableWithAggregatesFilter;
	City?: Ichinook_StringNullableWithAggregatesFilter;
	State?: Ichinook_StringNullableWithAggregatesFilter;
	Country?: Ichinook_StringNullableWithAggregatesFilter;
	PostalCode?: Ichinook_StringNullableWithAggregatesFilter;
	Phone?: Ichinook_StringNullableWithAggregatesFilter;
	Fax?: Ichinook_StringNullableWithAggregatesFilter;
	Email?: Ichinook_StringWithAggregatesFilter;
	SupportRepId?: Ichinook_IntNullableWithAggregatesFilter;
}

export interface Ichinook_CustomerGroupByOutputType {
	readonly __typename: 'chinook_CustomerGroupByOutputType';
	readonly CustomerId: number;
	readonly FirstName: string;
	readonly LastName: string;
	readonly Company: string | null;
	readonly Address: string | null;
	readonly City: string | null;
	readonly State: string | null;
	readonly Country: string | null;
	readonly PostalCode: string | null;
	readonly Phone: string | null;
	readonly Fax: string | null;
	readonly Email: string;
	readonly SupportRepId: number | null;
	readonly _count: Ichinook_CustomerCountAggregateOutputType | null;
	readonly _avg: Ichinook_CustomerAvgAggregateOutputType | null;
	readonly _sum: Ichinook_CustomerSumAggregateOutputType | null;
	readonly _min: Ichinook_CustomerMinAggregateOutputType | null;
	readonly _max: Ichinook_CustomerMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_EmployeeCountAggregateOutputType {
	readonly __typename: 'chinook_EmployeeCountAggregateOutputType';
	readonly EmployeeId: number;
	readonly LastName: number;
	readonly FirstName: number;
	readonly Title: number;
	readonly ReportsTo: number;
	readonly BirthDate: number;
	readonly HireDate: number;
	readonly Address: number;
	readonly City: number;
	readonly State: number;
	readonly Country: number;
	readonly PostalCode: number;
	readonly Phone: number;
	readonly Fax: number;
	readonly Email: number;
	readonly _all: number;
	readonly _join: IQuery;
}

export interface Ichinook_EmployeeAvgAggregateOutputType {
	readonly __typename: 'chinook_EmployeeAvgAggregateOutputType';
	readonly EmployeeId: number | null;
	readonly ReportsTo: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_EmployeeSumAggregateOutputType {
	readonly __typename: 'chinook_EmployeeSumAggregateOutputType';
	readonly EmployeeId: number | null;
	readonly ReportsTo: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_EmployeeMinAggregateOutputType {
	readonly __typename: 'chinook_EmployeeMinAggregateOutputType';
	readonly EmployeeId: number | null;
	readonly LastName: string | null;
	readonly FirstName: string | null;
	readonly Title: string | null;
	readonly ReportsTo: number | null;
	readonly BirthDate: string | null;
	readonly HireDate: string | null;
	readonly Address: string | null;
	readonly City: string | null;
	readonly State: string | null;
	readonly Country: string | null;
	readonly PostalCode: string | null;
	readonly Phone: string | null;
	readonly Fax: string | null;
	readonly Email: string | null;
	readonly _join: IQuery;
}

export interface Ichinook_EmployeeMaxAggregateOutputType {
	readonly __typename: 'chinook_EmployeeMaxAggregateOutputType';
	readonly EmployeeId: number | null;
	readonly LastName: string | null;
	readonly FirstName: string | null;
	readonly Title: string | null;
	readonly ReportsTo: number | null;
	readonly BirthDate: string | null;
	readonly HireDate: string | null;
	readonly Address: string | null;
	readonly City: string | null;
	readonly State: string | null;
	readonly Country: string | null;
	readonly PostalCode: string | null;
	readonly Phone: string | null;
	readonly Fax: string | null;
	readonly Email: string | null;
	readonly _join: IQuery;
}

export interface Ichinook_AggregateEmployee {
	readonly __typename: 'chinook_AggregateEmployee';
	readonly _count: Ichinook_EmployeeCountAggregateOutputType | null;
	readonly _avg: Ichinook_EmployeeAvgAggregateOutputType | null;
	readonly _sum: Ichinook_EmployeeSumAggregateOutputType | null;
	readonly _min: Ichinook_EmployeeMinAggregateOutputType | null;
	readonly _max: Ichinook_EmployeeMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_EmployeeCountOrderByAggregateInput {
	EmployeeId?: chinook_SortOrder;
	LastName?: chinook_SortOrder;
	FirstName?: chinook_SortOrder;
	Title?: chinook_SortOrder;
	ReportsTo?: chinook_SortOrder;
	BirthDate?: chinook_SortOrder;
	HireDate?: chinook_SortOrder;
	Address?: chinook_SortOrder;
	City?: chinook_SortOrder;
	State?: chinook_SortOrder;
	Country?: chinook_SortOrder;
	PostalCode?: chinook_SortOrder;
	Phone?: chinook_SortOrder;
	Fax?: chinook_SortOrder;
	Email?: chinook_SortOrder;
}

export interface Ichinook_EmployeeAvgOrderByAggregateInput {
	EmployeeId?: chinook_SortOrder;
	ReportsTo?: chinook_SortOrder;
}

export interface Ichinook_EmployeeMaxOrderByAggregateInput {
	EmployeeId?: chinook_SortOrder;
	LastName?: chinook_SortOrder;
	FirstName?: chinook_SortOrder;
	Title?: chinook_SortOrder;
	ReportsTo?: chinook_SortOrder;
	BirthDate?: chinook_SortOrder;
	HireDate?: chinook_SortOrder;
	Address?: chinook_SortOrder;
	City?: chinook_SortOrder;
	State?: chinook_SortOrder;
	Country?: chinook_SortOrder;
	PostalCode?: chinook_SortOrder;
	Phone?: chinook_SortOrder;
	Fax?: chinook_SortOrder;
	Email?: chinook_SortOrder;
}

export interface Ichinook_EmployeeMinOrderByAggregateInput {
	EmployeeId?: chinook_SortOrder;
	LastName?: chinook_SortOrder;
	FirstName?: chinook_SortOrder;
	Title?: chinook_SortOrder;
	ReportsTo?: chinook_SortOrder;
	BirthDate?: chinook_SortOrder;
	HireDate?: chinook_SortOrder;
	Address?: chinook_SortOrder;
	City?: chinook_SortOrder;
	State?: chinook_SortOrder;
	Country?: chinook_SortOrder;
	PostalCode?: chinook_SortOrder;
	Phone?: chinook_SortOrder;
	Fax?: chinook_SortOrder;
	Email?: chinook_SortOrder;
}

export interface Ichinook_EmployeeSumOrderByAggregateInput {
	EmployeeId?: chinook_SortOrder;
	ReportsTo?: chinook_SortOrder;
}

export interface Ichinook_EmployeeOrderByWithAggregationInput {
	EmployeeId?: chinook_SortOrder;
	LastName?: chinook_SortOrder;
	FirstName?: chinook_SortOrder;
	Title?: chinook_SortOrder;
	ReportsTo?: chinook_SortOrder;
	BirthDate?: chinook_SortOrder;
	HireDate?: chinook_SortOrder;
	Address?: chinook_SortOrder;
	City?: chinook_SortOrder;
	State?: chinook_SortOrder;
	Country?: chinook_SortOrder;
	PostalCode?: chinook_SortOrder;
	Phone?: chinook_SortOrder;
	Fax?: chinook_SortOrder;
	Email?: chinook_SortOrder;
	_count?: Ichinook_EmployeeCountOrderByAggregateInput;
	_avg?: Ichinook_EmployeeAvgOrderByAggregateInput;
	_max?: Ichinook_EmployeeMaxOrderByAggregateInput;
	_min?: Ichinook_EmployeeMinOrderByAggregateInput;
	_sum?: Ichinook_EmployeeSumOrderByAggregateInput;
}

export interface Ichinook_NestedDateTimeNullableWithAggregatesFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: Ichinook_NestedDateTimeNullableWithAggregatesFilter;
	_count?: Ichinook_NestedIntNullableFilter;
	_min?: Ichinook_NestedDateTimeNullableFilter;
	_max?: Ichinook_NestedDateTimeNullableFilter;
}

export interface Ichinook_DateTimeNullableWithAggregatesFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: Ichinook_NestedDateTimeNullableWithAggregatesFilter;
	_count?: Ichinook_NestedIntNullableFilter;
	_min?: Ichinook_NestedDateTimeNullableFilter;
	_max?: Ichinook_NestedDateTimeNullableFilter;
}

export interface Ichinook_EmployeeScalarWhereWithAggregatesInput {
	AND?: Ichinook_EmployeeScalarWhereWithAggregatesInput;
	OR?: Ichinook_EmployeeScalarWhereWithAggregatesInput[];
	NOT?: Ichinook_EmployeeScalarWhereWithAggregatesInput;
	EmployeeId?: Ichinook_IntWithAggregatesFilter;
	LastName?: Ichinook_StringWithAggregatesFilter;
	FirstName?: Ichinook_StringWithAggregatesFilter;
	Title?: Ichinook_StringNullableWithAggregatesFilter;
	ReportsTo?: Ichinook_IntNullableWithAggregatesFilter;
	BirthDate?: Ichinook_DateTimeNullableWithAggregatesFilter;
	HireDate?: Ichinook_DateTimeNullableWithAggregatesFilter;
	Address?: Ichinook_StringNullableWithAggregatesFilter;
	City?: Ichinook_StringNullableWithAggregatesFilter;
	State?: Ichinook_StringNullableWithAggregatesFilter;
	Country?: Ichinook_StringNullableWithAggregatesFilter;
	PostalCode?: Ichinook_StringNullableWithAggregatesFilter;
	Phone?: Ichinook_StringNullableWithAggregatesFilter;
	Fax?: Ichinook_StringNullableWithAggregatesFilter;
	Email?: Ichinook_StringNullableWithAggregatesFilter;
}

export interface Ichinook_EmployeeGroupByOutputType {
	readonly __typename: 'chinook_EmployeeGroupByOutputType';
	readonly EmployeeId: number;
	readonly LastName: string;
	readonly FirstName: string;
	readonly Title: string | null;
	readonly ReportsTo: number | null;
	readonly BirthDate: string | null;
	readonly HireDate: string | null;
	readonly Address: string | null;
	readonly City: string | null;
	readonly State: string | null;
	readonly Country: string | null;
	readonly PostalCode: string | null;
	readonly Phone: string | null;
	readonly Fax: string | null;
	readonly Email: string | null;
	readonly _count: Ichinook_EmployeeCountAggregateOutputType | null;
	readonly _avg: Ichinook_EmployeeAvgAggregateOutputType | null;
	readonly _sum: Ichinook_EmployeeSumAggregateOutputType | null;
	readonly _min: Ichinook_EmployeeMinAggregateOutputType | null;
	readonly _max: Ichinook_EmployeeMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_GenreWhereUniqueInput {
	GenreId?: number;
}

export enum chinook_GenreScalarFieldEnum {
	GenreId = 'GenreId',
	Name = 'Name',
}

export interface Ichinook_GenreCountAggregateOutputType {
	readonly __typename: 'chinook_GenreCountAggregateOutputType';
	readonly GenreId: number;
	readonly Name: number;
	readonly _all: number;
	readonly _join: IQuery;
}

export interface Ichinook_GenreAvgAggregateOutputType {
	readonly __typename: 'chinook_GenreAvgAggregateOutputType';
	readonly GenreId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_GenreSumAggregateOutputType {
	readonly __typename: 'chinook_GenreSumAggregateOutputType';
	readonly GenreId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_GenreMinAggregateOutputType {
	readonly __typename: 'chinook_GenreMinAggregateOutputType';
	readonly GenreId: number | null;
	readonly Name: string | null;
	readonly _join: IQuery;
}

export interface Ichinook_GenreMaxAggregateOutputType {
	readonly __typename: 'chinook_GenreMaxAggregateOutputType';
	readonly GenreId: number | null;
	readonly Name: string | null;
	readonly _join: IQuery;
}

export interface Ichinook_AggregateGenre {
	readonly __typename: 'chinook_AggregateGenre';
	readonly _count: Ichinook_GenreCountAggregateOutputType | null;
	readonly _avg: Ichinook_GenreAvgAggregateOutputType | null;
	readonly _sum: Ichinook_GenreSumAggregateOutputType | null;
	readonly _min: Ichinook_GenreMinAggregateOutputType | null;
	readonly _max: Ichinook_GenreMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_GenreCountOrderByAggregateInput {
	GenreId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
}

export interface Ichinook_GenreAvgOrderByAggregateInput {
	GenreId?: chinook_SortOrder;
}

export interface Ichinook_GenreMaxOrderByAggregateInput {
	GenreId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
}

export interface Ichinook_GenreMinOrderByAggregateInput {
	GenreId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
}

export interface Ichinook_GenreSumOrderByAggregateInput {
	GenreId?: chinook_SortOrder;
}

export interface Ichinook_GenreOrderByWithAggregationInput {
	GenreId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
	_count?: Ichinook_GenreCountOrderByAggregateInput;
	_avg?: Ichinook_GenreAvgOrderByAggregateInput;
	_max?: Ichinook_GenreMaxOrderByAggregateInput;
	_min?: Ichinook_GenreMinOrderByAggregateInput;
	_sum?: Ichinook_GenreSumOrderByAggregateInput;
}

export interface Ichinook_GenreScalarWhereWithAggregatesInput {
	AND?: Ichinook_GenreScalarWhereWithAggregatesInput;
	OR?: Ichinook_GenreScalarWhereWithAggregatesInput[];
	NOT?: Ichinook_GenreScalarWhereWithAggregatesInput;
	GenreId?: Ichinook_IntWithAggregatesFilter;
	Name?: Ichinook_StringNullableWithAggregatesFilter;
}

export interface Ichinook_GenreGroupByOutputType {
	readonly __typename: 'chinook_GenreGroupByOutputType';
	readonly GenreId: number;
	readonly Name: string | null;
	readonly _count: Ichinook_GenreCountAggregateOutputType | null;
	readonly _avg: Ichinook_GenreAvgAggregateOutputType | null;
	readonly _sum: Ichinook_GenreSumAggregateOutputType | null;
	readonly _min: Ichinook_GenreMinAggregateOutputType | null;
	readonly _max: Ichinook_GenreMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_InvoiceCountAggregateOutputType {
	readonly __typename: 'chinook_InvoiceCountAggregateOutputType';
	readonly InvoiceId: number;
	readonly CustomerId: number;
	readonly InvoiceDate: number;
	readonly BillingAddress: number;
	readonly BillingCity: number;
	readonly BillingState: number;
	readonly BillingCountry: number;
	readonly BillingPostalCode: number;
	readonly Total: number;
	readonly _all: number;
	readonly _join: IQuery;
}

export interface Ichinook_InvoiceAvgAggregateOutputType {
	readonly __typename: 'chinook_InvoiceAvgAggregateOutputType';
	readonly InvoiceId: number | null;
	readonly CustomerId: number | null;
	readonly Total: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_InvoiceSumAggregateOutputType {
	readonly __typename: 'chinook_InvoiceSumAggregateOutputType';
	readonly InvoiceId: number | null;
	readonly CustomerId: number | null;
	readonly Total: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_InvoiceMinAggregateOutputType {
	readonly __typename: 'chinook_InvoiceMinAggregateOutputType';
	readonly InvoiceId: number | null;
	readonly CustomerId: number | null;
	readonly InvoiceDate: string | null;
	readonly BillingAddress: string | null;
	readonly BillingCity: string | null;
	readonly BillingState: string | null;
	readonly BillingCountry: string | null;
	readonly BillingPostalCode: string | null;
	readonly Total: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_InvoiceMaxAggregateOutputType {
	readonly __typename: 'chinook_InvoiceMaxAggregateOutputType';
	readonly InvoiceId: number | null;
	readonly CustomerId: number | null;
	readonly InvoiceDate: string | null;
	readonly BillingAddress: string | null;
	readonly BillingCity: string | null;
	readonly BillingState: string | null;
	readonly BillingCountry: string | null;
	readonly BillingPostalCode: string | null;
	readonly Total: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_AggregateInvoice {
	readonly __typename: 'chinook_AggregateInvoice';
	readonly _count: Ichinook_InvoiceCountAggregateOutputType | null;
	readonly _avg: Ichinook_InvoiceAvgAggregateOutputType | null;
	readonly _sum: Ichinook_InvoiceSumAggregateOutputType | null;
	readonly _min: Ichinook_InvoiceMinAggregateOutputType | null;
	readonly _max: Ichinook_InvoiceMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_InvoiceCountOrderByAggregateInput {
	InvoiceId?: chinook_SortOrder;
	CustomerId?: chinook_SortOrder;
	InvoiceDate?: chinook_SortOrder;
	BillingAddress?: chinook_SortOrder;
	BillingCity?: chinook_SortOrder;
	BillingState?: chinook_SortOrder;
	BillingCountry?: chinook_SortOrder;
	BillingPostalCode?: chinook_SortOrder;
	Total?: chinook_SortOrder;
}

export interface Ichinook_InvoiceAvgOrderByAggregateInput {
	InvoiceId?: chinook_SortOrder;
	CustomerId?: chinook_SortOrder;
	Total?: chinook_SortOrder;
}

export interface Ichinook_InvoiceMaxOrderByAggregateInput {
	InvoiceId?: chinook_SortOrder;
	CustomerId?: chinook_SortOrder;
	InvoiceDate?: chinook_SortOrder;
	BillingAddress?: chinook_SortOrder;
	BillingCity?: chinook_SortOrder;
	BillingState?: chinook_SortOrder;
	BillingCountry?: chinook_SortOrder;
	BillingPostalCode?: chinook_SortOrder;
	Total?: chinook_SortOrder;
}

export interface Ichinook_InvoiceMinOrderByAggregateInput {
	InvoiceId?: chinook_SortOrder;
	CustomerId?: chinook_SortOrder;
	InvoiceDate?: chinook_SortOrder;
	BillingAddress?: chinook_SortOrder;
	BillingCity?: chinook_SortOrder;
	BillingState?: chinook_SortOrder;
	BillingCountry?: chinook_SortOrder;
	BillingPostalCode?: chinook_SortOrder;
	Total?: chinook_SortOrder;
}

export interface Ichinook_InvoiceSumOrderByAggregateInput {
	InvoiceId?: chinook_SortOrder;
	CustomerId?: chinook_SortOrder;
	Total?: chinook_SortOrder;
}

export interface Ichinook_InvoiceOrderByWithAggregationInput {
	InvoiceId?: chinook_SortOrder;
	CustomerId?: chinook_SortOrder;
	InvoiceDate?: chinook_SortOrder;
	BillingAddress?: chinook_SortOrder;
	BillingCity?: chinook_SortOrder;
	BillingState?: chinook_SortOrder;
	BillingCountry?: chinook_SortOrder;
	BillingPostalCode?: chinook_SortOrder;
	Total?: chinook_SortOrder;
	_count?: Ichinook_InvoiceCountOrderByAggregateInput;
	_avg?: Ichinook_InvoiceAvgOrderByAggregateInput;
	_max?: Ichinook_InvoiceMaxOrderByAggregateInput;
	_min?: Ichinook_InvoiceMinOrderByAggregateInput;
	_sum?: Ichinook_InvoiceSumOrderByAggregateInput;
}

export interface Ichinook_NestedDateTimeWithAggregatesFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: Ichinook_NestedDateTimeWithAggregatesFilter;
	_count?: Ichinook_NestedIntFilter;
	_min?: Ichinook_NestedDateTimeFilter;
	_max?: Ichinook_NestedDateTimeFilter;
}

export interface Ichinook_DateTimeWithAggregatesFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: Ichinook_NestedDateTimeWithAggregatesFilter;
	_count?: Ichinook_NestedIntFilter;
	_min?: Ichinook_NestedDateTimeFilter;
	_max?: Ichinook_NestedDateTimeFilter;
}

export interface Ichinook_NestedDecimalWithAggregatesFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Ichinook_NestedDecimalWithAggregatesFilter;
	_count?: Ichinook_NestedIntFilter;
	_avg?: Ichinook_NestedDecimalFilter;
	_sum?: Ichinook_NestedDecimalFilter;
	_min?: Ichinook_NestedDecimalFilter;
	_max?: Ichinook_NestedDecimalFilter;
}

export interface Ichinook_DecimalWithAggregatesFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Ichinook_NestedDecimalWithAggregatesFilter;
	_count?: Ichinook_NestedIntFilter;
	_avg?: Ichinook_NestedDecimalFilter;
	_sum?: Ichinook_NestedDecimalFilter;
	_min?: Ichinook_NestedDecimalFilter;
	_max?: Ichinook_NestedDecimalFilter;
}

export interface Ichinook_InvoiceScalarWhereWithAggregatesInput {
	AND?: Ichinook_InvoiceScalarWhereWithAggregatesInput;
	OR?: Ichinook_InvoiceScalarWhereWithAggregatesInput[];
	NOT?: Ichinook_InvoiceScalarWhereWithAggregatesInput;
	InvoiceId?: Ichinook_IntWithAggregatesFilter;
	CustomerId?: Ichinook_IntWithAggregatesFilter;
	InvoiceDate?: Ichinook_DateTimeWithAggregatesFilter;
	BillingAddress?: Ichinook_StringNullableWithAggregatesFilter;
	BillingCity?: Ichinook_StringNullableWithAggregatesFilter;
	BillingState?: Ichinook_StringNullableWithAggregatesFilter;
	BillingCountry?: Ichinook_StringNullableWithAggregatesFilter;
	BillingPostalCode?: Ichinook_StringNullableWithAggregatesFilter;
	Total?: Ichinook_DecimalWithAggregatesFilter;
}

export interface Ichinook_InvoiceGroupByOutputType {
	readonly __typename: 'chinook_InvoiceGroupByOutputType';
	readonly InvoiceId: number;
	readonly CustomerId: number;
	readonly InvoiceDate: string;
	readonly BillingAddress: string | null;
	readonly BillingCity: string | null;
	readonly BillingState: string | null;
	readonly BillingCountry: string | null;
	readonly BillingPostalCode: string | null;
	readonly Total: number;
	readonly _count: Ichinook_InvoiceCountAggregateOutputType | null;
	readonly _avg: Ichinook_InvoiceAvgAggregateOutputType | null;
	readonly _sum: Ichinook_InvoiceSumAggregateOutputType | null;
	readonly _min: Ichinook_InvoiceMinAggregateOutputType | null;
	readonly _max: Ichinook_InvoiceMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_InvoiceLineCountAggregateOutputType {
	readonly __typename: 'chinook_InvoiceLineCountAggregateOutputType';
	readonly InvoiceLineId: number;
	readonly InvoiceId: number;
	readonly TrackId: number;
	readonly UnitPrice: number;
	readonly Quantity: number;
	readonly _all: number;
	readonly _join: IQuery;
}

export interface Ichinook_InvoiceLineAvgAggregateOutputType {
	readonly __typename: 'chinook_InvoiceLineAvgAggregateOutputType';
	readonly InvoiceLineId: number | null;
	readonly InvoiceId: number | null;
	readonly TrackId: number | null;
	readonly UnitPrice: number | null;
	readonly Quantity: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_InvoiceLineSumAggregateOutputType {
	readonly __typename: 'chinook_InvoiceLineSumAggregateOutputType';
	readonly InvoiceLineId: number | null;
	readonly InvoiceId: number | null;
	readonly TrackId: number | null;
	readonly UnitPrice: number | null;
	readonly Quantity: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_InvoiceLineMinAggregateOutputType {
	readonly __typename: 'chinook_InvoiceLineMinAggregateOutputType';
	readonly InvoiceLineId: number | null;
	readonly InvoiceId: number | null;
	readonly TrackId: number | null;
	readonly UnitPrice: number | null;
	readonly Quantity: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_InvoiceLineMaxAggregateOutputType {
	readonly __typename: 'chinook_InvoiceLineMaxAggregateOutputType';
	readonly InvoiceLineId: number | null;
	readonly InvoiceId: number | null;
	readonly TrackId: number | null;
	readonly UnitPrice: number | null;
	readonly Quantity: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_AggregateInvoiceLine {
	readonly __typename: 'chinook_AggregateInvoiceLine';
	readonly _count: Ichinook_InvoiceLineCountAggregateOutputType | null;
	readonly _avg: Ichinook_InvoiceLineAvgAggregateOutputType | null;
	readonly _sum: Ichinook_InvoiceLineSumAggregateOutputType | null;
	readonly _min: Ichinook_InvoiceLineMinAggregateOutputType | null;
	readonly _max: Ichinook_InvoiceLineMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_InvoiceLineCountOrderByAggregateInput {
	InvoiceLineId?: chinook_SortOrder;
	InvoiceId?: chinook_SortOrder;
	TrackId?: chinook_SortOrder;
	UnitPrice?: chinook_SortOrder;
	Quantity?: chinook_SortOrder;
}

export interface Ichinook_InvoiceLineAvgOrderByAggregateInput {
	InvoiceLineId?: chinook_SortOrder;
	InvoiceId?: chinook_SortOrder;
	TrackId?: chinook_SortOrder;
	UnitPrice?: chinook_SortOrder;
	Quantity?: chinook_SortOrder;
}

export interface Ichinook_InvoiceLineMaxOrderByAggregateInput {
	InvoiceLineId?: chinook_SortOrder;
	InvoiceId?: chinook_SortOrder;
	TrackId?: chinook_SortOrder;
	UnitPrice?: chinook_SortOrder;
	Quantity?: chinook_SortOrder;
}

export interface Ichinook_InvoiceLineMinOrderByAggregateInput {
	InvoiceLineId?: chinook_SortOrder;
	InvoiceId?: chinook_SortOrder;
	TrackId?: chinook_SortOrder;
	UnitPrice?: chinook_SortOrder;
	Quantity?: chinook_SortOrder;
}

export interface Ichinook_InvoiceLineSumOrderByAggregateInput {
	InvoiceLineId?: chinook_SortOrder;
	InvoiceId?: chinook_SortOrder;
	TrackId?: chinook_SortOrder;
	UnitPrice?: chinook_SortOrder;
	Quantity?: chinook_SortOrder;
}

export interface Ichinook_InvoiceLineOrderByWithAggregationInput {
	InvoiceLineId?: chinook_SortOrder;
	InvoiceId?: chinook_SortOrder;
	TrackId?: chinook_SortOrder;
	UnitPrice?: chinook_SortOrder;
	Quantity?: chinook_SortOrder;
	_count?: Ichinook_InvoiceLineCountOrderByAggregateInput;
	_avg?: Ichinook_InvoiceLineAvgOrderByAggregateInput;
	_max?: Ichinook_InvoiceLineMaxOrderByAggregateInput;
	_min?: Ichinook_InvoiceLineMinOrderByAggregateInput;
	_sum?: Ichinook_InvoiceLineSumOrderByAggregateInput;
}

export interface Ichinook_InvoiceLineScalarWhereWithAggregatesInput {
	AND?: Ichinook_InvoiceLineScalarWhereWithAggregatesInput;
	OR?: Ichinook_InvoiceLineScalarWhereWithAggregatesInput[];
	NOT?: Ichinook_InvoiceLineScalarWhereWithAggregatesInput;
	InvoiceLineId?: Ichinook_IntWithAggregatesFilter;
	InvoiceId?: Ichinook_IntWithAggregatesFilter;
	TrackId?: Ichinook_IntWithAggregatesFilter;
	UnitPrice?: Ichinook_DecimalWithAggregatesFilter;
	Quantity?: Ichinook_IntWithAggregatesFilter;
}

export interface Ichinook_InvoiceLineGroupByOutputType {
	readonly __typename: 'chinook_InvoiceLineGroupByOutputType';
	readonly InvoiceLineId: number;
	readonly InvoiceId: number;
	readonly TrackId: number;
	readonly UnitPrice: number;
	readonly Quantity: number;
	readonly _count: Ichinook_InvoiceLineCountAggregateOutputType | null;
	readonly _avg: Ichinook_InvoiceLineAvgAggregateOutputType | null;
	readonly _sum: Ichinook_InvoiceLineSumAggregateOutputType | null;
	readonly _min: Ichinook_InvoiceLineMinAggregateOutputType | null;
	readonly _max: Ichinook_InvoiceLineMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_MediaTypeWhereUniqueInput {
	MediaTypeId?: number;
}

export enum chinook_MediaTypeScalarFieldEnum {
	MediaTypeId = 'MediaTypeId',
	Name = 'Name',
}

export interface Ichinook_MediaTypeCountAggregateOutputType {
	readonly __typename: 'chinook_MediaTypeCountAggregateOutputType';
	readonly MediaTypeId: number;
	readonly Name: number;
	readonly _all: number;
	readonly _join: IQuery;
}

export interface Ichinook_MediaTypeAvgAggregateOutputType {
	readonly __typename: 'chinook_MediaTypeAvgAggregateOutputType';
	readonly MediaTypeId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_MediaTypeSumAggregateOutputType {
	readonly __typename: 'chinook_MediaTypeSumAggregateOutputType';
	readonly MediaTypeId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_MediaTypeMinAggregateOutputType {
	readonly __typename: 'chinook_MediaTypeMinAggregateOutputType';
	readonly MediaTypeId: number | null;
	readonly Name: string | null;
	readonly _join: IQuery;
}

export interface Ichinook_MediaTypeMaxAggregateOutputType {
	readonly __typename: 'chinook_MediaTypeMaxAggregateOutputType';
	readonly MediaTypeId: number | null;
	readonly Name: string | null;
	readonly _join: IQuery;
}

export interface Ichinook_AggregateMediaType {
	readonly __typename: 'chinook_AggregateMediaType';
	readonly _count: Ichinook_MediaTypeCountAggregateOutputType | null;
	readonly _avg: Ichinook_MediaTypeAvgAggregateOutputType | null;
	readonly _sum: Ichinook_MediaTypeSumAggregateOutputType | null;
	readonly _min: Ichinook_MediaTypeMinAggregateOutputType | null;
	readonly _max: Ichinook_MediaTypeMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_MediaTypeCountOrderByAggregateInput {
	MediaTypeId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
}

export interface Ichinook_MediaTypeAvgOrderByAggregateInput {
	MediaTypeId?: chinook_SortOrder;
}

export interface Ichinook_MediaTypeMaxOrderByAggregateInput {
	MediaTypeId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
}

export interface Ichinook_MediaTypeMinOrderByAggregateInput {
	MediaTypeId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
}

export interface Ichinook_MediaTypeSumOrderByAggregateInput {
	MediaTypeId?: chinook_SortOrder;
}

export interface Ichinook_MediaTypeOrderByWithAggregationInput {
	MediaTypeId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
	_count?: Ichinook_MediaTypeCountOrderByAggregateInput;
	_avg?: Ichinook_MediaTypeAvgOrderByAggregateInput;
	_max?: Ichinook_MediaTypeMaxOrderByAggregateInput;
	_min?: Ichinook_MediaTypeMinOrderByAggregateInput;
	_sum?: Ichinook_MediaTypeSumOrderByAggregateInput;
}

export interface Ichinook_MediaTypeScalarWhereWithAggregatesInput {
	AND?: Ichinook_MediaTypeScalarWhereWithAggregatesInput;
	OR?: Ichinook_MediaTypeScalarWhereWithAggregatesInput[];
	NOT?: Ichinook_MediaTypeScalarWhereWithAggregatesInput;
	MediaTypeId?: Ichinook_IntWithAggregatesFilter;
	Name?: Ichinook_StringNullableWithAggregatesFilter;
}

export interface Ichinook_MediaTypeGroupByOutputType {
	readonly __typename: 'chinook_MediaTypeGroupByOutputType';
	readonly MediaTypeId: number;
	readonly Name: string | null;
	readonly _count: Ichinook_MediaTypeCountAggregateOutputType | null;
	readonly _avg: Ichinook_MediaTypeAvgAggregateOutputType | null;
	readonly _sum: Ichinook_MediaTypeSumAggregateOutputType | null;
	readonly _min: Ichinook_MediaTypeMinAggregateOutputType | null;
	readonly _max: Ichinook_MediaTypeMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_PlaylistWhereUniqueInput {
	PlaylistId?: number;
}

export enum chinook_PlaylistScalarFieldEnum {
	PlaylistId = 'PlaylistId',
	Name = 'Name',
}

export interface Ichinook_PlaylistCountAggregateOutputType {
	readonly __typename: 'chinook_PlaylistCountAggregateOutputType';
	readonly PlaylistId: number;
	readonly Name: number;
	readonly _all: number;
	readonly _join: IQuery;
}

export interface Ichinook_PlaylistAvgAggregateOutputType {
	readonly __typename: 'chinook_PlaylistAvgAggregateOutputType';
	readonly PlaylistId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_PlaylistSumAggregateOutputType {
	readonly __typename: 'chinook_PlaylistSumAggregateOutputType';
	readonly PlaylistId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_PlaylistMinAggregateOutputType {
	readonly __typename: 'chinook_PlaylistMinAggregateOutputType';
	readonly PlaylistId: number | null;
	readonly Name: string | null;
	readonly _join: IQuery;
}

export interface Ichinook_PlaylistMaxAggregateOutputType {
	readonly __typename: 'chinook_PlaylistMaxAggregateOutputType';
	readonly PlaylistId: number | null;
	readonly Name: string | null;
	readonly _join: IQuery;
}

export interface Ichinook_AggregatePlaylist {
	readonly __typename: 'chinook_AggregatePlaylist';
	readonly _count: Ichinook_PlaylistCountAggregateOutputType | null;
	readonly _avg: Ichinook_PlaylistAvgAggregateOutputType | null;
	readonly _sum: Ichinook_PlaylistSumAggregateOutputType | null;
	readonly _min: Ichinook_PlaylistMinAggregateOutputType | null;
	readonly _max: Ichinook_PlaylistMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_PlaylistCountOrderByAggregateInput {
	PlaylistId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
}

export interface Ichinook_PlaylistAvgOrderByAggregateInput {
	PlaylistId?: chinook_SortOrder;
}

export interface Ichinook_PlaylistMaxOrderByAggregateInput {
	PlaylistId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
}

export interface Ichinook_PlaylistMinOrderByAggregateInput {
	PlaylistId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
}

export interface Ichinook_PlaylistSumOrderByAggregateInput {
	PlaylistId?: chinook_SortOrder;
}

export interface Ichinook_PlaylistOrderByWithAggregationInput {
	PlaylistId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
	_count?: Ichinook_PlaylistCountOrderByAggregateInput;
	_avg?: Ichinook_PlaylistAvgOrderByAggregateInput;
	_max?: Ichinook_PlaylistMaxOrderByAggregateInput;
	_min?: Ichinook_PlaylistMinOrderByAggregateInput;
	_sum?: Ichinook_PlaylistSumOrderByAggregateInput;
}

export interface Ichinook_PlaylistScalarWhereWithAggregatesInput {
	AND?: Ichinook_PlaylistScalarWhereWithAggregatesInput;
	OR?: Ichinook_PlaylistScalarWhereWithAggregatesInput[];
	NOT?: Ichinook_PlaylistScalarWhereWithAggregatesInput;
	PlaylistId?: Ichinook_IntWithAggregatesFilter;
	Name?: Ichinook_StringNullableWithAggregatesFilter;
}

export interface Ichinook_PlaylistGroupByOutputType {
	readonly __typename: 'chinook_PlaylistGroupByOutputType';
	readonly PlaylistId: number;
	readonly Name: string | null;
	readonly _count: Ichinook_PlaylistCountAggregateOutputType | null;
	readonly _avg: Ichinook_PlaylistAvgAggregateOutputType | null;
	readonly _sum: Ichinook_PlaylistSumAggregateOutputType | null;
	readonly _min: Ichinook_PlaylistMinAggregateOutputType | null;
	readonly _max: Ichinook_PlaylistMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_PlaylistTrackCountAggregateOutputType {
	readonly __typename: 'chinook_PlaylistTrackCountAggregateOutputType';
	readonly PlaylistId: number;
	readonly TrackId: number;
	readonly _all: number;
	readonly _join: IQuery;
}

export interface Ichinook_PlaylistTrackAvgAggregateOutputType {
	readonly __typename: 'chinook_PlaylistTrackAvgAggregateOutputType';
	readonly PlaylistId: number | null;
	readonly TrackId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_PlaylistTrackSumAggregateOutputType {
	readonly __typename: 'chinook_PlaylistTrackSumAggregateOutputType';
	readonly PlaylistId: number | null;
	readonly TrackId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_PlaylistTrackMinAggregateOutputType {
	readonly __typename: 'chinook_PlaylistTrackMinAggregateOutputType';
	readonly PlaylistId: number | null;
	readonly TrackId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_PlaylistTrackMaxAggregateOutputType {
	readonly __typename: 'chinook_PlaylistTrackMaxAggregateOutputType';
	readonly PlaylistId: number | null;
	readonly TrackId: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_AggregatePlaylistTrack {
	readonly __typename: 'chinook_AggregatePlaylistTrack';
	readonly _count: Ichinook_PlaylistTrackCountAggregateOutputType | null;
	readonly _avg: Ichinook_PlaylistTrackAvgAggregateOutputType | null;
	readonly _sum: Ichinook_PlaylistTrackSumAggregateOutputType | null;
	readonly _min: Ichinook_PlaylistTrackMinAggregateOutputType | null;
	readonly _max: Ichinook_PlaylistTrackMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_PlaylistTrackCountOrderByAggregateInput {
	PlaylistId?: chinook_SortOrder;
	TrackId?: chinook_SortOrder;
}

export interface Ichinook_PlaylistTrackAvgOrderByAggregateInput {
	PlaylistId?: chinook_SortOrder;
	TrackId?: chinook_SortOrder;
}

export interface Ichinook_PlaylistTrackMaxOrderByAggregateInput {
	PlaylistId?: chinook_SortOrder;
	TrackId?: chinook_SortOrder;
}

export interface Ichinook_PlaylistTrackMinOrderByAggregateInput {
	PlaylistId?: chinook_SortOrder;
	TrackId?: chinook_SortOrder;
}

export interface Ichinook_PlaylistTrackSumOrderByAggregateInput {
	PlaylistId?: chinook_SortOrder;
	TrackId?: chinook_SortOrder;
}

export interface Ichinook_PlaylistTrackOrderByWithAggregationInput {
	PlaylistId?: chinook_SortOrder;
	TrackId?: chinook_SortOrder;
	_count?: Ichinook_PlaylistTrackCountOrderByAggregateInput;
	_avg?: Ichinook_PlaylistTrackAvgOrderByAggregateInput;
	_max?: Ichinook_PlaylistTrackMaxOrderByAggregateInput;
	_min?: Ichinook_PlaylistTrackMinOrderByAggregateInput;
	_sum?: Ichinook_PlaylistTrackSumOrderByAggregateInput;
}

export interface Ichinook_PlaylistTrackScalarWhereWithAggregatesInput {
	AND?: Ichinook_PlaylistTrackScalarWhereWithAggregatesInput;
	OR?: Ichinook_PlaylistTrackScalarWhereWithAggregatesInput[];
	NOT?: Ichinook_PlaylistTrackScalarWhereWithAggregatesInput;
	PlaylistId?: Ichinook_IntWithAggregatesFilter;
	TrackId?: Ichinook_IntWithAggregatesFilter;
}

export interface Ichinook_PlaylistTrackGroupByOutputType {
	readonly __typename: 'chinook_PlaylistTrackGroupByOutputType';
	readonly PlaylistId: number;
	readonly TrackId: number;
	readonly _count: Ichinook_PlaylistTrackCountAggregateOutputType | null;
	readonly _avg: Ichinook_PlaylistTrackAvgAggregateOutputType | null;
	readonly _sum: Ichinook_PlaylistTrackSumAggregateOutputType | null;
	readonly _min: Ichinook_PlaylistTrackMinAggregateOutputType | null;
	readonly _max: Ichinook_PlaylistTrackMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_TrackCountAggregateOutputType {
	readonly __typename: 'chinook_TrackCountAggregateOutputType';
	readonly TrackId: number;
	readonly Name: number;
	readonly AlbumId: number;
	readonly MediaTypeId: number;
	readonly GenreId: number;
	readonly Composer: number;
	readonly Milliseconds: number;
	readonly String: number;
	readonly UnitPrice: number;
	readonly _all: number;
	readonly _join: IQuery;
}

export interface Ichinook_TrackAvgAggregateOutputType {
	readonly __typename: 'chinook_TrackAvgAggregateOutputType';
	readonly TrackId: number | null;
	readonly AlbumId: number | null;
	readonly MediaTypeId: number | null;
	readonly GenreId: number | null;
	readonly Milliseconds: number | null;
	readonly String: number | null;
	readonly UnitPrice: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_TrackSumAggregateOutputType {
	readonly __typename: 'chinook_TrackSumAggregateOutputType';
	readonly TrackId: number | null;
	readonly AlbumId: number | null;
	readonly MediaTypeId: number | null;
	readonly GenreId: number | null;
	readonly Milliseconds: number | null;
	readonly String: number | null;
	readonly UnitPrice: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_TrackMinAggregateOutputType {
	readonly __typename: 'chinook_TrackMinAggregateOutputType';
	readonly TrackId: number | null;
	readonly Name: string | null;
	readonly AlbumId: number | null;
	readonly MediaTypeId: number | null;
	readonly GenreId: number | null;
	readonly Composer: string | null;
	readonly Milliseconds: number | null;
	readonly String: number | null;
	readonly UnitPrice: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_TrackMaxAggregateOutputType {
	readonly __typename: 'chinook_TrackMaxAggregateOutputType';
	readonly TrackId: number | null;
	readonly Name: string | null;
	readonly AlbumId: number | null;
	readonly MediaTypeId: number | null;
	readonly GenreId: number | null;
	readonly Composer: string | null;
	readonly Milliseconds: number | null;
	readonly String: number | null;
	readonly UnitPrice: number | null;
	readonly _join: IQuery;
}

export interface Ichinook_AggregateTrack {
	readonly __typename: 'chinook_AggregateTrack';
	readonly _count: Ichinook_TrackCountAggregateOutputType | null;
	readonly _avg: Ichinook_TrackAvgAggregateOutputType | null;
	readonly _sum: Ichinook_TrackSumAggregateOutputType | null;
	readonly _min: Ichinook_TrackMinAggregateOutputType | null;
	readonly _max: Ichinook_TrackMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_TrackCountOrderByAggregateInput {
	TrackId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
	AlbumId?: chinook_SortOrder;
	MediaTypeId?: chinook_SortOrder;
	GenreId?: chinook_SortOrder;
	Composer?: chinook_SortOrder;
	Milliseconds?: chinook_SortOrder;
	String?: chinook_SortOrder;
	UnitPrice?: chinook_SortOrder;
}

export interface Ichinook_TrackAvgOrderByAggregateInput {
	TrackId?: chinook_SortOrder;
	AlbumId?: chinook_SortOrder;
	MediaTypeId?: chinook_SortOrder;
	GenreId?: chinook_SortOrder;
	Milliseconds?: chinook_SortOrder;
	String?: chinook_SortOrder;
	UnitPrice?: chinook_SortOrder;
}

export interface Ichinook_TrackMaxOrderByAggregateInput {
	TrackId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
	AlbumId?: chinook_SortOrder;
	MediaTypeId?: chinook_SortOrder;
	GenreId?: chinook_SortOrder;
	Composer?: chinook_SortOrder;
	Milliseconds?: chinook_SortOrder;
	String?: chinook_SortOrder;
	UnitPrice?: chinook_SortOrder;
}

export interface Ichinook_TrackMinOrderByAggregateInput {
	TrackId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
	AlbumId?: chinook_SortOrder;
	MediaTypeId?: chinook_SortOrder;
	GenreId?: chinook_SortOrder;
	Composer?: chinook_SortOrder;
	Milliseconds?: chinook_SortOrder;
	String?: chinook_SortOrder;
	UnitPrice?: chinook_SortOrder;
}

export interface Ichinook_TrackSumOrderByAggregateInput {
	TrackId?: chinook_SortOrder;
	AlbumId?: chinook_SortOrder;
	MediaTypeId?: chinook_SortOrder;
	GenreId?: chinook_SortOrder;
	Milliseconds?: chinook_SortOrder;
	String?: chinook_SortOrder;
	UnitPrice?: chinook_SortOrder;
}

export interface Ichinook_TrackOrderByWithAggregationInput {
	TrackId?: chinook_SortOrder;
	Name?: chinook_SortOrder;
	AlbumId?: chinook_SortOrder;
	MediaTypeId?: chinook_SortOrder;
	GenreId?: chinook_SortOrder;
	Composer?: chinook_SortOrder;
	Milliseconds?: chinook_SortOrder;
	String?: chinook_SortOrder;
	UnitPrice?: chinook_SortOrder;
	_count?: Ichinook_TrackCountOrderByAggregateInput;
	_avg?: Ichinook_TrackAvgOrderByAggregateInput;
	_max?: Ichinook_TrackMaxOrderByAggregateInput;
	_min?: Ichinook_TrackMinOrderByAggregateInput;
	_sum?: Ichinook_TrackSumOrderByAggregateInput;
}

export interface Ichinook_TrackScalarWhereWithAggregatesInput {
	AND?: Ichinook_TrackScalarWhereWithAggregatesInput;
	OR?: Ichinook_TrackScalarWhereWithAggregatesInput[];
	NOT?: Ichinook_TrackScalarWhereWithAggregatesInput;
	TrackId?: Ichinook_IntWithAggregatesFilter;
	Name?: Ichinook_StringWithAggregatesFilter;
	AlbumId?: Ichinook_IntNullableWithAggregatesFilter;
	MediaTypeId?: Ichinook_IntWithAggregatesFilter;
	GenreId?: Ichinook_IntNullableWithAggregatesFilter;
	Composer?: Ichinook_StringNullableWithAggregatesFilter;
	Milliseconds?: Ichinook_IntWithAggregatesFilter;
	String?: Ichinook_IntNullableWithAggregatesFilter;
	UnitPrice?: Ichinook_DecimalWithAggregatesFilter;
}

export interface Ichinook_TrackGroupByOutputType {
	readonly __typename: 'chinook_TrackGroupByOutputType';
	readonly TrackId: number;
	readonly Name: string;
	readonly AlbumId: number | null;
	readonly MediaTypeId: number;
	readonly GenreId: number | null;
	readonly Composer: string | null;
	readonly Milliseconds: number;
	readonly String: number | null;
	readonly UnitPrice: number;
	readonly _count: Ichinook_TrackCountAggregateOutputType | null;
	readonly _avg: Ichinook_TrackAvgAggregateOutputType | null;
	readonly _sum: Ichinook_TrackSumAggregateOutputType | null;
	readonly _min: Ichinook_TrackMinAggregateOutputType | null;
	readonly _max: Ichinook_TrackMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Ichinook_ArtistCreateWithoutAlbumInput {
	Name?: string;
}

export interface Ichinook_ArtistCreateOrConnectWithoutAlbumInput {
	where: Ichinook_ArtistWhereUniqueInput;
	create: Ichinook_ArtistCreateWithoutAlbumInput;
}

export interface Ichinook_ArtistCreateNestedOneWithoutAlbumInput {
	create?: Ichinook_ArtistCreateWithoutAlbumInput;
	connectOrCreate?: Ichinook_ArtistCreateOrConnectWithoutAlbumInput;
	connect?: Ichinook_ArtistWhereUniqueInput;
}

export interface Ichinook_GenreCreateWithoutTrackInput {
	Name?: string;
}

export interface Ichinook_GenreCreateOrConnectWithoutTrackInput {
	where: Ichinook_GenreWhereUniqueInput;
	create: Ichinook_GenreCreateWithoutTrackInput;
}

export interface Ichinook_GenreCreateNestedOneWithoutTrackInput {
	create?: Ichinook_GenreCreateWithoutTrackInput;
	connectOrCreate?: Ichinook_GenreCreateOrConnectWithoutTrackInput;
	connect?: Ichinook_GenreWhereUniqueInput;
}

export interface Ichinook_MediaTypeCreateWithoutTrackInput {
	Name?: string;
}

export interface Ichinook_MediaTypeCreateOrConnectWithoutTrackInput {
	where: Ichinook_MediaTypeWhereUniqueInput;
	create: Ichinook_MediaTypeCreateWithoutTrackInput;
}

export interface Ichinook_MediaTypeCreateNestedOneWithoutTrackInput {
	create?: Ichinook_MediaTypeCreateWithoutTrackInput;
	connectOrCreate?: Ichinook_MediaTypeCreateOrConnectWithoutTrackInput;
	connect?: Ichinook_MediaTypeWhereUniqueInput;
}

export interface Ichinook_AlbumCreateWithoutTrackInput {
	Title: string;
	Artist: Ichinook_ArtistCreateNestedOneWithoutAlbumInput;
}

export interface Ichinook_AlbumCreateOrConnectWithoutTrackInput {
	where: Ichinook_AlbumWhereUniqueInput;
	create: Ichinook_AlbumCreateWithoutTrackInput;
}

export interface Ichinook_AlbumCreateNestedOneWithoutTrackInput {
	create?: Ichinook_AlbumCreateWithoutTrackInput;
	connectOrCreate?: Ichinook_AlbumCreateOrConnectWithoutTrackInput;
	connect?: Ichinook_AlbumWhereUniqueInput;
}

export interface Ichinook_PlaylistCreateWithoutPlaylistTrackInput {
	Name?: string;
}

export interface Ichinook_PlaylistCreateOrConnectWithoutPlaylistTrackInput {
	where: Ichinook_PlaylistWhereUniqueInput;
	create: Ichinook_PlaylistCreateWithoutPlaylistTrackInput;
}

export interface Ichinook_PlaylistCreateNestedOneWithoutPlaylistTrackInput {
	create?: Ichinook_PlaylistCreateWithoutPlaylistTrackInput;
	connectOrCreate?: Ichinook_PlaylistCreateOrConnectWithoutPlaylistTrackInput;
	connect?: Ichinook_PlaylistWhereUniqueInput;
}

export interface Ichinook_PlaylistTrackCreateWithoutTrackInput {
	Playlist: Ichinook_PlaylistCreateNestedOneWithoutPlaylistTrackInput;
}

export interface Ichinook_PlaylistTrackCreateOrConnectWithoutTrackInput {
	where: Ichinook_PlaylistTrackWhereUniqueInput;
	create: Ichinook_PlaylistTrackCreateWithoutTrackInput;
}

export interface Ichinook_PlaylistTrackCreateNestedManyWithoutTrackInput {
	create?: Ichinook_PlaylistTrackCreateWithoutTrackInput;
	connectOrCreate?: Ichinook_PlaylistTrackCreateOrConnectWithoutTrackInput;
	connect?: Ichinook_PlaylistTrackWhereUniqueInput;
}

export interface Ichinook_TrackCreateWithoutInvoiceLineInput {
	Name: string;
	Composer?: string;
	Milliseconds: number;
	String?: number;
	UnitPrice: number;
	Album?: Ichinook_AlbumCreateNestedOneWithoutTrackInput;
	Genre?: Ichinook_GenreCreateNestedOneWithoutTrackInput;
	MediaType: Ichinook_MediaTypeCreateNestedOneWithoutTrackInput;
	PlaylistTrack?: Ichinook_PlaylistTrackCreateNestedManyWithoutTrackInput;
}

export interface Ichinook_TrackCreateOrConnectWithoutInvoiceLineInput {
	where: Ichinook_TrackWhereUniqueInput;
	create: Ichinook_TrackCreateWithoutInvoiceLineInput;
}

export interface Ichinook_TrackCreateNestedOneWithoutInvoiceLineInput {
	create?: Ichinook_TrackCreateWithoutInvoiceLineInput;
	connectOrCreate?: Ichinook_TrackCreateOrConnectWithoutInvoiceLineInput;
	connect?: Ichinook_TrackWhereUniqueInput;
}

export interface Ichinook_InvoiceLineCreateWithoutInvoiceInput {
	UnitPrice: number;
	Quantity: number;
	Track: Ichinook_TrackCreateNestedOneWithoutInvoiceLineInput;
}

export interface Ichinook_InvoiceLineCreateOrConnectWithoutInvoiceInput {
	where: Ichinook_InvoiceLineWhereUniqueInput;
	create: Ichinook_InvoiceLineCreateWithoutInvoiceInput;
}

export interface Ichinook_InvoiceLineCreateNestedManyWithoutInvoiceInput {
	create?: Ichinook_InvoiceLineCreateWithoutInvoiceInput;
	connectOrCreate?: Ichinook_InvoiceLineCreateOrConnectWithoutInvoiceInput;
	connect?: Ichinook_InvoiceLineWhereUniqueInput;
}

export interface Ichinook_InvoiceCreateWithoutCustomerInput {
	InvoiceDate: string;
	BillingAddress?: string;
	BillingCity?: string;
	BillingState?: string;
	BillingCountry?: string;
	BillingPostalCode?: string;
	Total: number;
	InvoiceLine?: Ichinook_InvoiceLineCreateNestedManyWithoutInvoiceInput;
}

export interface Ichinook_InvoiceCreateOrConnectWithoutCustomerInput {
	where: Ichinook_InvoiceWhereUniqueInput;
	create: Ichinook_InvoiceCreateWithoutCustomerInput;
}

export interface Ichinook_InvoiceCreateNestedManyWithoutCustomerInput {
	create?: Ichinook_InvoiceCreateWithoutCustomerInput;
	connectOrCreate?: Ichinook_InvoiceCreateOrConnectWithoutCustomerInput;
	connect?: Ichinook_InvoiceWhereUniqueInput;
}

export interface Ichinook_CustomerCreateWithoutEmployeeInput {
	FirstName: string;
	LastName: string;
	Company?: string;
	Address?: string;
	City?: string;
	State?: string;
	Country?: string;
	PostalCode?: string;
	Phone?: string;
	Fax?: string;
	Email: string;
	Invoice?: Ichinook_InvoiceCreateNestedManyWithoutCustomerInput;
}

export interface Ichinook_CustomerCreateOrConnectWithoutEmployeeInput {
	where: Ichinook_CustomerWhereUniqueInput;
	create: Ichinook_CustomerCreateWithoutEmployeeInput;
}

export interface Ichinook_CustomerCreateNestedManyWithoutEmployeeInput {
	create?: Ichinook_CustomerCreateWithoutEmployeeInput;
	connectOrCreate?: Ichinook_CustomerCreateOrConnectWithoutEmployeeInput;
	connect?: Ichinook_CustomerWhereUniqueInput;
}

export interface Ichinook_EmployeeCreateWithoutOther_EmployeeInput {
	LastName: string;
	FirstName: string;
	Title?: string;
	BirthDate?: string;
	HireDate?: string;
	Address?: string;
	City?: string;
	State?: string;
	Country?: string;
	PostalCode?: string;
	Phone?: string;
	Fax?: string;
	Email?: string;
	Employee?: Ichinook_EmployeeCreateNestedOneWithoutOther_EmployeeInput;
	Customer?: Ichinook_CustomerCreateNestedManyWithoutEmployeeInput;
}

export interface Ichinook_EmployeeCreateOrConnectWithoutOther_EmployeeInput {
	where: Ichinook_EmployeeWhereUniqueInput;
	create: Ichinook_EmployeeCreateWithoutOther_EmployeeInput;
}

export interface Ichinook_EmployeeCreateNestedOneWithoutOther_EmployeeInput {
	create?: Ichinook_EmployeeCreateWithoutOther_EmployeeInput;
	connectOrCreate?: Ichinook_EmployeeCreateOrConnectWithoutOther_EmployeeInput;
	connect?: Ichinook_EmployeeWhereUniqueInput;
}

export interface Ichinook_EmployeeCreateWithoutEmployeeInput {
	LastName: string;
	FirstName: string;
	Title?: string;
	BirthDate?: string;
	HireDate?: string;
	Address?: string;
	City?: string;
	State?: string;
	Country?: string;
	PostalCode?: string;
	Phone?: string;
	Fax?: string;
	Email?: string;
	Customer?: Ichinook_CustomerCreateNestedManyWithoutEmployeeInput;
	other_Employee?: Ichinook_EmployeeCreateNestedManyWithoutEmployeeInput;
}

export interface Ichinook_EmployeeCreateOrConnectWithoutEmployeeInput {
	where: Ichinook_EmployeeWhereUniqueInput;
	create: Ichinook_EmployeeCreateWithoutEmployeeInput;
}

export interface Ichinook_EmployeeCreateNestedManyWithoutEmployeeInput {
	create?: Ichinook_EmployeeCreateWithoutEmployeeInput;
	connectOrCreate?: Ichinook_EmployeeCreateOrConnectWithoutEmployeeInput;
	connect?: Ichinook_EmployeeWhereUniqueInput;
}

export interface Ichinook_EmployeeCreateWithoutCustomerInput {
	LastName: string;
	FirstName: string;
	Title?: string;
	BirthDate?: string;
	HireDate?: string;
	Address?: string;
	City?: string;
	State?: string;
	Country?: string;
	PostalCode?: string;
	Phone?: string;
	Fax?: string;
	Email?: string;
	Employee?: Ichinook_EmployeeCreateNestedOneWithoutOther_EmployeeInput;
	other_Employee?: Ichinook_EmployeeCreateNestedManyWithoutEmployeeInput;
}

export interface Ichinook_EmployeeCreateOrConnectWithoutCustomerInput {
	where: Ichinook_EmployeeWhereUniqueInput;
	create: Ichinook_EmployeeCreateWithoutCustomerInput;
}

export interface Ichinook_EmployeeCreateNestedOneWithoutCustomerInput {
	create?: Ichinook_EmployeeCreateWithoutCustomerInput;
	connectOrCreate?: Ichinook_EmployeeCreateOrConnectWithoutCustomerInput;
	connect?: Ichinook_EmployeeWhereUniqueInput;
}

export interface Ichinook_CustomerCreateWithoutInvoiceInput {
	FirstName: string;
	LastName: string;
	Company?: string;
	Address?: string;
	City?: string;
	State?: string;
	Country?: string;
	PostalCode?: string;
	Phone?: string;
	Fax?: string;
	Email: string;
	Employee?: Ichinook_EmployeeCreateNestedOneWithoutCustomerInput;
}

export interface Ichinook_CustomerCreateOrConnectWithoutInvoiceInput {
	where: Ichinook_CustomerWhereUniqueInput;
	create: Ichinook_CustomerCreateWithoutInvoiceInput;
}

export interface Ichinook_CustomerCreateNestedOneWithoutInvoiceInput {
	create?: Ichinook_CustomerCreateWithoutInvoiceInput;
	connectOrCreate?: Ichinook_CustomerCreateOrConnectWithoutInvoiceInput;
	connect?: Ichinook_CustomerWhereUniqueInput;
}

export interface Ichinook_InvoiceCreateWithoutInvoiceLineInput {
	InvoiceDate: string;
	BillingAddress?: string;
	BillingCity?: string;
	BillingState?: string;
	BillingCountry?: string;
	BillingPostalCode?: string;
	Total: number;
	Customer: Ichinook_CustomerCreateNestedOneWithoutInvoiceInput;
}

export interface Ichinook_InvoiceCreateOrConnectWithoutInvoiceLineInput {
	where: Ichinook_InvoiceWhereUniqueInput;
	create: Ichinook_InvoiceCreateWithoutInvoiceLineInput;
}

export interface Ichinook_InvoiceCreateNestedOneWithoutInvoiceLineInput {
	create?: Ichinook_InvoiceCreateWithoutInvoiceLineInput;
	connectOrCreate?: Ichinook_InvoiceCreateOrConnectWithoutInvoiceLineInput;
	connect?: Ichinook_InvoiceWhereUniqueInput;
}

export interface Ichinook_InvoiceLineCreateWithoutTrackInput {
	UnitPrice: number;
	Quantity: number;
	Invoice: Ichinook_InvoiceCreateNestedOneWithoutInvoiceLineInput;
}

export interface Ichinook_InvoiceLineCreateOrConnectWithoutTrackInput {
	where: Ichinook_InvoiceLineWhereUniqueInput;
	create: Ichinook_InvoiceLineCreateWithoutTrackInput;
}

export interface Ichinook_InvoiceLineCreateNestedManyWithoutTrackInput {
	create?: Ichinook_InvoiceLineCreateWithoutTrackInput;
	connectOrCreate?: Ichinook_InvoiceLineCreateOrConnectWithoutTrackInput;
	connect?: Ichinook_InvoiceLineWhereUniqueInput;
}

export interface Ichinook_TrackCreateWithoutAlbumInput {
	Name: string;
	Composer?: string;
	Milliseconds: number;
	String?: number;
	UnitPrice: number;
	Genre?: Ichinook_GenreCreateNestedOneWithoutTrackInput;
	MediaType: Ichinook_MediaTypeCreateNestedOneWithoutTrackInput;
	InvoiceLine?: Ichinook_InvoiceLineCreateNestedManyWithoutTrackInput;
	PlaylistTrack?: Ichinook_PlaylistTrackCreateNestedManyWithoutTrackInput;
}

export interface Ichinook_TrackCreateOrConnectWithoutAlbumInput {
	where: Ichinook_TrackWhereUniqueInput;
	create: Ichinook_TrackCreateWithoutAlbumInput;
}

export interface Ichinook_TrackCreateNestedManyWithoutAlbumInput {
	create?: Ichinook_TrackCreateWithoutAlbumInput;
	connectOrCreate?: Ichinook_TrackCreateOrConnectWithoutAlbumInput;
	connect?: Ichinook_TrackWhereUniqueInput;
}

export interface Ichinook_AlbumCreateInput {
	Title: string;
	Artist: Ichinook_ArtistCreateNestedOneWithoutAlbumInput;
	Track?: Ichinook_TrackCreateNestedManyWithoutAlbumInput;
}

export interface Ichinook_StringFieldUpdateOperationsInput {
	set?: string;
}

export interface Ichinook_NullableStringFieldUpdateOperationsInput {
	set?: string;
}

export interface Ichinook_ArtistUpdateWithoutAlbumInput {
	Name?: Ichinook_NullableStringFieldUpdateOperationsInput;
}

export interface Ichinook_ArtistUpsertWithoutAlbumInput {
	update: Ichinook_ArtistUpdateWithoutAlbumInput;
	create: Ichinook_ArtistCreateWithoutAlbumInput;
}

export interface Ichinook_ArtistUpdateOneRequiredWithoutAlbumInput {
	create?: Ichinook_ArtistCreateWithoutAlbumInput;
	connectOrCreate?: Ichinook_ArtistCreateOrConnectWithoutAlbumInput;
	upsert?: Ichinook_ArtistUpsertWithoutAlbumInput;
	connect?: Ichinook_ArtistWhereUniqueInput;
	update?: Ichinook_ArtistUpdateWithoutAlbumInput;
}

export interface Ichinook_IntFieldUpdateOperationsInput {
	set?: number;
	increment?: number;
	decrement?: number;
	multiply?: number;
	divide?: number;
}

export interface Ichinook_NullableIntFieldUpdateOperationsInput {
	set?: number;
	increment?: number;
	decrement?: number;
	multiply?: number;
	divide?: number;
}

export interface Ichinook_DecimalFieldUpdateOperationsInput {
	set?: number;
	increment?: number;
	decrement?: number;
	multiply?: number;
	divide?: number;
}

export interface Ichinook_GenreUpdateWithoutTrackInput {
	Name?: Ichinook_NullableStringFieldUpdateOperationsInput;
}

export interface Ichinook_GenreUpsertWithoutTrackInput {
	update: Ichinook_GenreUpdateWithoutTrackInput;
	create: Ichinook_GenreCreateWithoutTrackInput;
}

export interface Ichinook_GenreUpdateOneWithoutTrackInput {
	create?: Ichinook_GenreCreateWithoutTrackInput;
	connectOrCreate?: Ichinook_GenreCreateOrConnectWithoutTrackInput;
	upsert?: Ichinook_GenreUpsertWithoutTrackInput;
	disconnect?: boolean;
	delete?: boolean;
	connect?: Ichinook_GenreWhereUniqueInput;
	update?: Ichinook_GenreUpdateWithoutTrackInput;
}

export interface Ichinook_MediaTypeUpdateWithoutTrackInput {
	Name?: Ichinook_NullableStringFieldUpdateOperationsInput;
}

export interface Ichinook_MediaTypeUpsertWithoutTrackInput {
	update: Ichinook_MediaTypeUpdateWithoutTrackInput;
	create: Ichinook_MediaTypeCreateWithoutTrackInput;
}

export interface Ichinook_MediaTypeUpdateOneRequiredWithoutTrackInput {
	create?: Ichinook_MediaTypeCreateWithoutTrackInput;
	connectOrCreate?: Ichinook_MediaTypeCreateOrConnectWithoutTrackInput;
	upsert?: Ichinook_MediaTypeUpsertWithoutTrackInput;
	connect?: Ichinook_MediaTypeWhereUniqueInput;
	update?: Ichinook_MediaTypeUpdateWithoutTrackInput;
}

export interface Ichinook_DateTimeFieldUpdateOperationsInput {
	set?: string;
}

export interface Ichinook_NullableDateTimeFieldUpdateOperationsInput {
	set?: string;
}

export interface Ichinook_AlbumUpdateWithoutTrackInput {
	Title?: Ichinook_StringFieldUpdateOperationsInput;
	Artist?: Ichinook_ArtistUpdateOneRequiredWithoutAlbumInput;
}

export interface Ichinook_AlbumUpsertWithoutTrackInput {
	update: Ichinook_AlbumUpdateWithoutTrackInput;
	create: Ichinook_AlbumCreateWithoutTrackInput;
}

export interface Ichinook_AlbumUpdateOneWithoutTrackInput {
	create?: Ichinook_AlbumCreateWithoutTrackInput;
	connectOrCreate?: Ichinook_AlbumCreateOrConnectWithoutTrackInput;
	upsert?: Ichinook_AlbumUpsertWithoutTrackInput;
	disconnect?: boolean;
	delete?: boolean;
	connect?: Ichinook_AlbumWhereUniqueInput;
	update?: Ichinook_AlbumUpdateWithoutTrackInput;
}

export interface Ichinook_PlaylistUpdateWithoutPlaylistTrackInput {
	Name?: Ichinook_NullableStringFieldUpdateOperationsInput;
}

export interface Ichinook_PlaylistUpsertWithoutPlaylistTrackInput {
	update: Ichinook_PlaylistUpdateWithoutPlaylistTrackInput;
	create: Ichinook_PlaylistCreateWithoutPlaylistTrackInput;
}

export interface Ichinook_PlaylistUpdateOneRequiredWithoutPlaylistTrackInput {
	create?: Ichinook_PlaylistCreateWithoutPlaylistTrackInput;
	connectOrCreate?: Ichinook_PlaylistCreateOrConnectWithoutPlaylistTrackInput;
	upsert?: Ichinook_PlaylistUpsertWithoutPlaylistTrackInput;
	connect?: Ichinook_PlaylistWhereUniqueInput;
	update?: Ichinook_PlaylistUpdateWithoutPlaylistTrackInput;
}

export interface Ichinook_PlaylistTrackUpdateWithoutTrackInput {
	Playlist?: Ichinook_PlaylistUpdateOneRequiredWithoutPlaylistTrackInput;
}

export interface Ichinook_PlaylistTrackUpsertWithWhereUniqueWithoutTrackInput {
	where: Ichinook_PlaylistTrackWhereUniqueInput;
	update: Ichinook_PlaylistTrackUpdateWithoutTrackInput;
	create: Ichinook_PlaylistTrackCreateWithoutTrackInput;
}

export interface Ichinook_PlaylistTrackUpdateWithWhereUniqueWithoutTrackInput {
	where: Ichinook_PlaylistTrackWhereUniqueInput;
	data: Ichinook_PlaylistTrackUpdateWithoutTrackInput;
}

export interface Ichinook_PlaylistTrackScalarWhereInput {
	AND?: Ichinook_PlaylistTrackScalarWhereInput;
	OR?: Ichinook_PlaylistTrackScalarWhereInput[];
	NOT?: Ichinook_PlaylistTrackScalarWhereInput;
	PlaylistId?: Ichinook_IntFilter;
	TrackId?: Ichinook_IntFilter;
}

export interface Ichinook_PlaylistTrackUpdateManyWithWhereWithoutTrackInput {
	where: Ichinook_PlaylistTrackScalarWhereInput;
}

export interface Ichinook_PlaylistTrackUpdateManyWithoutTrackInput {
	create?: Ichinook_PlaylistTrackCreateWithoutTrackInput;
	connectOrCreate?: Ichinook_PlaylistTrackCreateOrConnectWithoutTrackInput;
	upsert?: Ichinook_PlaylistTrackUpsertWithWhereUniqueWithoutTrackInput;
	set?: Ichinook_PlaylistTrackWhereUniqueInput;
	disconnect?: Ichinook_PlaylistTrackWhereUniqueInput;
	delete?: Ichinook_PlaylistTrackWhereUniqueInput;
	connect?: Ichinook_PlaylistTrackWhereUniqueInput;
	update?: Ichinook_PlaylistTrackUpdateWithWhereUniqueWithoutTrackInput;
	updateMany?: Ichinook_PlaylistTrackUpdateManyWithWhereWithoutTrackInput;
	deleteMany?: Ichinook_PlaylistTrackScalarWhereInput;
}

export interface Ichinook_TrackUpdateWithoutInvoiceLineInput {
	Name?: Ichinook_StringFieldUpdateOperationsInput;
	Composer?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Milliseconds?: Ichinook_IntFieldUpdateOperationsInput;
	String?: Ichinook_NullableIntFieldUpdateOperationsInput;
	UnitPrice?: Ichinook_DecimalFieldUpdateOperationsInput;
	Album?: Ichinook_AlbumUpdateOneWithoutTrackInput;
	Genre?: Ichinook_GenreUpdateOneWithoutTrackInput;
	MediaType?: Ichinook_MediaTypeUpdateOneRequiredWithoutTrackInput;
	PlaylistTrack?: Ichinook_PlaylistTrackUpdateManyWithoutTrackInput;
}

export interface Ichinook_TrackUpsertWithoutInvoiceLineInput {
	update: Ichinook_TrackUpdateWithoutInvoiceLineInput;
	create: Ichinook_TrackCreateWithoutInvoiceLineInput;
}

export interface Ichinook_TrackUpdateOneRequiredWithoutInvoiceLineInput {
	create?: Ichinook_TrackCreateWithoutInvoiceLineInput;
	connectOrCreate?: Ichinook_TrackCreateOrConnectWithoutInvoiceLineInput;
	upsert?: Ichinook_TrackUpsertWithoutInvoiceLineInput;
	connect?: Ichinook_TrackWhereUniqueInput;
	update?: Ichinook_TrackUpdateWithoutInvoiceLineInput;
}

export interface Ichinook_InvoiceLineUpdateWithoutInvoiceInput {
	UnitPrice?: Ichinook_DecimalFieldUpdateOperationsInput;
	Quantity?: Ichinook_IntFieldUpdateOperationsInput;
	Track?: Ichinook_TrackUpdateOneRequiredWithoutInvoiceLineInput;
}

export interface Ichinook_InvoiceLineUpsertWithWhereUniqueWithoutInvoiceInput {
	where: Ichinook_InvoiceLineWhereUniqueInput;
	update: Ichinook_InvoiceLineUpdateWithoutInvoiceInput;
	create: Ichinook_InvoiceLineCreateWithoutInvoiceInput;
}

export interface Ichinook_InvoiceLineUpdateWithWhereUniqueWithoutInvoiceInput {
	where: Ichinook_InvoiceLineWhereUniqueInput;
	data: Ichinook_InvoiceLineUpdateWithoutInvoiceInput;
}

export interface Ichinook_InvoiceLineScalarWhereInput {
	AND?: Ichinook_InvoiceLineScalarWhereInput;
	OR?: Ichinook_InvoiceLineScalarWhereInput[];
	NOT?: Ichinook_InvoiceLineScalarWhereInput;
	InvoiceLineId?: Ichinook_IntFilter;
	InvoiceId?: Ichinook_IntFilter;
	TrackId?: Ichinook_IntFilter;
	UnitPrice?: Ichinook_DecimalFilter;
	Quantity?: Ichinook_IntFilter;
}

export interface Ichinook_InvoiceLineUpdateManyMutationInput {
	UnitPrice?: Ichinook_DecimalFieldUpdateOperationsInput;
	Quantity?: Ichinook_IntFieldUpdateOperationsInput;
}

export interface Ichinook_InvoiceLineUpdateManyWithWhereWithoutInvoiceInput {
	where: Ichinook_InvoiceLineScalarWhereInput;
	data: Ichinook_InvoiceLineUpdateManyMutationInput;
}

export interface Ichinook_InvoiceLineUpdateManyWithoutInvoiceInput {
	create?: Ichinook_InvoiceLineCreateWithoutInvoiceInput;
	connectOrCreate?: Ichinook_InvoiceLineCreateOrConnectWithoutInvoiceInput;
	upsert?: Ichinook_InvoiceLineUpsertWithWhereUniqueWithoutInvoiceInput;
	set?: Ichinook_InvoiceLineWhereUniqueInput;
	disconnect?: Ichinook_InvoiceLineWhereUniqueInput;
	delete?: Ichinook_InvoiceLineWhereUniqueInput;
	connect?: Ichinook_InvoiceLineWhereUniqueInput;
	update?: Ichinook_InvoiceLineUpdateWithWhereUniqueWithoutInvoiceInput;
	updateMany?: Ichinook_InvoiceLineUpdateManyWithWhereWithoutInvoiceInput;
	deleteMany?: Ichinook_InvoiceLineScalarWhereInput;
}

export interface Ichinook_InvoiceUpdateWithoutCustomerInput {
	InvoiceDate?: Ichinook_DateTimeFieldUpdateOperationsInput;
	BillingAddress?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BillingCity?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BillingState?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BillingCountry?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BillingPostalCode?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Total?: Ichinook_DecimalFieldUpdateOperationsInput;
	InvoiceLine?: Ichinook_InvoiceLineUpdateManyWithoutInvoiceInput;
}

export interface Ichinook_InvoiceUpsertWithWhereUniqueWithoutCustomerInput {
	where: Ichinook_InvoiceWhereUniqueInput;
	update: Ichinook_InvoiceUpdateWithoutCustomerInput;
	create: Ichinook_InvoiceCreateWithoutCustomerInput;
}

export interface Ichinook_InvoiceUpdateWithWhereUniqueWithoutCustomerInput {
	where: Ichinook_InvoiceWhereUniqueInput;
	data: Ichinook_InvoiceUpdateWithoutCustomerInput;
}

export interface Ichinook_InvoiceScalarWhereInput {
	AND?: Ichinook_InvoiceScalarWhereInput;
	OR?: Ichinook_InvoiceScalarWhereInput[];
	NOT?: Ichinook_InvoiceScalarWhereInput;
	InvoiceId?: Ichinook_IntFilter;
	CustomerId?: Ichinook_IntFilter;
	InvoiceDate?: Ichinook_DateTimeFilter;
	BillingAddress?: Ichinook_StringNullableFilter;
	BillingCity?: Ichinook_StringNullableFilter;
	BillingState?: Ichinook_StringNullableFilter;
	BillingCountry?: Ichinook_StringNullableFilter;
	BillingPostalCode?: Ichinook_StringNullableFilter;
	Total?: Ichinook_DecimalFilter;
}

export interface Ichinook_InvoiceUpdateManyMutationInput {
	InvoiceDate?: Ichinook_DateTimeFieldUpdateOperationsInput;
	BillingAddress?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BillingCity?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BillingState?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BillingCountry?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BillingPostalCode?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Total?: Ichinook_DecimalFieldUpdateOperationsInput;
}

export interface Ichinook_InvoiceUpdateManyWithWhereWithoutCustomerInput {
	where: Ichinook_InvoiceScalarWhereInput;
	data: Ichinook_InvoiceUpdateManyMutationInput;
}

export interface Ichinook_InvoiceUpdateManyWithoutCustomerInput {
	create?: Ichinook_InvoiceCreateWithoutCustomerInput;
	connectOrCreate?: Ichinook_InvoiceCreateOrConnectWithoutCustomerInput;
	upsert?: Ichinook_InvoiceUpsertWithWhereUniqueWithoutCustomerInput;
	set?: Ichinook_InvoiceWhereUniqueInput;
	disconnect?: Ichinook_InvoiceWhereUniqueInput;
	delete?: Ichinook_InvoiceWhereUniqueInput;
	connect?: Ichinook_InvoiceWhereUniqueInput;
	update?: Ichinook_InvoiceUpdateWithWhereUniqueWithoutCustomerInput;
	updateMany?: Ichinook_InvoiceUpdateManyWithWhereWithoutCustomerInput;
	deleteMany?: Ichinook_InvoiceScalarWhereInput;
}

export interface Ichinook_CustomerUpdateWithoutEmployeeInput {
	FirstName?: Ichinook_StringFieldUpdateOperationsInput;
	LastName?: Ichinook_StringFieldUpdateOperationsInput;
	Company?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Address?: Ichinook_NullableStringFieldUpdateOperationsInput;
	City?: Ichinook_NullableStringFieldUpdateOperationsInput;
	State?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Country?: Ichinook_NullableStringFieldUpdateOperationsInput;
	PostalCode?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Phone?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Fax?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Email?: Ichinook_StringFieldUpdateOperationsInput;
	Invoice?: Ichinook_InvoiceUpdateManyWithoutCustomerInput;
}

export interface Ichinook_CustomerUpsertWithWhereUniqueWithoutEmployeeInput {
	where: Ichinook_CustomerWhereUniqueInput;
	update: Ichinook_CustomerUpdateWithoutEmployeeInput;
	create: Ichinook_CustomerCreateWithoutEmployeeInput;
}

export interface Ichinook_CustomerUpdateWithWhereUniqueWithoutEmployeeInput {
	where: Ichinook_CustomerWhereUniqueInput;
	data: Ichinook_CustomerUpdateWithoutEmployeeInput;
}

export interface Ichinook_CustomerScalarWhereInput {
	AND?: Ichinook_CustomerScalarWhereInput;
	OR?: Ichinook_CustomerScalarWhereInput[];
	NOT?: Ichinook_CustomerScalarWhereInput;
	CustomerId?: Ichinook_IntFilter;
	FirstName?: Ichinook_StringFilter;
	LastName?: Ichinook_StringFilter;
	Company?: Ichinook_StringNullableFilter;
	Address?: Ichinook_StringNullableFilter;
	City?: Ichinook_StringNullableFilter;
	State?: Ichinook_StringNullableFilter;
	Country?: Ichinook_StringNullableFilter;
	PostalCode?: Ichinook_StringNullableFilter;
	Phone?: Ichinook_StringNullableFilter;
	Fax?: Ichinook_StringNullableFilter;
	Email?: Ichinook_StringFilter;
	SupportRepId?: Ichinook_IntNullableFilter;
}

export interface Ichinook_CustomerUpdateManyMutationInput {
	FirstName?: Ichinook_StringFieldUpdateOperationsInput;
	LastName?: Ichinook_StringFieldUpdateOperationsInput;
	Company?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Address?: Ichinook_NullableStringFieldUpdateOperationsInput;
	City?: Ichinook_NullableStringFieldUpdateOperationsInput;
	State?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Country?: Ichinook_NullableStringFieldUpdateOperationsInput;
	PostalCode?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Phone?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Fax?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Email?: Ichinook_StringFieldUpdateOperationsInput;
}

export interface Ichinook_CustomerUpdateManyWithWhereWithoutEmployeeInput {
	where: Ichinook_CustomerScalarWhereInput;
	data: Ichinook_CustomerUpdateManyMutationInput;
}

export interface Ichinook_CustomerUpdateManyWithoutEmployeeInput {
	create?: Ichinook_CustomerCreateWithoutEmployeeInput;
	connectOrCreate?: Ichinook_CustomerCreateOrConnectWithoutEmployeeInput;
	upsert?: Ichinook_CustomerUpsertWithWhereUniqueWithoutEmployeeInput;
	set?: Ichinook_CustomerWhereUniqueInput;
	disconnect?: Ichinook_CustomerWhereUniqueInput;
	delete?: Ichinook_CustomerWhereUniqueInput;
	connect?: Ichinook_CustomerWhereUniqueInput;
	update?: Ichinook_CustomerUpdateWithWhereUniqueWithoutEmployeeInput;
	updateMany?: Ichinook_CustomerUpdateManyWithWhereWithoutEmployeeInput;
	deleteMany?: Ichinook_CustomerScalarWhereInput;
}

export interface Ichinook_EmployeeUpdateWithoutOther_EmployeeInput {
	LastName?: Ichinook_StringFieldUpdateOperationsInput;
	FirstName?: Ichinook_StringFieldUpdateOperationsInput;
	Title?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BirthDate?: Ichinook_NullableDateTimeFieldUpdateOperationsInput;
	HireDate?: Ichinook_NullableDateTimeFieldUpdateOperationsInput;
	Address?: Ichinook_NullableStringFieldUpdateOperationsInput;
	City?: Ichinook_NullableStringFieldUpdateOperationsInput;
	State?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Country?: Ichinook_NullableStringFieldUpdateOperationsInput;
	PostalCode?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Phone?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Fax?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Email?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Employee?: Ichinook_EmployeeUpdateOneWithoutOther_EmployeeInput;
	Customer?: Ichinook_CustomerUpdateManyWithoutEmployeeInput;
}

export interface Ichinook_EmployeeUpsertWithoutOther_EmployeeInput {
	update: Ichinook_EmployeeUpdateWithoutOther_EmployeeInput;
	create: Ichinook_EmployeeCreateWithoutOther_EmployeeInput;
}

export interface Ichinook_EmployeeUpdateOneWithoutOther_EmployeeInput {
	create?: Ichinook_EmployeeCreateWithoutOther_EmployeeInput;
	connectOrCreate?: Ichinook_EmployeeCreateOrConnectWithoutOther_EmployeeInput;
	upsert?: Ichinook_EmployeeUpsertWithoutOther_EmployeeInput;
	disconnect?: boolean;
	delete?: boolean;
	connect?: Ichinook_EmployeeWhereUniqueInput;
	update?: Ichinook_EmployeeUpdateWithoutOther_EmployeeInput;
}

export interface Ichinook_EmployeeUpdateWithoutEmployeeInput {
	LastName?: Ichinook_StringFieldUpdateOperationsInput;
	FirstName?: Ichinook_StringFieldUpdateOperationsInput;
	Title?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BirthDate?: Ichinook_NullableDateTimeFieldUpdateOperationsInput;
	HireDate?: Ichinook_NullableDateTimeFieldUpdateOperationsInput;
	Address?: Ichinook_NullableStringFieldUpdateOperationsInput;
	City?: Ichinook_NullableStringFieldUpdateOperationsInput;
	State?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Country?: Ichinook_NullableStringFieldUpdateOperationsInput;
	PostalCode?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Phone?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Fax?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Email?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Customer?: Ichinook_CustomerUpdateManyWithoutEmployeeInput;
	other_Employee?: Ichinook_EmployeeUpdateManyWithoutEmployeeInput;
}

export interface Ichinook_EmployeeUpsertWithWhereUniqueWithoutEmployeeInput {
	where: Ichinook_EmployeeWhereUniqueInput;
	update: Ichinook_EmployeeUpdateWithoutEmployeeInput;
	create: Ichinook_EmployeeCreateWithoutEmployeeInput;
}

export interface Ichinook_EmployeeUpdateWithWhereUniqueWithoutEmployeeInput {
	where: Ichinook_EmployeeWhereUniqueInput;
	data: Ichinook_EmployeeUpdateWithoutEmployeeInput;
}

export interface Ichinook_EmployeeScalarWhereInput {
	AND?: Ichinook_EmployeeScalarWhereInput;
	OR?: Ichinook_EmployeeScalarWhereInput[];
	NOT?: Ichinook_EmployeeScalarWhereInput;
	EmployeeId?: Ichinook_IntFilter;
	LastName?: Ichinook_StringFilter;
	FirstName?: Ichinook_StringFilter;
	Title?: Ichinook_StringNullableFilter;
	ReportsTo?: Ichinook_IntNullableFilter;
	BirthDate?: Ichinook_DateTimeNullableFilter;
	HireDate?: Ichinook_DateTimeNullableFilter;
	Address?: Ichinook_StringNullableFilter;
	City?: Ichinook_StringNullableFilter;
	State?: Ichinook_StringNullableFilter;
	Country?: Ichinook_StringNullableFilter;
	PostalCode?: Ichinook_StringNullableFilter;
	Phone?: Ichinook_StringNullableFilter;
	Fax?: Ichinook_StringNullableFilter;
	Email?: Ichinook_StringNullableFilter;
}

export interface Ichinook_EmployeeUpdateManyMutationInput {
	LastName?: Ichinook_StringFieldUpdateOperationsInput;
	FirstName?: Ichinook_StringFieldUpdateOperationsInput;
	Title?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BirthDate?: Ichinook_NullableDateTimeFieldUpdateOperationsInput;
	HireDate?: Ichinook_NullableDateTimeFieldUpdateOperationsInput;
	Address?: Ichinook_NullableStringFieldUpdateOperationsInput;
	City?: Ichinook_NullableStringFieldUpdateOperationsInput;
	State?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Country?: Ichinook_NullableStringFieldUpdateOperationsInput;
	PostalCode?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Phone?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Fax?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Email?: Ichinook_NullableStringFieldUpdateOperationsInput;
}

export interface Ichinook_EmployeeUpdateManyWithWhereWithoutEmployeeInput {
	where: Ichinook_EmployeeScalarWhereInput;
	data: Ichinook_EmployeeUpdateManyMutationInput;
}

export interface Ichinook_EmployeeUpdateManyWithoutEmployeeInput {
	create?: Ichinook_EmployeeCreateWithoutEmployeeInput;
	connectOrCreate?: Ichinook_EmployeeCreateOrConnectWithoutEmployeeInput;
	upsert?: Ichinook_EmployeeUpsertWithWhereUniqueWithoutEmployeeInput;
	set?: Ichinook_EmployeeWhereUniqueInput;
	disconnect?: Ichinook_EmployeeWhereUniqueInput;
	delete?: Ichinook_EmployeeWhereUniqueInput;
	connect?: Ichinook_EmployeeWhereUniqueInput;
	update?: Ichinook_EmployeeUpdateWithWhereUniqueWithoutEmployeeInput;
	updateMany?: Ichinook_EmployeeUpdateManyWithWhereWithoutEmployeeInput;
	deleteMany?: Ichinook_EmployeeScalarWhereInput;
}

export interface Ichinook_EmployeeUpdateWithoutCustomerInput {
	LastName?: Ichinook_StringFieldUpdateOperationsInput;
	FirstName?: Ichinook_StringFieldUpdateOperationsInput;
	Title?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BirthDate?: Ichinook_NullableDateTimeFieldUpdateOperationsInput;
	HireDate?: Ichinook_NullableDateTimeFieldUpdateOperationsInput;
	Address?: Ichinook_NullableStringFieldUpdateOperationsInput;
	City?: Ichinook_NullableStringFieldUpdateOperationsInput;
	State?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Country?: Ichinook_NullableStringFieldUpdateOperationsInput;
	PostalCode?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Phone?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Fax?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Email?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Employee?: Ichinook_EmployeeUpdateOneWithoutOther_EmployeeInput;
	other_Employee?: Ichinook_EmployeeUpdateManyWithoutEmployeeInput;
}

export interface Ichinook_EmployeeUpsertWithoutCustomerInput {
	update: Ichinook_EmployeeUpdateWithoutCustomerInput;
	create: Ichinook_EmployeeCreateWithoutCustomerInput;
}

export interface Ichinook_EmployeeUpdateOneWithoutCustomerInput {
	create?: Ichinook_EmployeeCreateWithoutCustomerInput;
	connectOrCreate?: Ichinook_EmployeeCreateOrConnectWithoutCustomerInput;
	upsert?: Ichinook_EmployeeUpsertWithoutCustomerInput;
	disconnect?: boolean;
	delete?: boolean;
	connect?: Ichinook_EmployeeWhereUniqueInput;
	update?: Ichinook_EmployeeUpdateWithoutCustomerInput;
}

export interface Ichinook_CustomerUpdateWithoutInvoiceInput {
	FirstName?: Ichinook_StringFieldUpdateOperationsInput;
	LastName?: Ichinook_StringFieldUpdateOperationsInput;
	Company?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Address?: Ichinook_NullableStringFieldUpdateOperationsInput;
	City?: Ichinook_NullableStringFieldUpdateOperationsInput;
	State?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Country?: Ichinook_NullableStringFieldUpdateOperationsInput;
	PostalCode?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Phone?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Fax?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Email?: Ichinook_StringFieldUpdateOperationsInput;
	Employee?: Ichinook_EmployeeUpdateOneWithoutCustomerInput;
}

export interface Ichinook_CustomerUpsertWithoutInvoiceInput {
	update: Ichinook_CustomerUpdateWithoutInvoiceInput;
	create: Ichinook_CustomerCreateWithoutInvoiceInput;
}

export interface Ichinook_CustomerUpdateOneRequiredWithoutInvoiceInput {
	create?: Ichinook_CustomerCreateWithoutInvoiceInput;
	connectOrCreate?: Ichinook_CustomerCreateOrConnectWithoutInvoiceInput;
	upsert?: Ichinook_CustomerUpsertWithoutInvoiceInput;
	connect?: Ichinook_CustomerWhereUniqueInput;
	update?: Ichinook_CustomerUpdateWithoutInvoiceInput;
}

export interface Ichinook_InvoiceUpdateWithoutInvoiceLineInput {
	InvoiceDate?: Ichinook_DateTimeFieldUpdateOperationsInput;
	BillingAddress?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BillingCity?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BillingState?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BillingCountry?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BillingPostalCode?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Total?: Ichinook_DecimalFieldUpdateOperationsInput;
	Customer?: Ichinook_CustomerUpdateOneRequiredWithoutInvoiceInput;
}

export interface Ichinook_InvoiceUpsertWithoutInvoiceLineInput {
	update: Ichinook_InvoiceUpdateWithoutInvoiceLineInput;
	create: Ichinook_InvoiceCreateWithoutInvoiceLineInput;
}

export interface Ichinook_InvoiceUpdateOneRequiredWithoutInvoiceLineInput {
	create?: Ichinook_InvoiceCreateWithoutInvoiceLineInput;
	connectOrCreate?: Ichinook_InvoiceCreateOrConnectWithoutInvoiceLineInput;
	upsert?: Ichinook_InvoiceUpsertWithoutInvoiceLineInput;
	connect?: Ichinook_InvoiceWhereUniqueInput;
	update?: Ichinook_InvoiceUpdateWithoutInvoiceLineInput;
}

export interface Ichinook_InvoiceLineUpdateWithoutTrackInput {
	UnitPrice?: Ichinook_DecimalFieldUpdateOperationsInput;
	Quantity?: Ichinook_IntFieldUpdateOperationsInput;
	Invoice?: Ichinook_InvoiceUpdateOneRequiredWithoutInvoiceLineInput;
}

export interface Ichinook_InvoiceLineUpsertWithWhereUniqueWithoutTrackInput {
	where: Ichinook_InvoiceLineWhereUniqueInput;
	update: Ichinook_InvoiceLineUpdateWithoutTrackInput;
	create: Ichinook_InvoiceLineCreateWithoutTrackInput;
}

export interface Ichinook_InvoiceLineUpdateWithWhereUniqueWithoutTrackInput {
	where: Ichinook_InvoiceLineWhereUniqueInput;
	data: Ichinook_InvoiceLineUpdateWithoutTrackInput;
}

export interface Ichinook_InvoiceLineUpdateManyWithWhereWithoutTrackInput {
	where: Ichinook_InvoiceLineScalarWhereInput;
	data: Ichinook_InvoiceLineUpdateManyMutationInput;
}

export interface Ichinook_InvoiceLineUpdateManyWithoutTrackInput {
	create?: Ichinook_InvoiceLineCreateWithoutTrackInput;
	connectOrCreate?: Ichinook_InvoiceLineCreateOrConnectWithoutTrackInput;
	upsert?: Ichinook_InvoiceLineUpsertWithWhereUniqueWithoutTrackInput;
	set?: Ichinook_InvoiceLineWhereUniqueInput;
	disconnect?: Ichinook_InvoiceLineWhereUniqueInput;
	delete?: Ichinook_InvoiceLineWhereUniqueInput;
	connect?: Ichinook_InvoiceLineWhereUniqueInput;
	update?: Ichinook_InvoiceLineUpdateWithWhereUniqueWithoutTrackInput;
	updateMany?: Ichinook_InvoiceLineUpdateManyWithWhereWithoutTrackInput;
	deleteMany?: Ichinook_InvoiceLineScalarWhereInput;
}

export interface Ichinook_TrackUpdateWithoutAlbumInput {
	Name?: Ichinook_StringFieldUpdateOperationsInput;
	Composer?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Milliseconds?: Ichinook_IntFieldUpdateOperationsInput;
	String?: Ichinook_NullableIntFieldUpdateOperationsInput;
	UnitPrice?: Ichinook_DecimalFieldUpdateOperationsInput;
	Genre?: Ichinook_GenreUpdateOneWithoutTrackInput;
	MediaType?: Ichinook_MediaTypeUpdateOneRequiredWithoutTrackInput;
	InvoiceLine?: Ichinook_InvoiceLineUpdateManyWithoutTrackInput;
	PlaylistTrack?: Ichinook_PlaylistTrackUpdateManyWithoutTrackInput;
}

export interface Ichinook_TrackUpsertWithWhereUniqueWithoutAlbumInput {
	where: Ichinook_TrackWhereUniqueInput;
	update: Ichinook_TrackUpdateWithoutAlbumInput;
	create: Ichinook_TrackCreateWithoutAlbumInput;
}

export interface Ichinook_TrackUpdateWithWhereUniqueWithoutAlbumInput {
	where: Ichinook_TrackWhereUniqueInput;
	data: Ichinook_TrackUpdateWithoutAlbumInput;
}

export interface Ichinook_TrackScalarWhereInput {
	AND?: Ichinook_TrackScalarWhereInput;
	OR?: Ichinook_TrackScalarWhereInput[];
	NOT?: Ichinook_TrackScalarWhereInput;
	TrackId?: Ichinook_IntFilter;
	Name?: Ichinook_StringFilter;
	AlbumId?: Ichinook_IntNullableFilter;
	MediaTypeId?: Ichinook_IntFilter;
	GenreId?: Ichinook_IntNullableFilter;
	Composer?: Ichinook_StringNullableFilter;
	Milliseconds?: Ichinook_IntFilter;
	String?: Ichinook_IntNullableFilter;
	UnitPrice?: Ichinook_DecimalFilter;
}

export interface Ichinook_TrackUpdateManyMutationInput {
	Name?: Ichinook_StringFieldUpdateOperationsInput;
	Composer?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Milliseconds?: Ichinook_IntFieldUpdateOperationsInput;
	String?: Ichinook_NullableIntFieldUpdateOperationsInput;
	UnitPrice?: Ichinook_DecimalFieldUpdateOperationsInput;
}

export interface Ichinook_TrackUpdateManyWithWhereWithoutAlbumInput {
	where: Ichinook_TrackScalarWhereInput;
	data: Ichinook_TrackUpdateManyMutationInput;
}

export interface Ichinook_TrackUpdateManyWithoutAlbumInput {
	create?: Ichinook_TrackCreateWithoutAlbumInput;
	connectOrCreate?: Ichinook_TrackCreateOrConnectWithoutAlbumInput;
	upsert?: Ichinook_TrackUpsertWithWhereUniqueWithoutAlbumInput;
	set?: Ichinook_TrackWhereUniqueInput;
	disconnect?: Ichinook_TrackWhereUniqueInput;
	delete?: Ichinook_TrackWhereUniqueInput;
	connect?: Ichinook_TrackWhereUniqueInput;
	update?: Ichinook_TrackUpdateWithWhereUniqueWithoutAlbumInput;
	updateMany?: Ichinook_TrackUpdateManyWithWhereWithoutAlbumInput;
	deleteMany?: Ichinook_TrackScalarWhereInput;
}

export interface Ichinook_AlbumUpdateInput {
	Title?: Ichinook_StringFieldUpdateOperationsInput;
	Artist?: Ichinook_ArtistUpdateOneRequiredWithoutAlbumInput;
	Track?: Ichinook_TrackUpdateManyWithoutAlbumInput;
}

export interface Ichinook_AlbumUpdateManyMutationInput {
	Title?: Ichinook_StringFieldUpdateOperationsInput;
}

export interface Ichinook_AffectedRowsOutput {
	readonly __typename: 'chinook_AffectedRowsOutput';
	readonly count: number;
	readonly _join: IQuery;
}

export interface Ichinook_AlbumCreateWithoutArtistInput {
	Title: string;
	Track?: Ichinook_TrackCreateNestedManyWithoutAlbumInput;
}

export interface Ichinook_AlbumCreateOrConnectWithoutArtistInput {
	where: Ichinook_AlbumWhereUniqueInput;
	create: Ichinook_AlbumCreateWithoutArtistInput;
}

export interface Ichinook_AlbumCreateNestedManyWithoutArtistInput {
	create?: Ichinook_AlbumCreateWithoutArtistInput;
	connectOrCreate?: Ichinook_AlbumCreateOrConnectWithoutArtistInput;
	connect?: Ichinook_AlbumWhereUniqueInput;
}

export interface Ichinook_ArtistCreateInput {
	Name?: string;
	Album?: Ichinook_AlbumCreateNestedManyWithoutArtistInput;
}

export interface Ichinook_AlbumUpdateWithoutArtistInput {
	Title?: Ichinook_StringFieldUpdateOperationsInput;
	Track?: Ichinook_TrackUpdateManyWithoutAlbumInput;
}

export interface Ichinook_AlbumUpsertWithWhereUniqueWithoutArtistInput {
	where: Ichinook_AlbumWhereUniqueInput;
	update: Ichinook_AlbumUpdateWithoutArtistInput;
	create: Ichinook_AlbumCreateWithoutArtistInput;
}

export interface Ichinook_AlbumUpdateWithWhereUniqueWithoutArtistInput {
	where: Ichinook_AlbumWhereUniqueInput;
	data: Ichinook_AlbumUpdateWithoutArtistInput;
}

export interface Ichinook_AlbumScalarWhereInput {
	AND?: Ichinook_AlbumScalarWhereInput;
	OR?: Ichinook_AlbumScalarWhereInput[];
	NOT?: Ichinook_AlbumScalarWhereInput;
	AlbumId?: Ichinook_IntFilter;
	Title?: Ichinook_StringFilter;
	ArtistId?: Ichinook_IntFilter;
}

export interface Ichinook_AlbumUpdateManyWithWhereWithoutArtistInput {
	where: Ichinook_AlbumScalarWhereInput;
	data: Ichinook_AlbumUpdateManyMutationInput;
}

export interface Ichinook_AlbumUpdateManyWithoutArtistInput {
	create?: Ichinook_AlbumCreateWithoutArtistInput;
	connectOrCreate?: Ichinook_AlbumCreateOrConnectWithoutArtistInput;
	upsert?: Ichinook_AlbumUpsertWithWhereUniqueWithoutArtistInput;
	set?: Ichinook_AlbumWhereUniqueInput;
	disconnect?: Ichinook_AlbumWhereUniqueInput;
	delete?: Ichinook_AlbumWhereUniqueInput;
	connect?: Ichinook_AlbumWhereUniqueInput;
	update?: Ichinook_AlbumUpdateWithWhereUniqueWithoutArtistInput;
	updateMany?: Ichinook_AlbumUpdateManyWithWhereWithoutArtistInput;
	deleteMany?: Ichinook_AlbumScalarWhereInput;
}

export interface Ichinook_ArtistUpdateInput {
	Name?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Album?: Ichinook_AlbumUpdateManyWithoutArtistInput;
}

export interface Ichinook_ArtistUpdateManyMutationInput {
	Name?: Ichinook_NullableStringFieldUpdateOperationsInput;
}

export interface Ichinook_CustomerCreateInput {
	FirstName: string;
	LastName: string;
	Company?: string;
	Address?: string;
	City?: string;
	State?: string;
	Country?: string;
	PostalCode?: string;
	Phone?: string;
	Fax?: string;
	Email: string;
	Employee?: Ichinook_EmployeeCreateNestedOneWithoutCustomerInput;
	Invoice?: Ichinook_InvoiceCreateNestedManyWithoutCustomerInput;
}

export interface Ichinook_CustomerUpdateInput {
	FirstName?: Ichinook_StringFieldUpdateOperationsInput;
	LastName?: Ichinook_StringFieldUpdateOperationsInput;
	Company?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Address?: Ichinook_NullableStringFieldUpdateOperationsInput;
	City?: Ichinook_NullableStringFieldUpdateOperationsInput;
	State?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Country?: Ichinook_NullableStringFieldUpdateOperationsInput;
	PostalCode?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Phone?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Fax?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Email?: Ichinook_StringFieldUpdateOperationsInput;
	Employee?: Ichinook_EmployeeUpdateOneWithoutCustomerInput;
	Invoice?: Ichinook_InvoiceUpdateManyWithoutCustomerInput;
}

export interface Ichinook_EmployeeCreateInput {
	LastName: string;
	FirstName: string;
	Title?: string;
	BirthDate?: string;
	HireDate?: string;
	Address?: string;
	City?: string;
	State?: string;
	Country?: string;
	PostalCode?: string;
	Phone?: string;
	Fax?: string;
	Email?: string;
	Employee?: Ichinook_EmployeeCreateNestedOneWithoutOther_EmployeeInput;
	Customer?: Ichinook_CustomerCreateNestedManyWithoutEmployeeInput;
	other_Employee?: Ichinook_EmployeeCreateNestedManyWithoutEmployeeInput;
}

export interface Ichinook_EmployeeUpdateInput {
	LastName?: Ichinook_StringFieldUpdateOperationsInput;
	FirstName?: Ichinook_StringFieldUpdateOperationsInput;
	Title?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BirthDate?: Ichinook_NullableDateTimeFieldUpdateOperationsInput;
	HireDate?: Ichinook_NullableDateTimeFieldUpdateOperationsInput;
	Address?: Ichinook_NullableStringFieldUpdateOperationsInput;
	City?: Ichinook_NullableStringFieldUpdateOperationsInput;
	State?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Country?: Ichinook_NullableStringFieldUpdateOperationsInput;
	PostalCode?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Phone?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Fax?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Email?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Employee?: Ichinook_EmployeeUpdateOneWithoutOther_EmployeeInput;
	Customer?: Ichinook_CustomerUpdateManyWithoutEmployeeInput;
	other_Employee?: Ichinook_EmployeeUpdateManyWithoutEmployeeInput;
}

export interface Ichinook_TrackCreateWithoutGenreInput {
	Name: string;
	Composer?: string;
	Milliseconds: number;
	String?: number;
	UnitPrice: number;
	Album?: Ichinook_AlbumCreateNestedOneWithoutTrackInput;
	MediaType: Ichinook_MediaTypeCreateNestedOneWithoutTrackInput;
	InvoiceLine?: Ichinook_InvoiceLineCreateNestedManyWithoutTrackInput;
	PlaylistTrack?: Ichinook_PlaylistTrackCreateNestedManyWithoutTrackInput;
}

export interface Ichinook_TrackCreateOrConnectWithoutGenreInput {
	where: Ichinook_TrackWhereUniqueInput;
	create: Ichinook_TrackCreateWithoutGenreInput;
}

export interface Ichinook_TrackCreateNestedManyWithoutGenreInput {
	create?: Ichinook_TrackCreateWithoutGenreInput;
	connectOrCreate?: Ichinook_TrackCreateOrConnectWithoutGenreInput;
	connect?: Ichinook_TrackWhereUniqueInput;
}

export interface Ichinook_GenreCreateInput {
	Name?: string;
	Track?: Ichinook_TrackCreateNestedManyWithoutGenreInput;
}

export interface Ichinook_TrackUpdateWithoutGenreInput {
	Name?: Ichinook_StringFieldUpdateOperationsInput;
	Composer?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Milliseconds?: Ichinook_IntFieldUpdateOperationsInput;
	String?: Ichinook_NullableIntFieldUpdateOperationsInput;
	UnitPrice?: Ichinook_DecimalFieldUpdateOperationsInput;
	Album?: Ichinook_AlbumUpdateOneWithoutTrackInput;
	MediaType?: Ichinook_MediaTypeUpdateOneRequiredWithoutTrackInput;
	InvoiceLine?: Ichinook_InvoiceLineUpdateManyWithoutTrackInput;
	PlaylistTrack?: Ichinook_PlaylistTrackUpdateManyWithoutTrackInput;
}

export interface Ichinook_TrackUpsertWithWhereUniqueWithoutGenreInput {
	where: Ichinook_TrackWhereUniqueInput;
	update: Ichinook_TrackUpdateWithoutGenreInput;
	create: Ichinook_TrackCreateWithoutGenreInput;
}

export interface Ichinook_TrackUpdateWithWhereUniqueWithoutGenreInput {
	where: Ichinook_TrackWhereUniqueInput;
	data: Ichinook_TrackUpdateWithoutGenreInput;
}

export interface Ichinook_TrackUpdateManyWithWhereWithoutGenreInput {
	where: Ichinook_TrackScalarWhereInput;
	data: Ichinook_TrackUpdateManyMutationInput;
}

export interface Ichinook_TrackUpdateManyWithoutGenreInput {
	create?: Ichinook_TrackCreateWithoutGenreInput;
	connectOrCreate?: Ichinook_TrackCreateOrConnectWithoutGenreInput;
	upsert?: Ichinook_TrackUpsertWithWhereUniqueWithoutGenreInput;
	set?: Ichinook_TrackWhereUniqueInput;
	disconnect?: Ichinook_TrackWhereUniqueInput;
	delete?: Ichinook_TrackWhereUniqueInput;
	connect?: Ichinook_TrackWhereUniqueInput;
	update?: Ichinook_TrackUpdateWithWhereUniqueWithoutGenreInput;
	updateMany?: Ichinook_TrackUpdateManyWithWhereWithoutGenreInput;
	deleteMany?: Ichinook_TrackScalarWhereInput;
}

export interface Ichinook_GenreUpdateInput {
	Name?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Track?: Ichinook_TrackUpdateManyWithoutGenreInput;
}

export interface Ichinook_GenreUpdateManyMutationInput {
	Name?: Ichinook_NullableStringFieldUpdateOperationsInput;
}

export interface Ichinook_InvoiceCreateInput {
	InvoiceDate: string;
	BillingAddress?: string;
	BillingCity?: string;
	BillingState?: string;
	BillingCountry?: string;
	BillingPostalCode?: string;
	Total: number;
	Customer: Ichinook_CustomerCreateNestedOneWithoutInvoiceInput;
	InvoiceLine?: Ichinook_InvoiceLineCreateNestedManyWithoutInvoiceInput;
}

export interface Ichinook_InvoiceUpdateInput {
	InvoiceDate?: Ichinook_DateTimeFieldUpdateOperationsInput;
	BillingAddress?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BillingCity?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BillingState?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BillingCountry?: Ichinook_NullableStringFieldUpdateOperationsInput;
	BillingPostalCode?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Total?: Ichinook_DecimalFieldUpdateOperationsInput;
	Customer?: Ichinook_CustomerUpdateOneRequiredWithoutInvoiceInput;
	InvoiceLine?: Ichinook_InvoiceLineUpdateManyWithoutInvoiceInput;
}

export interface Ichinook_InvoiceLineCreateInput {
	UnitPrice: number;
	Quantity: number;
	Invoice: Ichinook_InvoiceCreateNestedOneWithoutInvoiceLineInput;
	Track: Ichinook_TrackCreateNestedOneWithoutInvoiceLineInput;
}

export interface Ichinook_InvoiceLineUpdateInput {
	UnitPrice?: Ichinook_DecimalFieldUpdateOperationsInput;
	Quantity?: Ichinook_IntFieldUpdateOperationsInput;
	Invoice?: Ichinook_InvoiceUpdateOneRequiredWithoutInvoiceLineInput;
	Track?: Ichinook_TrackUpdateOneRequiredWithoutInvoiceLineInput;
}

export interface Ichinook_TrackCreateWithoutMediaTypeInput {
	Name: string;
	Composer?: string;
	Milliseconds: number;
	String?: number;
	UnitPrice: number;
	Album?: Ichinook_AlbumCreateNestedOneWithoutTrackInput;
	Genre?: Ichinook_GenreCreateNestedOneWithoutTrackInput;
	InvoiceLine?: Ichinook_InvoiceLineCreateNestedManyWithoutTrackInput;
	PlaylistTrack?: Ichinook_PlaylistTrackCreateNestedManyWithoutTrackInput;
}

export interface Ichinook_TrackCreateOrConnectWithoutMediaTypeInput {
	where: Ichinook_TrackWhereUniqueInput;
	create: Ichinook_TrackCreateWithoutMediaTypeInput;
}

export interface Ichinook_TrackCreateNestedManyWithoutMediaTypeInput {
	create?: Ichinook_TrackCreateWithoutMediaTypeInput;
	connectOrCreate?: Ichinook_TrackCreateOrConnectWithoutMediaTypeInput;
	connect?: Ichinook_TrackWhereUniqueInput;
}

export interface Ichinook_MediaTypeCreateInput {
	Name?: string;
	Track?: Ichinook_TrackCreateNestedManyWithoutMediaTypeInput;
}

export interface Ichinook_TrackUpdateWithoutMediaTypeInput {
	Name?: Ichinook_StringFieldUpdateOperationsInput;
	Composer?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Milliseconds?: Ichinook_IntFieldUpdateOperationsInput;
	String?: Ichinook_NullableIntFieldUpdateOperationsInput;
	UnitPrice?: Ichinook_DecimalFieldUpdateOperationsInput;
	Album?: Ichinook_AlbumUpdateOneWithoutTrackInput;
	Genre?: Ichinook_GenreUpdateOneWithoutTrackInput;
	InvoiceLine?: Ichinook_InvoiceLineUpdateManyWithoutTrackInput;
	PlaylistTrack?: Ichinook_PlaylistTrackUpdateManyWithoutTrackInput;
}

export interface Ichinook_TrackUpsertWithWhereUniqueWithoutMediaTypeInput {
	where: Ichinook_TrackWhereUniqueInput;
	update: Ichinook_TrackUpdateWithoutMediaTypeInput;
	create: Ichinook_TrackCreateWithoutMediaTypeInput;
}

export interface Ichinook_TrackUpdateWithWhereUniqueWithoutMediaTypeInput {
	where: Ichinook_TrackWhereUniqueInput;
	data: Ichinook_TrackUpdateWithoutMediaTypeInput;
}

export interface Ichinook_TrackUpdateManyWithWhereWithoutMediaTypeInput {
	where: Ichinook_TrackScalarWhereInput;
	data: Ichinook_TrackUpdateManyMutationInput;
}

export interface Ichinook_TrackUpdateManyWithoutMediaTypeInput {
	create?: Ichinook_TrackCreateWithoutMediaTypeInput;
	connectOrCreate?: Ichinook_TrackCreateOrConnectWithoutMediaTypeInput;
	upsert?: Ichinook_TrackUpsertWithWhereUniqueWithoutMediaTypeInput;
	set?: Ichinook_TrackWhereUniqueInput;
	disconnect?: Ichinook_TrackWhereUniqueInput;
	delete?: Ichinook_TrackWhereUniqueInput;
	connect?: Ichinook_TrackWhereUniqueInput;
	update?: Ichinook_TrackUpdateWithWhereUniqueWithoutMediaTypeInput;
	updateMany?: Ichinook_TrackUpdateManyWithWhereWithoutMediaTypeInput;
	deleteMany?: Ichinook_TrackScalarWhereInput;
}

export interface Ichinook_MediaTypeUpdateInput {
	Name?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Track?: Ichinook_TrackUpdateManyWithoutMediaTypeInput;
}

export interface Ichinook_MediaTypeUpdateManyMutationInput {
	Name?: Ichinook_NullableStringFieldUpdateOperationsInput;
}

export interface Ichinook_TrackCreateWithoutPlaylistTrackInput {
	Name: string;
	Composer?: string;
	Milliseconds: number;
	String?: number;
	UnitPrice: number;
	Album?: Ichinook_AlbumCreateNestedOneWithoutTrackInput;
	Genre?: Ichinook_GenreCreateNestedOneWithoutTrackInput;
	MediaType: Ichinook_MediaTypeCreateNestedOneWithoutTrackInput;
	InvoiceLine?: Ichinook_InvoiceLineCreateNestedManyWithoutTrackInput;
}

export interface Ichinook_TrackCreateOrConnectWithoutPlaylistTrackInput {
	where: Ichinook_TrackWhereUniqueInput;
	create: Ichinook_TrackCreateWithoutPlaylistTrackInput;
}

export interface Ichinook_TrackCreateNestedOneWithoutPlaylistTrackInput {
	create?: Ichinook_TrackCreateWithoutPlaylistTrackInput;
	connectOrCreate?: Ichinook_TrackCreateOrConnectWithoutPlaylistTrackInput;
	connect?: Ichinook_TrackWhereUniqueInput;
}

export interface Ichinook_PlaylistTrackCreateWithoutPlaylistInput {
	Track: Ichinook_TrackCreateNestedOneWithoutPlaylistTrackInput;
}

export interface Ichinook_PlaylistTrackCreateOrConnectWithoutPlaylistInput {
	where: Ichinook_PlaylistTrackWhereUniqueInput;
	create: Ichinook_PlaylistTrackCreateWithoutPlaylistInput;
}

export interface Ichinook_PlaylistTrackCreateNestedManyWithoutPlaylistInput {
	create?: Ichinook_PlaylistTrackCreateWithoutPlaylistInput;
	connectOrCreate?: Ichinook_PlaylistTrackCreateOrConnectWithoutPlaylistInput;
	connect?: Ichinook_PlaylistTrackWhereUniqueInput;
}

export interface Ichinook_PlaylistCreateInput {
	Name?: string;
	PlaylistTrack?: Ichinook_PlaylistTrackCreateNestedManyWithoutPlaylistInput;
}

export interface Ichinook_TrackUpdateWithoutPlaylistTrackInput {
	Name?: Ichinook_StringFieldUpdateOperationsInput;
	Composer?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Milliseconds?: Ichinook_IntFieldUpdateOperationsInput;
	String?: Ichinook_NullableIntFieldUpdateOperationsInput;
	UnitPrice?: Ichinook_DecimalFieldUpdateOperationsInput;
	Album?: Ichinook_AlbumUpdateOneWithoutTrackInput;
	Genre?: Ichinook_GenreUpdateOneWithoutTrackInput;
	MediaType?: Ichinook_MediaTypeUpdateOneRequiredWithoutTrackInput;
	InvoiceLine?: Ichinook_InvoiceLineUpdateManyWithoutTrackInput;
}

export interface Ichinook_TrackUpsertWithoutPlaylistTrackInput {
	update: Ichinook_TrackUpdateWithoutPlaylistTrackInput;
	create: Ichinook_TrackCreateWithoutPlaylistTrackInput;
}

export interface Ichinook_TrackUpdateOneRequiredWithoutPlaylistTrackInput {
	create?: Ichinook_TrackCreateWithoutPlaylistTrackInput;
	connectOrCreate?: Ichinook_TrackCreateOrConnectWithoutPlaylistTrackInput;
	upsert?: Ichinook_TrackUpsertWithoutPlaylistTrackInput;
	connect?: Ichinook_TrackWhereUniqueInput;
	update?: Ichinook_TrackUpdateWithoutPlaylistTrackInput;
}

export interface Ichinook_PlaylistTrackUpdateWithoutPlaylistInput {
	Track?: Ichinook_TrackUpdateOneRequiredWithoutPlaylistTrackInput;
}

export interface Ichinook_PlaylistTrackUpsertWithWhereUniqueWithoutPlaylistInput {
	where: Ichinook_PlaylistTrackWhereUniqueInput;
	update: Ichinook_PlaylistTrackUpdateWithoutPlaylistInput;
	create: Ichinook_PlaylistTrackCreateWithoutPlaylistInput;
}

export interface Ichinook_PlaylistTrackUpdateWithWhereUniqueWithoutPlaylistInput {
	where: Ichinook_PlaylistTrackWhereUniqueInput;
	data: Ichinook_PlaylistTrackUpdateWithoutPlaylistInput;
}

export interface Ichinook_PlaylistTrackUpdateManyWithWhereWithoutPlaylistInput {
	where: Ichinook_PlaylistTrackScalarWhereInput;
}

export interface Ichinook_PlaylistTrackUpdateManyWithoutPlaylistInput {
	create?: Ichinook_PlaylistTrackCreateWithoutPlaylistInput;
	connectOrCreate?: Ichinook_PlaylistTrackCreateOrConnectWithoutPlaylistInput;
	upsert?: Ichinook_PlaylistTrackUpsertWithWhereUniqueWithoutPlaylistInput;
	set?: Ichinook_PlaylistTrackWhereUniqueInput;
	disconnect?: Ichinook_PlaylistTrackWhereUniqueInput;
	delete?: Ichinook_PlaylistTrackWhereUniqueInput;
	connect?: Ichinook_PlaylistTrackWhereUniqueInput;
	update?: Ichinook_PlaylistTrackUpdateWithWhereUniqueWithoutPlaylistInput;
	updateMany?: Ichinook_PlaylistTrackUpdateManyWithWhereWithoutPlaylistInput;
	deleteMany?: Ichinook_PlaylistTrackScalarWhereInput;
}

export interface Ichinook_PlaylistUpdateInput {
	Name?: Ichinook_NullableStringFieldUpdateOperationsInput;
	PlaylistTrack?: Ichinook_PlaylistTrackUpdateManyWithoutPlaylistInput;
}

export interface Ichinook_PlaylistUpdateManyMutationInput {
	Name?: Ichinook_NullableStringFieldUpdateOperationsInput;
}

export interface Ichinook_PlaylistTrackCreateInput {
	Playlist: Ichinook_PlaylistCreateNestedOneWithoutPlaylistTrackInput;
	Track: Ichinook_TrackCreateNestedOneWithoutPlaylistTrackInput;
}

export interface Ichinook_PlaylistTrackUpdateInput {
	Playlist?: Ichinook_PlaylistUpdateOneRequiredWithoutPlaylistTrackInput;
	Track?: Ichinook_TrackUpdateOneRequiredWithoutPlaylistTrackInput;
}

export interface Ichinook_TrackCreateInput {
	Name: string;
	Composer?: string;
	Milliseconds: number;
	String?: number;
	UnitPrice: number;
	Album?: Ichinook_AlbumCreateNestedOneWithoutTrackInput;
	Genre?: Ichinook_GenreCreateNestedOneWithoutTrackInput;
	MediaType: Ichinook_MediaTypeCreateNestedOneWithoutTrackInput;
	InvoiceLine?: Ichinook_InvoiceLineCreateNestedManyWithoutTrackInput;
	PlaylistTrack?: Ichinook_PlaylistTrackCreateNestedManyWithoutTrackInput;
}

export interface Ichinook_TrackUpdateInput {
	Name?: Ichinook_StringFieldUpdateOperationsInput;
	Composer?: Ichinook_NullableStringFieldUpdateOperationsInput;
	Milliseconds?: Ichinook_IntFieldUpdateOperationsInput;
	String?: Ichinook_NullableIntFieldUpdateOperationsInput;
	UnitPrice?: Ichinook_DecimalFieldUpdateOperationsInput;
	Album?: Ichinook_AlbumUpdateOneWithoutTrackInput;
	Genre?: Ichinook_GenreUpdateOneWithoutTrackInput;
	MediaType?: Ichinook_MediaTypeUpdateOneRequiredWithoutTrackInput;
	InvoiceLine?: Ichinook_InvoiceLineUpdateManyWithoutTrackInput;
	PlaylistTrack?: Ichinook_PlaylistTrackUpdateManyWithoutTrackInput;
}

export interface IMutation {
	readonly __typename: 'Mutation';
	chinook_createOneAlbum(variables: { data: Ichinook_AlbumCreateInput }): Ichinook_Album | null;
	chinook_upsertOneAlbum(variables: {
		where: Ichinook_AlbumWhereUniqueInput;
		create: Ichinook_AlbumCreateInput;
		update: Ichinook_AlbumUpdateInput;
	}): Ichinook_Album | null;
	chinook_deleteOneAlbum(variables: { where: Ichinook_AlbumWhereUniqueInput }): Ichinook_Album | null;
	chinook_updateOneAlbum(variables: {
		data: Ichinook_AlbumUpdateInput;
		where: Ichinook_AlbumWhereUniqueInput;
	}): Ichinook_Album | null;
	chinook_updateManyAlbum(variables: {
		data: Ichinook_AlbumUpdateManyMutationInput;
		where: Ichinook_AlbumWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_deleteManyAlbum(variables: {
		where: Ichinook_AlbumWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_createOneArtist(variables: { data: Ichinook_ArtistCreateInput }): Ichinook_Artist | null;
	chinook_upsertOneArtist(variables: {
		where: Ichinook_ArtistWhereUniqueInput;
		create: Ichinook_ArtistCreateInput;
		update: Ichinook_ArtistUpdateInput;
	}): Ichinook_Artist | null;
	chinook_deleteOneArtist(variables: { where: Ichinook_ArtistWhereUniqueInput }): Ichinook_Artist | null;
	chinook_updateOneArtist(variables: {
		data: Ichinook_ArtistUpdateInput;
		where: Ichinook_ArtistWhereUniqueInput;
	}): Ichinook_Artist | null;
	chinook_updateManyArtist(variables: {
		data: Ichinook_ArtistUpdateManyMutationInput;
		where: Ichinook_ArtistWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_deleteManyArtist(variables: {
		where: Ichinook_ArtistWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_createOneCustomer(variables: { data: Ichinook_CustomerCreateInput }): Ichinook_Customer | null;
	chinook_upsertOneCustomer(variables: {
		where: Ichinook_CustomerWhereUniqueInput;
		create: Ichinook_CustomerCreateInput;
		update: Ichinook_CustomerUpdateInput;
	}): Ichinook_Customer | null;
	chinook_deleteOneCustomer(variables: { where: Ichinook_CustomerWhereUniqueInput }): Ichinook_Customer | null;
	chinook_updateOneCustomer(variables: {
		data: Ichinook_CustomerUpdateInput;
		where: Ichinook_CustomerWhereUniqueInput;
	}): Ichinook_Customer | null;
	chinook_updateManyCustomer(variables: {
		data: Ichinook_CustomerUpdateManyMutationInput;
		where: Ichinook_CustomerWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_deleteManyCustomer(variables: {
		where: Ichinook_CustomerWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_createOneEmployee(variables: { data: Ichinook_EmployeeCreateInput }): Ichinook_Employee | null;
	chinook_upsertOneEmployee(variables: {
		where: Ichinook_EmployeeWhereUniqueInput;
		create: Ichinook_EmployeeCreateInput;
		update: Ichinook_EmployeeUpdateInput;
	}): Ichinook_Employee | null;
	chinook_deleteOneEmployee(variables: { where: Ichinook_EmployeeWhereUniqueInput }): Ichinook_Employee | null;
	chinook_updateOneEmployee(variables: {
		data: Ichinook_EmployeeUpdateInput;
		where: Ichinook_EmployeeWhereUniqueInput;
	}): Ichinook_Employee | null;
	chinook_updateManyEmployee(variables: {
		data: Ichinook_EmployeeUpdateManyMutationInput;
		where: Ichinook_EmployeeWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_deleteManyEmployee(variables: {
		where: Ichinook_EmployeeWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_createOneGenre(variables: { data: Ichinook_GenreCreateInput }): Ichinook_Genre | null;
	chinook_upsertOneGenre(variables: {
		where: Ichinook_GenreWhereUniqueInput;
		create: Ichinook_GenreCreateInput;
		update: Ichinook_GenreUpdateInput;
	}): Ichinook_Genre | null;
	chinook_deleteOneGenre(variables: { where: Ichinook_GenreWhereUniqueInput }): Ichinook_Genre | null;
	chinook_updateOneGenre(variables: {
		data: Ichinook_GenreUpdateInput;
		where: Ichinook_GenreWhereUniqueInput;
	}): Ichinook_Genre | null;
	chinook_updateManyGenre(variables: {
		data: Ichinook_GenreUpdateManyMutationInput;
		where: Ichinook_GenreWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_deleteManyGenre(variables: {
		where: Ichinook_GenreWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_createOneInvoice(variables: { data: Ichinook_InvoiceCreateInput }): Ichinook_Invoice | null;
	chinook_upsertOneInvoice(variables: {
		where: Ichinook_InvoiceWhereUniqueInput;
		create: Ichinook_InvoiceCreateInput;
		update: Ichinook_InvoiceUpdateInput;
	}): Ichinook_Invoice | null;
	chinook_deleteOneInvoice(variables: { where: Ichinook_InvoiceWhereUniqueInput }): Ichinook_Invoice | null;
	chinook_updateOneInvoice(variables: {
		data: Ichinook_InvoiceUpdateInput;
		where: Ichinook_InvoiceWhereUniqueInput;
	}): Ichinook_Invoice | null;
	chinook_updateManyInvoice(variables: {
		data: Ichinook_InvoiceUpdateManyMutationInput;
		where: Ichinook_InvoiceWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_deleteManyInvoice(variables: {
		where: Ichinook_InvoiceWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_createOneInvoiceLine(variables: { data: Ichinook_InvoiceLineCreateInput }): Ichinook_InvoiceLine | null;
	chinook_upsertOneInvoiceLine(variables: {
		where: Ichinook_InvoiceLineWhereUniqueInput;
		create: Ichinook_InvoiceLineCreateInput;
		update: Ichinook_InvoiceLineUpdateInput;
	}): Ichinook_InvoiceLine | null;
	chinook_deleteOneInvoiceLine(variables: { where: Ichinook_InvoiceLineWhereUniqueInput }): Ichinook_InvoiceLine | null;
	chinook_updateOneInvoiceLine(variables: {
		data: Ichinook_InvoiceLineUpdateInput;
		where: Ichinook_InvoiceLineWhereUniqueInput;
	}): Ichinook_InvoiceLine | null;
	chinook_updateManyInvoiceLine(variables: {
		data: Ichinook_InvoiceLineUpdateManyMutationInput;
		where: Ichinook_InvoiceLineWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_deleteManyInvoiceLine(variables: {
		where: Ichinook_InvoiceLineWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_createOneMediaType(variables: { data: Ichinook_MediaTypeCreateInput }): Ichinook_MediaType | null;
	chinook_upsertOneMediaType(variables: {
		where: Ichinook_MediaTypeWhereUniqueInput;
		create: Ichinook_MediaTypeCreateInput;
		update: Ichinook_MediaTypeUpdateInput;
	}): Ichinook_MediaType | null;
	chinook_deleteOneMediaType(variables: { where: Ichinook_MediaTypeWhereUniqueInput }): Ichinook_MediaType | null;
	chinook_updateOneMediaType(variables: {
		data: Ichinook_MediaTypeUpdateInput;
		where: Ichinook_MediaTypeWhereUniqueInput;
	}): Ichinook_MediaType | null;
	chinook_updateManyMediaType(variables: {
		data: Ichinook_MediaTypeUpdateManyMutationInput;
		where: Ichinook_MediaTypeWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_deleteManyMediaType(variables: {
		where: Ichinook_MediaTypeWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_createOnePlaylist(variables: { data: Ichinook_PlaylistCreateInput }): Ichinook_Playlist | null;
	chinook_upsertOnePlaylist(variables: {
		where: Ichinook_PlaylistWhereUniqueInput;
		create: Ichinook_PlaylistCreateInput;
		update: Ichinook_PlaylistUpdateInput;
	}): Ichinook_Playlist | null;
	chinook_deleteOnePlaylist(variables: { where: Ichinook_PlaylistWhereUniqueInput }): Ichinook_Playlist | null;
	chinook_updateOnePlaylist(variables: {
		data: Ichinook_PlaylistUpdateInput;
		where: Ichinook_PlaylistWhereUniqueInput;
	}): Ichinook_Playlist | null;
	chinook_updateManyPlaylist(variables: {
		data: Ichinook_PlaylistUpdateManyMutationInput;
		where: Ichinook_PlaylistWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_deleteManyPlaylist(variables: {
		where: Ichinook_PlaylistWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_createOnePlaylistTrack(variables: { data: Ichinook_PlaylistTrackCreateInput }): Ichinook_PlaylistTrack | null;
	chinook_upsertOnePlaylistTrack(variables: {
		where: Ichinook_PlaylistTrackWhereUniqueInput;
		create: Ichinook_PlaylistTrackCreateInput;
		update: Ichinook_PlaylistTrackUpdateInput;
	}): Ichinook_PlaylistTrack | null;
	chinook_deleteOnePlaylistTrack(variables: {
		where: Ichinook_PlaylistTrackWhereUniqueInput;
	}): Ichinook_PlaylistTrack | null;
	chinook_updateOnePlaylistTrack(variables: {
		data: Ichinook_PlaylistTrackUpdateInput;
		where: Ichinook_PlaylistTrackWhereUniqueInput;
	}): Ichinook_PlaylistTrack | null;
	chinook_updateManyPlaylistTrack(variables: {
		where: Ichinook_PlaylistTrackWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_deleteManyPlaylistTrack(variables: {
		where: Ichinook_PlaylistTrackWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_createOneTrack(variables: { data: Ichinook_TrackCreateInput }): Ichinook_Track | null;
	chinook_upsertOneTrack(variables: {
		where: Ichinook_TrackWhereUniqueInput;
		create: Ichinook_TrackCreateInput;
		update: Ichinook_TrackUpdateInput;
	}): Ichinook_Track | null;
	chinook_deleteOneTrack(variables: { where: Ichinook_TrackWhereUniqueInput }): Ichinook_Track | null;
	chinook_updateOneTrack(variables: {
		data: Ichinook_TrackUpdateInput;
		where: Ichinook_TrackWhereUniqueInput;
	}): Ichinook_Track | null;
	chinook_updateManyTrack(variables: {
		data: Ichinook_TrackUpdateManyMutationInput;
		where: Ichinook_TrackWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	chinook_deleteManyTrack(variables: {
		where: Ichinook_TrackWhereInput | undefined;
	}): Ichinook_AffectedRowsOutput | null;
	db_createOnePost(variables: { data: Idb_PostCreateInput }): Idb_Post | null;
	db_upsertOnePost(variables: {
		where: Idb_PostWhereUniqueInput;
		create: Idb_PostCreateInput;
		update: Idb_PostUpdateInput;
	}): Idb_Post | null;
	db_deleteOnePost(variables: { where: Idb_PostWhereUniqueInput }): Idb_Post | null;
	db_updateOnePost(variables: { data: Idb_PostUpdateInput; where: Idb_PostWhereUniqueInput }): Idb_Post | null;
	db_updateManyPost(variables: {
		data: Idb_PostUpdateManyMutationInput;
		where: Idb_PostWhereInput | undefined;
	}): Idb_AffectedRowsOutput | null;
	db_deleteManyPost(variables: { where: Idb_PostWhereInput | undefined }): Idb_AffectedRowsOutput | null;
	db_createOneProfile(variables: { data: Idb_ProfileCreateInput }): Idb_Profile | null;
	db_upsertOneProfile(variables: {
		where: Idb_ProfileWhereUniqueInput;
		create: Idb_ProfileCreateInput;
		update: Idb_ProfileUpdateInput;
	}): Idb_Profile | null;
	db_deleteOneProfile(variables: { where: Idb_ProfileWhereUniqueInput }): Idb_Profile | null;
	db_updateOneProfile(variables: {
		data: Idb_ProfileUpdateInput;
		where: Idb_ProfileWhereUniqueInput;
	}): Idb_Profile | null;
	db_updateManyProfile(variables: {
		data: Idb_ProfileUpdateManyMutationInput;
		where: Idb_ProfileWhereInput | undefined;
	}): Idb_AffectedRowsOutput | null;
	db_deleteManyProfile(variables: { where: Idb_ProfileWhereInput | undefined }): Idb_AffectedRowsOutput | null;
	db_createOneUser(variables: { data: Idb_UserCreateInput }): Idb_User | null;
	db_upsertOneUser(variables: {
		where: Idb_UserWhereUniqueInput;
		create: Idb_UserCreateInput;
		update: Idb_UserUpdateInput;
	}): Idb_User | null;
	db_deleteOneUser(variables: { where: Idb_UserWhereUniqueInput }): Idb_User | null;
	db_updateOneUser(variables: { data: Idb_UserUpdateInput; where: Idb_UserWhereUniqueInput }): Idb_User | null;
	db_updateManyUser(variables: {
		data: Idb_UserUpdateManyMutationInput;
		where: Idb_UserWhereInput | undefined;
	}): Idb_AffectedRowsOutput | null;
	db_deleteManyUser(variables: { where: Idb_UserWhereInput | undefined }): Idb_AffectedRowsOutput | null;
	sdl_setSdlField(variables: { sdl: string }): string;
}

export interface Idb_NestedIntFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Idb_NestedIntFilter;
}

export interface Idb_IntFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Idb_NestedIntFilter;
}

export interface Idb_NestedDateTimeFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: Idb_NestedDateTimeFilter;
}

export interface Idb_DateTimeFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: Idb_NestedDateTimeFilter;
}

export interface Idb_NestedStringFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	not?: Idb_NestedStringFilter;
}

export interface Idb_StringFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	not?: Idb_NestedStringFilter;
}

export interface Idb_NestedStringNullableFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	not?: Idb_NestedStringNullableFilter;
}

export interface Idb_StringNullableFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	not?: Idb_NestedStringNullableFilter;
}

export interface Idb_NestedBoolFilter {
	equals?: boolean;
	not?: Idb_NestedBoolFilter;
}

export interface Idb_BoolFilter {
	equals?: boolean;
	not?: Idb_NestedBoolFilter;
}

export interface Idb_PostListRelationFilter {
	every?: Idb_PostWhereInput;
	some?: Idb_PostWhereInput;
	none?: Idb_PostWhereInput;
}

export interface Idb_ProfileWhereInput {
	AND?: Idb_ProfileWhereInput;
	OR?: Idb_ProfileWhereInput[];
	NOT?: Idb_ProfileWhereInput;
	id?: Idb_IntFilter;
	bio?: Idb_StringNullableFilter;
	userId?: Idb_IntFilter;
	User?: Idb_UserRelationFilter;
}

export interface Idb_ProfileRelationFilter {
	is?: Idb_ProfileWhereInput;
	isNot?: Idb_ProfileWhereInput;
}

export interface Idb_UserWhereInput {
	AND?: Idb_UserWhereInput;
	OR?: Idb_UserWhereInput[];
	NOT?: Idb_UserWhereInput;
	id?: Idb_IntFilter;
	email?: Idb_StringFilter;
	name?: Idb_StringNullableFilter;
	Post?: Idb_PostListRelationFilter;
	Profile?: Idb_ProfileRelationFilter;
}

export interface Idb_UserRelationFilter {
	is?: Idb_UserWhereInput;
	isNot?: Idb_UserWhereInput;
}

export interface Idb_PostWhereInput {
	AND?: Idb_PostWhereInput;
	OR?: Idb_PostWhereInput[];
	NOT?: Idb_PostWhereInput;
	id?: Idb_IntFilter;
	createdAt?: Idb_DateTimeFilter;
	updatedAt?: Idb_DateTimeFilter;
	title?: Idb_StringFilter;
	content?: Idb_StringNullableFilter;
	published?: Idb_BoolFilter;
	authorId?: Idb_IntFilter;
	User?: Idb_UserRelationFilter;
}

export enum db_SortOrder {
	asc = 'asc',
	desc = 'desc',
}

export interface Idb_PostOrderByRelationAggregateInput {
	_count?: db_SortOrder;
}

export interface Idb_ProfileOrderByWithRelationInput {
	id?: db_SortOrder;
	bio?: db_SortOrder;
	userId?: db_SortOrder;
	User?: Idb_UserOrderByWithRelationInput;
}

export interface Idb_UserOrderByWithRelationInput {
	id?: db_SortOrder;
	email?: db_SortOrder;
	name?: db_SortOrder;
	Post?: Idb_PostOrderByRelationAggregateInput;
	Profile?: Idb_ProfileOrderByWithRelationInput;
}

export interface Idb_PostOrderByWithRelationInput {
	id?: db_SortOrder;
	createdAt?: db_SortOrder;
	updatedAt?: db_SortOrder;
	title?: db_SortOrder;
	content?: db_SortOrder;
	published?: db_SortOrder;
	authorId?: db_SortOrder;
	User?: Idb_UserOrderByWithRelationInput;
}

export interface Idb_PostWhereUniqueInput {
	id?: number;
}

export enum db_PostScalarFieldEnum {
	id = 'id',
	createdAt = 'createdAt',
	updatedAt = 'updatedAt',
	title = 'title',
	content = 'content',
	published = 'published',
	authorId = 'authorId',
}

export interface Idb_Profile {
	readonly __typename: 'db_Profile';
	readonly id: number;
	readonly bio: string | null;
	readonly userId: number;
	readonly User: Idb_User;
	readonly _join: IQuery;
}

export interface Idb_UserCountOutputType {
	readonly __typename: 'db_UserCountOutputType';
	readonly Post: number;
	readonly _join: IQuery;
}

export interface Idb_User {
	readonly __typename: 'db_User';
	readonly id: number;
	readonly email: string;
	readonly name: string | null;
	Post(variables: {
		where: Idb_PostWhereInput | undefined;
		orderBy: Idb_PostOrderByWithRelationInput[] | undefined;
		cursor: Idb_PostWhereUniqueInput | undefined;
		take: number | undefined;
		skip: number | undefined;
		distinct: db_PostScalarFieldEnum[] | undefined;
	}): ReadonlyArray<Idb_Post> | null;
	readonly Profile: Idb_Profile | null;
	readonly _count: Idb_UserCountOutputType;
	readonly _join: IQuery;
}

export interface Idb_Post {
	readonly __typename: 'db_Post';
	readonly id: number;
	readonly createdAt: string;
	readonly updatedAt: string;
	readonly title: string;
	readonly content: string | null;
	readonly published: boolean;
	readonly authorId: number;
	readonly User: Idb_User;
	readonly _join: IQuery;
}

export interface Idb_PostCountAggregateOutputType {
	readonly __typename: 'db_PostCountAggregateOutputType';
	readonly id: number;
	readonly createdAt: number;
	readonly updatedAt: number;
	readonly title: number;
	readonly content: number;
	readonly published: number;
	readonly authorId: number;
	readonly _all: number;
	readonly _join: IQuery;
}

export interface Idb_PostAvgAggregateOutputType {
	readonly __typename: 'db_PostAvgAggregateOutputType';
	readonly id: number | null;
	readonly authorId: number | null;
	readonly _join: IQuery;
}

export interface Idb_PostSumAggregateOutputType {
	readonly __typename: 'db_PostSumAggregateOutputType';
	readonly id: number | null;
	readonly authorId: number | null;
	readonly _join: IQuery;
}

export interface Idb_PostMinAggregateOutputType {
	readonly __typename: 'db_PostMinAggregateOutputType';
	readonly id: number | null;
	readonly createdAt: string | null;
	readonly updatedAt: string | null;
	readonly title: string | null;
	readonly content: string | null;
	readonly published: boolean | null;
	readonly authorId: number | null;
	readonly _join: IQuery;
}

export interface Idb_PostMaxAggregateOutputType {
	readonly __typename: 'db_PostMaxAggregateOutputType';
	readonly id: number | null;
	readonly createdAt: string | null;
	readonly updatedAt: string | null;
	readonly title: string | null;
	readonly content: string | null;
	readonly published: boolean | null;
	readonly authorId: number | null;
	readonly _join: IQuery;
}

export interface Idb_AggregatePost {
	readonly __typename: 'db_AggregatePost';
	readonly _count: Idb_PostCountAggregateOutputType | null;
	readonly _avg: Idb_PostAvgAggregateOutputType | null;
	readonly _sum: Idb_PostSumAggregateOutputType | null;
	readonly _min: Idb_PostMinAggregateOutputType | null;
	readonly _max: Idb_PostMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Idb_PostCountOrderByAggregateInput {
	id?: db_SortOrder;
	createdAt?: db_SortOrder;
	updatedAt?: db_SortOrder;
	title?: db_SortOrder;
	content?: db_SortOrder;
	published?: db_SortOrder;
	authorId?: db_SortOrder;
}

export interface Idb_PostAvgOrderByAggregateInput {
	id?: db_SortOrder;
	authorId?: db_SortOrder;
}

export interface Idb_PostMaxOrderByAggregateInput {
	id?: db_SortOrder;
	createdAt?: db_SortOrder;
	updatedAt?: db_SortOrder;
	title?: db_SortOrder;
	content?: db_SortOrder;
	published?: db_SortOrder;
	authorId?: db_SortOrder;
}

export interface Idb_PostMinOrderByAggregateInput {
	id?: db_SortOrder;
	createdAt?: db_SortOrder;
	updatedAt?: db_SortOrder;
	title?: db_SortOrder;
	content?: db_SortOrder;
	published?: db_SortOrder;
	authorId?: db_SortOrder;
}

export interface Idb_PostSumOrderByAggregateInput {
	id?: db_SortOrder;
	authorId?: db_SortOrder;
}

export interface Idb_PostOrderByWithAggregationInput {
	id?: db_SortOrder;
	createdAt?: db_SortOrder;
	updatedAt?: db_SortOrder;
	title?: db_SortOrder;
	content?: db_SortOrder;
	published?: db_SortOrder;
	authorId?: db_SortOrder;
	_count?: Idb_PostCountOrderByAggregateInput;
	_avg?: Idb_PostAvgOrderByAggregateInput;
	_max?: Idb_PostMaxOrderByAggregateInput;
	_min?: Idb_PostMinOrderByAggregateInput;
	_sum?: Idb_PostSumOrderByAggregateInput;
}

export interface Idb_NestedFloatFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Idb_NestedFloatFilter;
}

export interface Idb_NestedIntWithAggregatesFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Idb_NestedIntWithAggregatesFilter;
	_count?: Idb_NestedIntFilter;
	_avg?: Idb_NestedFloatFilter;
	_sum?: Idb_NestedIntFilter;
	_min?: Idb_NestedIntFilter;
	_max?: Idb_NestedIntFilter;
}

export interface Idb_IntWithAggregatesFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Idb_NestedIntWithAggregatesFilter;
	_count?: Idb_NestedIntFilter;
	_avg?: Idb_NestedFloatFilter;
	_sum?: Idb_NestedIntFilter;
	_min?: Idb_NestedIntFilter;
	_max?: Idb_NestedIntFilter;
}

export interface Idb_NestedDateTimeWithAggregatesFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: Idb_NestedDateTimeWithAggregatesFilter;
	_count?: Idb_NestedIntFilter;
	_min?: Idb_NestedDateTimeFilter;
	_max?: Idb_NestedDateTimeFilter;
}

export interface Idb_DateTimeWithAggregatesFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	not?: Idb_NestedDateTimeWithAggregatesFilter;
	_count?: Idb_NestedIntFilter;
	_min?: Idb_NestedDateTimeFilter;
	_max?: Idb_NestedDateTimeFilter;
}

export interface Idb_NestedStringWithAggregatesFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	not?: Idb_NestedStringWithAggregatesFilter;
	_count?: Idb_NestedIntFilter;
	_min?: Idb_NestedStringFilter;
	_max?: Idb_NestedStringFilter;
}

export interface Idb_StringWithAggregatesFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	not?: Idb_NestedStringWithAggregatesFilter;
	_count?: Idb_NestedIntFilter;
	_min?: Idb_NestedStringFilter;
	_max?: Idb_NestedStringFilter;
}

export interface Idb_NestedIntNullableFilter {
	equals?: number;
	in?: number[];
	notIn?: number[];
	lt?: number;
	lte?: number;
	gt?: number;
	gte?: number;
	not?: Idb_NestedIntNullableFilter;
}

export interface Idb_NestedStringNullableWithAggregatesFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	not?: Idb_NestedStringNullableWithAggregatesFilter;
	_count?: Idb_NestedIntNullableFilter;
	_min?: Idb_NestedStringNullableFilter;
	_max?: Idb_NestedStringNullableFilter;
}

export interface Idb_StringNullableWithAggregatesFilter {
	equals?: string;
	in?: string[];
	notIn?: string[];
	lt?: string;
	lte?: string;
	gt?: string;
	gte?: string;
	contains?: string;
	startsWith?: string;
	endsWith?: string;
	not?: Idb_NestedStringNullableWithAggregatesFilter;
	_count?: Idb_NestedIntNullableFilter;
	_min?: Idb_NestedStringNullableFilter;
	_max?: Idb_NestedStringNullableFilter;
}

export interface Idb_NestedBoolWithAggregatesFilter {
	equals?: boolean;
	not?: Idb_NestedBoolWithAggregatesFilter;
	_count?: Idb_NestedIntFilter;
	_min?: Idb_NestedBoolFilter;
	_max?: Idb_NestedBoolFilter;
}

export interface Idb_BoolWithAggregatesFilter {
	equals?: boolean;
	not?: Idb_NestedBoolWithAggregatesFilter;
	_count?: Idb_NestedIntFilter;
	_min?: Idb_NestedBoolFilter;
	_max?: Idb_NestedBoolFilter;
}

export interface Idb_PostScalarWhereWithAggregatesInput {
	AND?: Idb_PostScalarWhereWithAggregatesInput;
	OR?: Idb_PostScalarWhereWithAggregatesInput[];
	NOT?: Idb_PostScalarWhereWithAggregatesInput;
	id?: Idb_IntWithAggregatesFilter;
	createdAt?: Idb_DateTimeWithAggregatesFilter;
	updatedAt?: Idb_DateTimeWithAggregatesFilter;
	title?: Idb_StringWithAggregatesFilter;
	content?: Idb_StringNullableWithAggregatesFilter;
	published?: Idb_BoolWithAggregatesFilter;
	authorId?: Idb_IntWithAggregatesFilter;
}

export interface Idb_PostGroupByOutputType {
	readonly __typename: 'db_PostGroupByOutputType';
	readonly id: number;
	readonly createdAt: string;
	readonly updatedAt: string;
	readonly title: string;
	readonly content: string | null;
	readonly published: boolean;
	readonly authorId: number;
	readonly _count: Idb_PostCountAggregateOutputType | null;
	readonly _avg: Idb_PostAvgAggregateOutputType | null;
	readonly _sum: Idb_PostSumAggregateOutputType | null;
	readonly _min: Idb_PostMinAggregateOutputType | null;
	readonly _max: Idb_PostMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Idb_ProfileWhereUniqueInput {
	id?: number;
	userId?: number;
}

export enum db_ProfileScalarFieldEnum {
	id = 'id',
	bio = 'bio',
	userId = 'userId',
}

export interface Idb_ProfileCountAggregateOutputType {
	readonly __typename: 'db_ProfileCountAggregateOutputType';
	readonly id: number;
	readonly bio: number;
	readonly userId: number;
	readonly _all: number;
	readonly _join: IQuery;
}

export interface Idb_ProfileAvgAggregateOutputType {
	readonly __typename: 'db_ProfileAvgAggregateOutputType';
	readonly id: number | null;
	readonly userId: number | null;
	readonly _join: IQuery;
}

export interface Idb_ProfileSumAggregateOutputType {
	readonly __typename: 'db_ProfileSumAggregateOutputType';
	readonly id: number | null;
	readonly userId: number | null;
	readonly _join: IQuery;
}

export interface Idb_ProfileMinAggregateOutputType {
	readonly __typename: 'db_ProfileMinAggregateOutputType';
	readonly id: number | null;
	readonly bio: string | null;
	readonly userId: number | null;
	readonly _join: IQuery;
}

export interface Idb_ProfileMaxAggregateOutputType {
	readonly __typename: 'db_ProfileMaxAggregateOutputType';
	readonly id: number | null;
	readonly bio: string | null;
	readonly userId: number | null;
	readonly _join: IQuery;
}

export interface Idb_AggregateProfile {
	readonly __typename: 'db_AggregateProfile';
	readonly _count: Idb_ProfileCountAggregateOutputType | null;
	readonly _avg: Idb_ProfileAvgAggregateOutputType | null;
	readonly _sum: Idb_ProfileSumAggregateOutputType | null;
	readonly _min: Idb_ProfileMinAggregateOutputType | null;
	readonly _max: Idb_ProfileMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Idb_ProfileCountOrderByAggregateInput {
	id?: db_SortOrder;
	bio?: db_SortOrder;
	userId?: db_SortOrder;
}

export interface Idb_ProfileAvgOrderByAggregateInput {
	id?: db_SortOrder;
	userId?: db_SortOrder;
}

export interface Idb_ProfileMaxOrderByAggregateInput {
	id?: db_SortOrder;
	bio?: db_SortOrder;
	userId?: db_SortOrder;
}

export interface Idb_ProfileMinOrderByAggregateInput {
	id?: db_SortOrder;
	bio?: db_SortOrder;
	userId?: db_SortOrder;
}

export interface Idb_ProfileSumOrderByAggregateInput {
	id?: db_SortOrder;
	userId?: db_SortOrder;
}

export interface Idb_ProfileOrderByWithAggregationInput {
	id?: db_SortOrder;
	bio?: db_SortOrder;
	userId?: db_SortOrder;
	_count?: Idb_ProfileCountOrderByAggregateInput;
	_avg?: Idb_ProfileAvgOrderByAggregateInput;
	_max?: Idb_ProfileMaxOrderByAggregateInput;
	_min?: Idb_ProfileMinOrderByAggregateInput;
	_sum?: Idb_ProfileSumOrderByAggregateInput;
}

export interface Idb_ProfileScalarWhereWithAggregatesInput {
	AND?: Idb_ProfileScalarWhereWithAggregatesInput;
	OR?: Idb_ProfileScalarWhereWithAggregatesInput[];
	NOT?: Idb_ProfileScalarWhereWithAggregatesInput;
	id?: Idb_IntWithAggregatesFilter;
	bio?: Idb_StringNullableWithAggregatesFilter;
	userId?: Idb_IntWithAggregatesFilter;
}

export interface Idb_ProfileGroupByOutputType {
	readonly __typename: 'db_ProfileGroupByOutputType';
	readonly id: number;
	readonly bio: string | null;
	readonly userId: number;
	readonly _count: Idb_ProfileCountAggregateOutputType | null;
	readonly _avg: Idb_ProfileAvgAggregateOutputType | null;
	readonly _sum: Idb_ProfileSumAggregateOutputType | null;
	readonly _min: Idb_ProfileMinAggregateOutputType | null;
	readonly _max: Idb_ProfileMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Idb_UserWhereUniqueInput {
	id?: number;
	email?: string;
}

export enum db_UserScalarFieldEnum {
	id = 'id',
	email = 'email',
	name = 'name',
}

export interface Idb_UserCountAggregateOutputType {
	readonly __typename: 'db_UserCountAggregateOutputType';
	readonly id: number;
	readonly email: number;
	readonly name: number;
	readonly _all: number;
	readonly _join: IQuery;
}

export interface Idb_UserAvgAggregateOutputType {
	readonly __typename: 'db_UserAvgAggregateOutputType';
	readonly id: number | null;
	readonly _join: IQuery;
}

export interface Idb_UserSumAggregateOutputType {
	readonly __typename: 'db_UserSumAggregateOutputType';
	readonly id: number | null;
	readonly _join: IQuery;
}

export interface Idb_UserMinAggregateOutputType {
	readonly __typename: 'db_UserMinAggregateOutputType';
	readonly id: number | null;
	readonly email: string | null;
	readonly name: string | null;
	readonly _join: IQuery;
}

export interface Idb_UserMaxAggregateOutputType {
	readonly __typename: 'db_UserMaxAggregateOutputType';
	readonly id: number | null;
	readonly email: string | null;
	readonly name: string | null;
	readonly _join: IQuery;
}

export interface Idb_AggregateUser {
	readonly __typename: 'db_AggregateUser';
	readonly _count: Idb_UserCountAggregateOutputType | null;
	readonly _avg: Idb_UserAvgAggregateOutputType | null;
	readonly _sum: Idb_UserSumAggregateOutputType | null;
	readonly _min: Idb_UserMinAggregateOutputType | null;
	readonly _max: Idb_UserMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Idb_UserCountOrderByAggregateInput {
	id?: db_SortOrder;
	email?: db_SortOrder;
	name?: db_SortOrder;
}

export interface Idb_UserAvgOrderByAggregateInput {
	id?: db_SortOrder;
}

export interface Idb_UserMaxOrderByAggregateInput {
	id?: db_SortOrder;
	email?: db_SortOrder;
	name?: db_SortOrder;
}

export interface Idb_UserMinOrderByAggregateInput {
	id?: db_SortOrder;
	email?: db_SortOrder;
	name?: db_SortOrder;
}

export interface Idb_UserSumOrderByAggregateInput {
	id?: db_SortOrder;
}

export interface Idb_UserOrderByWithAggregationInput {
	id?: db_SortOrder;
	email?: db_SortOrder;
	name?: db_SortOrder;
	_count?: Idb_UserCountOrderByAggregateInput;
	_avg?: Idb_UserAvgOrderByAggregateInput;
	_max?: Idb_UserMaxOrderByAggregateInput;
	_min?: Idb_UserMinOrderByAggregateInput;
	_sum?: Idb_UserSumOrderByAggregateInput;
}

export interface Idb_UserScalarWhereWithAggregatesInput {
	AND?: Idb_UserScalarWhereWithAggregatesInput;
	OR?: Idb_UserScalarWhereWithAggregatesInput[];
	NOT?: Idb_UserScalarWhereWithAggregatesInput;
	id?: Idb_IntWithAggregatesFilter;
	email?: Idb_StringWithAggregatesFilter;
	name?: Idb_StringNullableWithAggregatesFilter;
}

export interface Idb_UserGroupByOutputType {
	readonly __typename: 'db_UserGroupByOutputType';
	readonly id: number;
	readonly email: string;
	readonly name: string | null;
	readonly _count: Idb_UserCountAggregateOutputType | null;
	readonly _avg: Idb_UserAvgAggregateOutputType | null;
	readonly _sum: Idb_UserSumAggregateOutputType | null;
	readonly _min: Idb_UserMinAggregateOutputType | null;
	readonly _max: Idb_UserMaxAggregateOutputType | null;
	readonly _join: IQuery;
}

export interface Idb_ProfileCreateWithoutUserInput {
	bio?: string;
}

export interface Idb_ProfileCreateOrConnectWithoutUserInput {
	where: Idb_ProfileWhereUniqueInput;
	create: Idb_ProfileCreateWithoutUserInput;
}

export interface Idb_ProfileCreateNestedOneWithoutUserInput {
	create?: Idb_ProfileCreateWithoutUserInput;
	connectOrCreate?: Idb_ProfileCreateOrConnectWithoutUserInput;
	connect?: Idb_ProfileWhereUniqueInput;
}

export interface Idb_UserCreateWithoutPostInput {
	email: string;
	name?: string;
	Profile?: Idb_ProfileCreateNestedOneWithoutUserInput;
}

export interface Idb_UserCreateOrConnectWithoutPostInput {
	where: Idb_UserWhereUniqueInput;
	create: Idb_UserCreateWithoutPostInput;
}

export interface Idb_UserCreateNestedOneWithoutPostInput {
	create?: Idb_UserCreateWithoutPostInput;
	connectOrCreate?: Idb_UserCreateOrConnectWithoutPostInput;
	connect?: Idb_UserWhereUniqueInput;
}

export interface Idb_PostCreateInput {
	createdAt?: string;
	updatedAt: string;
	title: string;
	content?: string;
	published?: boolean;
	User: Idb_UserCreateNestedOneWithoutPostInput;
}

export interface Idb_DateTimeFieldUpdateOperationsInput {
	set?: string;
}

export interface Idb_StringFieldUpdateOperationsInput {
	set?: string;
}

export interface Idb_NullableStringFieldUpdateOperationsInput {
	set?: string;
}

export interface Idb_BoolFieldUpdateOperationsInput {
	set?: boolean;
}

export interface Idb_ProfileUpdateWithoutUserInput {
	bio?: Idb_NullableStringFieldUpdateOperationsInput;
}

export interface Idb_ProfileUpsertWithoutUserInput {
	update: Idb_ProfileUpdateWithoutUserInput;
	create: Idb_ProfileCreateWithoutUserInput;
}

export interface Idb_ProfileUpdateOneWithoutUserInput {
	create?: Idb_ProfileCreateWithoutUserInput;
	connectOrCreate?: Idb_ProfileCreateOrConnectWithoutUserInput;
	upsert?: Idb_ProfileUpsertWithoutUserInput;
	disconnect?: boolean;
	delete?: boolean;
	connect?: Idb_ProfileWhereUniqueInput;
	update?: Idb_ProfileUpdateWithoutUserInput;
}

export interface Idb_UserUpdateWithoutPostInput {
	email?: Idb_StringFieldUpdateOperationsInput;
	name?: Idb_NullableStringFieldUpdateOperationsInput;
	Profile?: Idb_ProfileUpdateOneWithoutUserInput;
}

export interface Idb_UserUpsertWithoutPostInput {
	update: Idb_UserUpdateWithoutPostInput;
	create: Idb_UserCreateWithoutPostInput;
}

export interface Idb_UserUpdateOneRequiredWithoutPostInput {
	create?: Idb_UserCreateWithoutPostInput;
	connectOrCreate?: Idb_UserCreateOrConnectWithoutPostInput;
	upsert?: Idb_UserUpsertWithoutPostInput;
	connect?: Idb_UserWhereUniqueInput;
	update?: Idb_UserUpdateWithoutPostInput;
}

export interface Idb_PostUpdateInput {
	createdAt?: Idb_DateTimeFieldUpdateOperationsInput;
	updatedAt?: Idb_DateTimeFieldUpdateOperationsInput;
	title?: Idb_StringFieldUpdateOperationsInput;
	content?: Idb_NullableStringFieldUpdateOperationsInput;
	published?: Idb_BoolFieldUpdateOperationsInput;
	User?: Idb_UserUpdateOneRequiredWithoutPostInput;
}

export interface Idb_PostUpdateManyMutationInput {
	createdAt?: Idb_DateTimeFieldUpdateOperationsInput;
	updatedAt?: Idb_DateTimeFieldUpdateOperationsInput;
	title?: Idb_StringFieldUpdateOperationsInput;
	content?: Idb_NullableStringFieldUpdateOperationsInput;
	published?: Idb_BoolFieldUpdateOperationsInput;
}

export interface Idb_AffectedRowsOutput {
	readonly __typename: 'db_AffectedRowsOutput';
	readonly count: number;
	readonly _join: IQuery;
}

export interface Idb_PostCreateWithoutUserInput {
	createdAt?: string;
	updatedAt: string;
	title: string;
	content?: string;
	published?: boolean;
}

export interface Idb_PostCreateOrConnectWithoutUserInput {
	where: Idb_PostWhereUniqueInput;
	create: Idb_PostCreateWithoutUserInput;
}

export interface Idb_PostCreateNestedManyWithoutUserInput {
	create?: Idb_PostCreateWithoutUserInput;
	connectOrCreate?: Idb_PostCreateOrConnectWithoutUserInput;
	connect?: Idb_PostWhereUniqueInput;
}

export interface Idb_UserCreateWithoutProfileInput {
	email: string;
	name?: string;
	Post?: Idb_PostCreateNestedManyWithoutUserInput;
}

export interface Idb_UserCreateOrConnectWithoutProfileInput {
	where: Idb_UserWhereUniqueInput;
	create: Idb_UserCreateWithoutProfileInput;
}

export interface Idb_UserCreateNestedOneWithoutProfileInput {
	create?: Idb_UserCreateWithoutProfileInput;
	connectOrCreate?: Idb_UserCreateOrConnectWithoutProfileInput;
	connect?: Idb_UserWhereUniqueInput;
}

export interface Idb_ProfileCreateInput {
	bio?: string;
	User: Idb_UserCreateNestedOneWithoutProfileInput;
}

export interface Idb_PostUpdateWithoutUserInput {
	createdAt?: Idb_DateTimeFieldUpdateOperationsInput;
	updatedAt?: Idb_DateTimeFieldUpdateOperationsInput;
	title?: Idb_StringFieldUpdateOperationsInput;
	content?: Idb_NullableStringFieldUpdateOperationsInput;
	published?: Idb_BoolFieldUpdateOperationsInput;
}

export interface Idb_PostUpsertWithWhereUniqueWithoutUserInput {
	where: Idb_PostWhereUniqueInput;
	update: Idb_PostUpdateWithoutUserInput;
	create: Idb_PostCreateWithoutUserInput;
}

export interface Idb_PostUpdateWithWhereUniqueWithoutUserInput {
	where: Idb_PostWhereUniqueInput;
	data: Idb_PostUpdateWithoutUserInput;
}

export interface Idb_PostScalarWhereInput {
	AND?: Idb_PostScalarWhereInput;
	OR?: Idb_PostScalarWhereInput[];
	NOT?: Idb_PostScalarWhereInput;
	id?: Idb_IntFilter;
	createdAt?: Idb_DateTimeFilter;
	updatedAt?: Idb_DateTimeFilter;
	title?: Idb_StringFilter;
	content?: Idb_StringNullableFilter;
	published?: Idb_BoolFilter;
	authorId?: Idb_IntFilter;
}

export interface Idb_PostUpdateManyWithWhereWithoutUserInput {
	where: Idb_PostScalarWhereInput;
	data: Idb_PostUpdateManyMutationInput;
}

export interface Idb_PostUpdateManyWithoutUserInput {
	create?: Idb_PostCreateWithoutUserInput;
	connectOrCreate?: Idb_PostCreateOrConnectWithoutUserInput;
	upsert?: Idb_PostUpsertWithWhereUniqueWithoutUserInput;
	set?: Idb_PostWhereUniqueInput;
	disconnect?: Idb_PostWhereUniqueInput;
	delete?: Idb_PostWhereUniqueInput;
	connect?: Idb_PostWhereUniqueInput;
	update?: Idb_PostUpdateWithWhereUniqueWithoutUserInput;
	updateMany?: Idb_PostUpdateManyWithWhereWithoutUserInput;
	deleteMany?: Idb_PostScalarWhereInput;
}

export interface Idb_UserUpdateWithoutProfileInput {
	email?: Idb_StringFieldUpdateOperationsInput;
	name?: Idb_NullableStringFieldUpdateOperationsInput;
	Post?: Idb_PostUpdateManyWithoutUserInput;
}

export interface Idb_UserUpsertWithoutProfileInput {
	update: Idb_UserUpdateWithoutProfileInput;
	create: Idb_UserCreateWithoutProfileInput;
}

export interface Idb_UserUpdateOneRequiredWithoutProfileInput {
	create?: Idb_UserCreateWithoutProfileInput;
	connectOrCreate?: Idb_UserCreateOrConnectWithoutProfileInput;
	upsert?: Idb_UserUpsertWithoutProfileInput;
	connect?: Idb_UserWhereUniqueInput;
	update?: Idb_UserUpdateWithoutProfileInput;
}

export interface Idb_ProfileUpdateInput {
	bio?: Idb_NullableStringFieldUpdateOperationsInput;
	User?: Idb_UserUpdateOneRequiredWithoutProfileInput;
}

export interface Idb_ProfileUpdateManyMutationInput {
	bio?: Idb_NullableStringFieldUpdateOperationsInput;
}

export interface Idb_UserCreateInput {
	email: string;
	name?: string;
	Post?: Idb_PostCreateNestedManyWithoutUserInput;
	Profile?: Idb_ProfileCreateNestedOneWithoutUserInput;
}

export interface Idb_UserUpdateInput {
	email?: Idb_StringFieldUpdateOperationsInput;
	name?: Idb_NullableStringFieldUpdateOperationsInput;
	Post?: Idb_PostUpdateManyWithoutUserInput;
	Profile?: Idb_ProfileUpdateOneWithoutUserInput;
}

export interface Idb_UserUpdateManyMutationInput {
	email?: Idb_StringFieldUpdateOperationsInput;
	name?: Idb_NullableStringFieldUpdateOperationsInput;
}

export interface Ijsp2_Post {
	readonly __typename: 'jsp2_Post';
	readonly id: number;
	readonly userId: number;
	readonly title: string;
	readonly _join: IQuery;
}

export interface Ijsp2_User {
	readonly __typename: 'jsp2_User';
	readonly id: number | null;
	readonly name: string | null;
	readonly username: string | null;
	readonly email: string | null;
	readonly _join: IQuery;
}

export interface Iibm_jsp_Post {
	readonly __typename: 'ibm_jsp_Post';
	readonly id: number;
	readonly title: string;
	readonly userId: number;
	readonly _join: IQuery;
}

export interface Iibm_jsp_User {
	readonly __typename: 'ibm_jsp_User';
	readonly email: string | null;
	readonly id: number | null;
	readonly name: string | null;
	readonly username: string | null;
	readonly _join: IQuery;
}

export interface Ipublic_A {
	readonly __typename: 'public_A';
	readonly id: string | null;
	readonly name: string | null;
	readonly _join: IQuery;
}

export interface Ipublic_B {
	readonly __typename: 'public_B';
	readonly id: string | null;
	readonly name: string | null;
	readonly _join: IQuery;
}

export type Ipublic_GqlUnion = Ipublic_A | Ipublic_B;

export enum public_Which {
	a = 'a',
	b = 'b',
}

export enum Claim {
	USERID = 'USERID',
	EMAIL = 'EMAIL',
	EMAIL_VERIFIED = 'EMAIL_VERIFIED',
	NAME = 'NAME',
	NICKNAME = 'NICKNAME',
	LOCATION = 'LOCATION',
	PROVIDER = 'PROVIDER',
}

export enum COMMON_REGEX_PATTERN {
	EMAIL = 'EMAIL',
	DOMAIN = 'DOMAIN',
}

export enum WG_ROLE {
	admin = 'admin',
	user = 'user',
}

export enum WunderGraphDateTimeFormat {
	ISO8601 = 'ISO8601',
	ANSIC = 'ANSIC',
	UnixDate = 'UnixDate',
	RubyDate = 'RubyDate',
	RFC822 = 'RFC822',
	RFC822Z = 'RFC822Z',
	RFC850 = 'RFC850',
	RFC1123 = 'RFC1123',
	RFC1123Z = 'RFC1123Z',
	RFC3339 = 'RFC3339',
	RFC3339Nano = 'RFC3339Nano',
	Kitchen = 'Kitchen',
	Stamp = 'Stamp',
	StampMilli = 'StampMilli',
	StampMicro = 'StampMicro',
	StampNano = 'StampNano',
}

interface IQuerySelector {
	readonly __typename: () => Field<'__typename'>;

	readonly jsp_getPosts: <V extends { tld: Variable<string> | string }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Ijsp_PostSelector) => T
	) => Field<'jsp_getPosts', [Argument<'tld', V['tld']>], SelectionSet<T>>;

	readonly jsp_getUsers: <V extends { tld: Variable<string> | string }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Ijsp_UserSelector) => T
	) => Field<'jsp_getUsers', [Argument<'tld', V['tld']>], SelectionSet<T>>;

	readonly jsp_getUser: <
		V extends { tld: Variable<string> | string; id: Variable<string> | number },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ijsp_UserSelector) => T
	) => Field<'jsp_getUser', [Argument<'tld', V['tld']>, Argument<'id', V['id']>], SelectionSet<T>>;

	readonly jsp_getPost: <
		V extends { tld: Variable<string> | string; id: Variable<string> | number },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ijsp_PostSelector) => T
	) => Field<'jsp_getPost', [Argument<'tld', V['tld']>, Argument<'id', V['id']>], SelectionSet<T>>;

	readonly weather_getCityById: <
		V extends {
			config?: Variable<string> | Iweather_ConfigInput;
			id?: Variable<string> | string[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Iweather_CitySelector) => T
	) => Field<'weather_getCityById', [Argument<'config', V['config']>, Argument<'id', V['id']>], SelectionSet<T>>;

	readonly weather_getCityByName: <
		V extends {
			config?: Variable<string> | Iweather_ConfigInput;
			country?: Variable<string> | string;
			name: Variable<string> | string;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Iweather_CitySelector) => T
	) => Field<
		'weather_getCityByName',
		[Argument<'config', V['config']>, Argument<'country', V['country']>, Argument<'name', V['name']>],
		SelectionSet<T>
	>;

	readonly countries_continent: <V extends { code: Variable<string> | string }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Icountries_ContinentSelector) => T
	) => Field<'countries_continent', [Argument<'code', V['code']>], SelectionSet<T>>;

	readonly countries_continents: <
		V extends { filter?: Variable<string> | Icountries_ContinentFilterInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Icountries_ContinentSelector) => T
	) => Field<'countries_continents', [Argument<'filter', V['filter']>], SelectionSet<T>>;

	readonly countries_countries: <
		V extends { filter?: Variable<string> | Icountries_CountryFilterInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Icountries_CountrySelector) => T
	) => Field<'countries_countries', [Argument<'filter', V['filter']>], SelectionSet<T>>;

	readonly countries_country: <V extends { code: Variable<string> | string }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Icountries_CountrySelector) => T
	) => Field<'countries_country', [Argument<'code', V['code']>], SelectionSet<T>>;

	readonly countries_language: <V extends { code: Variable<string> | string }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Icountries_LanguageSelector) => T
	) => Field<'countries_language', [Argument<'code', V['code']>], SelectionSet<T>>;

	readonly countries_languages: <
		V extends { filter?: Variable<string> | Icountries_LanguageFilterInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Icountries_LanguageSelector) => T
	) => Field<'countries_languages', [Argument<'filter', V['filter']>], SelectionSet<T>>;

	readonly spacex_capsule: <V extends { id: Variable<string> | string }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Ispacex_CapsuleSelector) => T
	) => Field<'spacex_capsule', [Argument<'id', V['id']>], SelectionSet<T>>;

	readonly spacex_capsules: <
		V extends {
			find?: Variable<string> | Ispacex_CapsulesFind;
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
			order?: Variable<string> | string;
			sort?: Variable<string> | string;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_CapsuleSelector) => T
	) => Field<
		'spacex_capsules',
		[
			Argument<'find', V['find']>,
			Argument<'limit', V['limit']>,
			Argument<'offset', V['offset']>,
			Argument<'order', V['order']>,
			Argument<'sort', V['sort']>
		],
		SelectionSet<T>
	>;

	readonly spacex_capsulesPast: <
		V extends {
			find?: Variable<string> | Ispacex_CapsulesFind;
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
			order?: Variable<string> | string;
			sort?: Variable<string> | string;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_CapsuleSelector) => T
	) => Field<
		'spacex_capsulesPast',
		[
			Argument<'find', V['find']>,
			Argument<'limit', V['limit']>,
			Argument<'offset', V['offset']>,
			Argument<'order', V['order']>,
			Argument<'sort', V['sort']>
		],
		SelectionSet<T>
	>;

	readonly spacex_capsulesUpcoming: <
		V extends {
			find?: Variable<string> | Ispacex_CapsulesFind;
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
			order?: Variable<string> | string;
			sort?: Variable<string> | string;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_CapsuleSelector) => T
	) => Field<
		'spacex_capsulesUpcoming',
		[
			Argument<'find', V['find']>,
			Argument<'limit', V['limit']>,
			Argument<'offset', V['offset']>,
			Argument<'order', V['order']>,
			Argument<'sort', V['sort']>
		],
		SelectionSet<T>
	>;

	readonly spacex_company: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_InfoSelector) => T
	) => Field<'spacex_company', never, SelectionSet<T>>;

	readonly spacex_core: <V extends { id: Variable<string> | string }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Ispacex_CoreSelector) => T
	) => Field<'spacex_core', [Argument<'id', V['id']>], SelectionSet<T>>;

	readonly spacex_cores: <
		V extends {
			find?: Variable<string> | Ispacex_CoresFind;
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
			order?: Variable<string> | string;
			sort?: Variable<string> | string;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_CoreSelector) => T
	) => Field<
		'spacex_cores',
		[
			Argument<'find', V['find']>,
			Argument<'limit', V['limit']>,
			Argument<'offset', V['offset']>,
			Argument<'order', V['order']>,
			Argument<'sort', V['sort']>
		],
		SelectionSet<T>
	>;

	readonly spacex_coresPast: <
		V extends {
			find?: Variable<string> | Ispacex_CoresFind;
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
			order?: Variable<string> | string;
			sort?: Variable<string> | string;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_CoreSelector) => T
	) => Field<
		'spacex_coresPast',
		[
			Argument<'find', V['find']>,
			Argument<'limit', V['limit']>,
			Argument<'offset', V['offset']>,
			Argument<'order', V['order']>,
			Argument<'sort', V['sort']>
		],
		SelectionSet<T>
	>;

	readonly spacex_coresUpcoming: <
		V extends {
			find?: Variable<string> | Ispacex_CoresFind;
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
			order?: Variable<string> | string;
			sort?: Variable<string> | string;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_CoreSelector) => T
	) => Field<
		'spacex_coresUpcoming',
		[
			Argument<'find', V['find']>,
			Argument<'limit', V['limit']>,
			Argument<'offset', V['offset']>,
			Argument<'order', V['order']>,
			Argument<'sort', V['sort']>
		],
		SelectionSet<T>
	>;

	readonly spacex_dragon: <V extends { id: Variable<string> | string }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Ispacex_DragonSelector) => T
	) => Field<'spacex_dragon', [Argument<'id', V['id']>], SelectionSet<T>>;

	readonly spacex_dragons: <
		V extends {
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_DragonSelector) => T
	) => Field<'spacex_dragons', [Argument<'limit', V['limit']>, Argument<'offset', V['offset']>], SelectionSet<T>>;

	readonly spacex_histories: <
		V extends {
			find?: Variable<string> | Ispacex_HistoryFind;
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
			order?: Variable<string> | string;
			sort?: Variable<string> | string;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_HistorySelector) => T
	) => Field<
		'spacex_histories',
		[
			Argument<'find', V['find']>,
			Argument<'limit', V['limit']>,
			Argument<'offset', V['offset']>,
			Argument<'order', V['order']>,
			Argument<'sort', V['sort']>
		],
		SelectionSet<T>
	>;

	readonly spacex_historiesResult: <
		V extends {
			find?: Variable<string> | Ispacex_HistoryFind;
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
			order?: Variable<string> | string;
			sort?: Variable<string> | string;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_HistoriesResultSelector) => T
	) => Field<
		'spacex_historiesResult',
		[
			Argument<'find', V['find']>,
			Argument<'limit', V['limit']>,
			Argument<'offset', V['offset']>,
			Argument<'order', V['order']>,
			Argument<'sort', V['sort']>
		],
		SelectionSet<T>
	>;

	readonly spacex_history: <V extends { id: Variable<string> | string }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Ispacex_HistorySelector) => T
	) => Field<'spacex_history', [Argument<'id', V['id']>], SelectionSet<T>>;

	readonly spacex_landpad: <V extends { id: Variable<string> | string }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Ispacex_LandpadSelector) => T
	) => Field<'spacex_landpad', [Argument<'id', V['id']>], SelectionSet<T>>;

	readonly spacex_landpads: <
		V extends {
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_LandpadSelector) => T
	) => Field<'spacex_landpads', [Argument<'limit', V['limit']>, Argument<'offset', V['offset']>], SelectionSet<T>>;

	readonly spacex_launch: <V extends { id: Variable<string> | string }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Ispacex_LaunchSelector) => T
	) => Field<'spacex_launch', [Argument<'id', V['id']>], SelectionSet<T>>;

	readonly spacex_launchLatest: <V extends { offset?: Variable<string> | number }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Ispacex_LaunchSelector) => T
	) => Field<'spacex_launchLatest', [Argument<'offset', V['offset']>], SelectionSet<T>>;

	readonly spacex_launchNext: <V extends { offset?: Variable<string> | number }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Ispacex_LaunchSelector) => T
	) => Field<'spacex_launchNext', [Argument<'offset', V['offset']>], SelectionSet<T>>;

	readonly spacex_launches: <
		V extends {
			find?: Variable<string> | Ispacex_LaunchFind;
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
			order?: Variable<string> | string;
			sort?: Variable<string> | string;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_LaunchSelector) => T
	) => Field<
		'spacex_launches',
		[
			Argument<'find', V['find']>,
			Argument<'limit', V['limit']>,
			Argument<'offset', V['offset']>,
			Argument<'order', V['order']>,
			Argument<'sort', V['sort']>
		],
		SelectionSet<T>
	>;

	readonly spacex_launchesPast: <
		V extends {
			find?: Variable<string> | Ispacex_LaunchFind;
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
			order?: Variable<string> | string;
			sort?: Variable<string> | string;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_LaunchSelector) => T
	) => Field<
		'spacex_launchesPast',
		[
			Argument<'find', V['find']>,
			Argument<'limit', V['limit']>,
			Argument<'offset', V['offset']>,
			Argument<'order', V['order']>,
			Argument<'sort', V['sort']>
		],
		SelectionSet<T>
	>;

	readonly spacex_launchesPastResult: <
		V extends {
			find?: Variable<string> | Ispacex_LaunchFind;
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
			order?: Variable<string> | string;
			sort?: Variable<string> | string;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_LaunchesPastResultSelector) => T
	) => Field<
		'spacex_launchesPastResult',
		[
			Argument<'find', V['find']>,
			Argument<'limit', V['limit']>,
			Argument<'offset', V['offset']>,
			Argument<'order', V['order']>,
			Argument<'sort', V['sort']>
		],
		SelectionSet<T>
	>;

	readonly spacex_launchesUpcoming: <
		V extends {
			find?: Variable<string> | Ispacex_LaunchFind;
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
			order?: Variable<string> | string;
			sort?: Variable<string> | string;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_LaunchSelector) => T
	) => Field<
		'spacex_launchesUpcoming',
		[
			Argument<'find', V['find']>,
			Argument<'limit', V['limit']>,
			Argument<'offset', V['offset']>,
			Argument<'order', V['order']>,
			Argument<'sort', V['sort']>
		],
		SelectionSet<T>
	>;

	readonly spacex_launchpad: <V extends { id: Variable<string> | string }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Ispacex_LaunchpadSelector) => T
	) => Field<'spacex_launchpad', [Argument<'id', V['id']>], SelectionSet<T>>;

	readonly spacex_launchpads: <
		V extends {
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_LaunchpadSelector) => T
	) => Field<'spacex_launchpads', [Argument<'limit', V['limit']>, Argument<'offset', V['offset']>], SelectionSet<T>>;

	readonly spacex_mission: <V extends { id: Variable<string> | string }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Ispacex_MissionSelector) => T
	) => Field<'spacex_mission', [Argument<'id', V['id']>], SelectionSet<T>>;

	readonly spacex_missions: <
		V extends {
			find?: Variable<string> | Ispacex_MissionsFind;
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_MissionSelector) => T
	) => Field<
		'spacex_missions',
		[Argument<'find', V['find']>, Argument<'limit', V['limit']>, Argument<'offset', V['offset']>],
		SelectionSet<T>
	>;

	readonly spacex_missionsResult: <
		V extends {
			find?: Variable<string> | Ispacex_MissionsFind;
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_MissionResultSelector) => T
	) => Field<
		'spacex_missionsResult',
		[Argument<'find', V['find']>, Argument<'limit', V['limit']>, Argument<'offset', V['offset']>],
		SelectionSet<T>
	>;

	readonly spacex_payload: <V extends { id: Variable<string> | string }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Ispacex_PayloadSelector) => T
	) => Field<'spacex_payload', [Argument<'id', V['id']>], SelectionSet<T>>;

	readonly spacex_payloads: <
		V extends {
			find?: Variable<string> | Ispacex_PayloadsFind;
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
			order?: Variable<string> | string;
			sort?: Variable<string> | string;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_PayloadSelector) => T
	) => Field<
		'spacex_payloads',
		[
			Argument<'find', V['find']>,
			Argument<'limit', V['limit']>,
			Argument<'offset', V['offset']>,
			Argument<'order', V['order']>,
			Argument<'sort', V['sort']>
		],
		SelectionSet<T>
	>;

	readonly spacex_roadster: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_RoadsterSelector) => T
	) => Field<'spacex_roadster', never, SelectionSet<T>>;

	readonly spacex_rocket: <V extends { id: Variable<string> | string }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Ispacex_RocketSelector) => T
	) => Field<'spacex_rocket', [Argument<'id', V['id']>], SelectionSet<T>>;

	readonly spacex_rockets: <
		V extends {
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_RocketSelector) => T
	) => Field<'spacex_rockets', [Argument<'limit', V['limit']>, Argument<'offset', V['offset']>], SelectionSet<T>>;

	readonly spacex_rocketsResult: <
		V extends {
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_RocketsResultSelector) => T
	) => Field<'spacex_rocketsResult', [Argument<'limit', V['limit']>, Argument<'offset', V['offset']>], SelectionSet<T>>;

	readonly spacex_ship: <V extends { id: Variable<string> | string }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Ispacex_ShipSelector) => T
	) => Field<'spacex_ship', [Argument<'id', V['id']>], SelectionSet<T>>;

	readonly spacex_ships: <
		V extends {
			find?: Variable<string> | Ispacex_ShipsFind;
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
			order?: Variable<string> | string;
			sort?: Variable<string> | string;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_ShipSelector) => T
	) => Field<
		'spacex_ships',
		[
			Argument<'find', V['find']>,
			Argument<'limit', V['limit']>,
			Argument<'offset', V['offset']>,
			Argument<'order', V['order']>,
			Argument<'sort', V['sort']>
		],
		SelectionSet<T>
	>;

	readonly spacex_shipsResult: <
		V extends {
			find?: Variable<string> | Ispacex_ShipsFind;
			limit?: Variable<string> | number;
			offset?: Variable<string> | number;
			order?: Variable<string> | string;
			sort?: Variable<string> | string;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ispacex_ShipsResultSelector) => T
	) => Field<
		'spacex_shipsResult',
		[
			Argument<'find', V['find']>,
			Argument<'limit', V['limit']>,
			Argument<'offset', V['offset']>,
			Argument<'order', V['order']>,
			Argument<'sort', V['sort']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findFirstAlbum: <
		V extends {
			where?: Variable<string> | Ichinook_AlbumWhereInput;
			orderBy?: Variable<string> | Ichinook_AlbumOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_AlbumWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_AlbumScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AlbumSelector) => T
	) => Field<
		'chinook_findFirstAlbum',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findManyAlbum: <
		V extends {
			where?: Variable<string> | Ichinook_AlbumWhereInput;
			orderBy?: Variable<string> | Ichinook_AlbumOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_AlbumWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_AlbumScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AlbumSelector) => T
	) => Field<
		'chinook_findManyAlbum',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_aggregateAlbum: <
		V extends {
			where?: Variable<string> | Ichinook_AlbumWhereInput;
			orderBy?: Variable<string> | Ichinook_AlbumOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_AlbumWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AggregateAlbumSelector) => T
	) => Field<
		'chinook_aggregateAlbum',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_groupByAlbum: <
		V extends {
			where?: Variable<string> | Ichinook_AlbumWhereInput;
			orderBy?: Variable<string> | Ichinook_AlbumOrderByWithAggregationInput[];
			by: Variable<string> | chinook_AlbumScalarFieldEnum[];
			having?: Variable<string> | Ichinook_AlbumScalarWhereWithAggregatesInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AlbumGroupByOutputTypeSelector) => T
	) => Field<
		'chinook_groupByAlbum',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'by', V['by']>,
			Argument<'having', V['having']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findUniqueAlbum: <
		V extends { where: Variable<string> | Ichinook_AlbumWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AlbumSelector) => T
	) => Field<'chinook_findUniqueAlbum', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_findFirstArtist: <
		V extends {
			where?: Variable<string> | Ichinook_ArtistWhereInput;
			orderBy?: Variable<string> | Ichinook_ArtistOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_ArtistWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_ArtistScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_ArtistSelector) => T
	) => Field<
		'chinook_findFirstArtist',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findManyArtist: <
		V extends {
			where?: Variable<string> | Ichinook_ArtistWhereInput;
			orderBy?: Variable<string> | Ichinook_ArtistOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_ArtistWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_ArtistScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_ArtistSelector) => T
	) => Field<
		'chinook_findManyArtist',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_aggregateArtist: <
		V extends {
			where?: Variable<string> | Ichinook_ArtistWhereInput;
			orderBy?: Variable<string> | Ichinook_ArtistOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_ArtistWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AggregateArtistSelector) => T
	) => Field<
		'chinook_aggregateArtist',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_groupByArtist: <
		V extends {
			where?: Variable<string> | Ichinook_ArtistWhereInput;
			orderBy?: Variable<string> | Ichinook_ArtistOrderByWithAggregationInput[];
			by: Variable<string> | chinook_ArtistScalarFieldEnum[];
			having?: Variable<string> | Ichinook_ArtistScalarWhereWithAggregatesInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_ArtistGroupByOutputTypeSelector) => T
	) => Field<
		'chinook_groupByArtist',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'by', V['by']>,
			Argument<'having', V['having']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findUniqueArtist: <
		V extends { where: Variable<string> | Ichinook_ArtistWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_ArtistSelector) => T
	) => Field<'chinook_findUniqueArtist', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_findFirstCustomer: <
		V extends {
			where?: Variable<string> | Ichinook_CustomerWhereInput;
			orderBy?: Variable<string> | Ichinook_CustomerOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_CustomerWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_CustomerScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_CustomerSelector) => T
	) => Field<
		'chinook_findFirstCustomer',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findManyCustomer: <
		V extends {
			where?: Variable<string> | Ichinook_CustomerWhereInput;
			orderBy?: Variable<string> | Ichinook_CustomerOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_CustomerWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_CustomerScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_CustomerSelector) => T
	) => Field<
		'chinook_findManyCustomer',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_aggregateCustomer: <
		V extends {
			where?: Variable<string> | Ichinook_CustomerWhereInput;
			orderBy?: Variable<string> | Ichinook_CustomerOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_CustomerWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AggregateCustomerSelector) => T
	) => Field<
		'chinook_aggregateCustomer',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_groupByCustomer: <
		V extends {
			where?: Variable<string> | Ichinook_CustomerWhereInput;
			orderBy?: Variable<string> | Ichinook_CustomerOrderByWithAggregationInput[];
			by: Variable<string> | chinook_CustomerScalarFieldEnum[];
			having?: Variable<string> | Ichinook_CustomerScalarWhereWithAggregatesInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_CustomerGroupByOutputTypeSelector) => T
	) => Field<
		'chinook_groupByCustomer',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'by', V['by']>,
			Argument<'having', V['having']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findUniqueCustomer: <
		V extends { where: Variable<string> | Ichinook_CustomerWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_CustomerSelector) => T
	) => Field<'chinook_findUniqueCustomer', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_findFirstEmployee: <
		V extends {
			where?: Variable<string> | Ichinook_EmployeeWhereInput;
			orderBy?: Variable<string> | Ichinook_EmployeeOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_EmployeeWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_EmployeeScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_EmployeeSelector) => T
	) => Field<
		'chinook_findFirstEmployee',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findManyEmployee: <
		V extends {
			where?: Variable<string> | Ichinook_EmployeeWhereInput;
			orderBy?: Variable<string> | Ichinook_EmployeeOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_EmployeeWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_EmployeeScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_EmployeeSelector) => T
	) => Field<
		'chinook_findManyEmployee',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_aggregateEmployee: <
		V extends {
			where?: Variable<string> | Ichinook_EmployeeWhereInput;
			orderBy?: Variable<string> | Ichinook_EmployeeOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_EmployeeWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AggregateEmployeeSelector) => T
	) => Field<
		'chinook_aggregateEmployee',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_groupByEmployee: <
		V extends {
			where?: Variable<string> | Ichinook_EmployeeWhereInput;
			orderBy?: Variable<string> | Ichinook_EmployeeOrderByWithAggregationInput[];
			by: Variable<string> | chinook_EmployeeScalarFieldEnum[];
			having?: Variable<string> | Ichinook_EmployeeScalarWhereWithAggregatesInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_EmployeeGroupByOutputTypeSelector) => T
	) => Field<
		'chinook_groupByEmployee',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'by', V['by']>,
			Argument<'having', V['having']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findUniqueEmployee: <
		V extends { where: Variable<string> | Ichinook_EmployeeWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_EmployeeSelector) => T
	) => Field<'chinook_findUniqueEmployee', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_findFirstGenre: <
		V extends {
			where?: Variable<string> | Ichinook_GenreWhereInput;
			orderBy?: Variable<string> | Ichinook_GenreOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_GenreWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_GenreScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_GenreSelector) => T
	) => Field<
		'chinook_findFirstGenre',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findManyGenre: <
		V extends {
			where?: Variable<string> | Ichinook_GenreWhereInput;
			orderBy?: Variable<string> | Ichinook_GenreOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_GenreWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_GenreScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_GenreSelector) => T
	) => Field<
		'chinook_findManyGenre',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_aggregateGenre: <
		V extends {
			where?: Variable<string> | Ichinook_GenreWhereInput;
			orderBy?: Variable<string> | Ichinook_GenreOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_GenreWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AggregateGenreSelector) => T
	) => Field<
		'chinook_aggregateGenre',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_groupByGenre: <
		V extends {
			where?: Variable<string> | Ichinook_GenreWhereInput;
			orderBy?: Variable<string> | Ichinook_GenreOrderByWithAggregationInput[];
			by: Variable<string> | chinook_GenreScalarFieldEnum[];
			having?: Variable<string> | Ichinook_GenreScalarWhereWithAggregatesInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_GenreGroupByOutputTypeSelector) => T
	) => Field<
		'chinook_groupByGenre',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'by', V['by']>,
			Argument<'having', V['having']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findUniqueGenre: <
		V extends { where: Variable<string> | Ichinook_GenreWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_GenreSelector) => T
	) => Field<'chinook_findUniqueGenre', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_findFirstInvoice: <
		V extends {
			where?: Variable<string> | Ichinook_InvoiceWhereInput;
			orderBy?: Variable<string> | Ichinook_InvoiceOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_InvoiceWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_InvoiceScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_InvoiceSelector) => T
	) => Field<
		'chinook_findFirstInvoice',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findManyInvoice: <
		V extends {
			where?: Variable<string> | Ichinook_InvoiceWhereInput;
			orderBy?: Variable<string> | Ichinook_InvoiceOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_InvoiceWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_InvoiceScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_InvoiceSelector) => T
	) => Field<
		'chinook_findManyInvoice',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_aggregateInvoice: <
		V extends {
			where?: Variable<string> | Ichinook_InvoiceWhereInput;
			orderBy?: Variable<string> | Ichinook_InvoiceOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_InvoiceWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AggregateInvoiceSelector) => T
	) => Field<
		'chinook_aggregateInvoice',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_groupByInvoice: <
		V extends {
			where?: Variable<string> | Ichinook_InvoiceWhereInput;
			orderBy?: Variable<string> | Ichinook_InvoiceOrderByWithAggregationInput[];
			by: Variable<string> | chinook_InvoiceScalarFieldEnum[];
			having?: Variable<string> | Ichinook_InvoiceScalarWhereWithAggregatesInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_InvoiceGroupByOutputTypeSelector) => T
	) => Field<
		'chinook_groupByInvoice',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'by', V['by']>,
			Argument<'having', V['having']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findUniqueInvoice: <
		V extends { where: Variable<string> | Ichinook_InvoiceWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_InvoiceSelector) => T
	) => Field<'chinook_findUniqueInvoice', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_findFirstInvoiceLine: <
		V extends {
			where?: Variable<string> | Ichinook_InvoiceLineWhereInput;
			orderBy?: Variable<string> | Ichinook_InvoiceLineOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_InvoiceLineWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_InvoiceLineScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_InvoiceLineSelector) => T
	) => Field<
		'chinook_findFirstInvoiceLine',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findManyInvoiceLine: <
		V extends {
			where?: Variable<string> | Ichinook_InvoiceLineWhereInput;
			orderBy?: Variable<string> | Ichinook_InvoiceLineOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_InvoiceLineWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_InvoiceLineScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_InvoiceLineSelector) => T
	) => Field<
		'chinook_findManyInvoiceLine',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_aggregateInvoiceLine: <
		V extends {
			where?: Variable<string> | Ichinook_InvoiceLineWhereInput;
			orderBy?: Variable<string> | Ichinook_InvoiceLineOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_InvoiceLineWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AggregateInvoiceLineSelector) => T
	) => Field<
		'chinook_aggregateInvoiceLine',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_groupByInvoiceLine: <
		V extends {
			where?: Variable<string> | Ichinook_InvoiceLineWhereInput;
			orderBy?: Variable<string> | Ichinook_InvoiceLineOrderByWithAggregationInput[];
			by: Variable<string> | chinook_InvoiceLineScalarFieldEnum[];
			having?: Variable<string> | Ichinook_InvoiceLineScalarWhereWithAggregatesInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_InvoiceLineGroupByOutputTypeSelector) => T
	) => Field<
		'chinook_groupByInvoiceLine',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'by', V['by']>,
			Argument<'having', V['having']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findUniqueInvoiceLine: <
		V extends {
			where: Variable<string> | Ichinook_InvoiceLineWhereUniqueInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_InvoiceLineSelector) => T
	) => Field<'chinook_findUniqueInvoiceLine', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_findFirstMediaType: <
		V extends {
			where?: Variable<string> | Ichinook_MediaTypeWhereInput;
			orderBy?: Variable<string> | Ichinook_MediaTypeOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_MediaTypeWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_MediaTypeScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_MediaTypeSelector) => T
	) => Field<
		'chinook_findFirstMediaType',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findManyMediaType: <
		V extends {
			where?: Variable<string> | Ichinook_MediaTypeWhereInput;
			orderBy?: Variable<string> | Ichinook_MediaTypeOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_MediaTypeWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_MediaTypeScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_MediaTypeSelector) => T
	) => Field<
		'chinook_findManyMediaType',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_aggregateMediaType: <
		V extends {
			where?: Variable<string> | Ichinook_MediaTypeWhereInput;
			orderBy?: Variable<string> | Ichinook_MediaTypeOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_MediaTypeWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AggregateMediaTypeSelector) => T
	) => Field<
		'chinook_aggregateMediaType',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_groupByMediaType: <
		V extends {
			where?: Variable<string> | Ichinook_MediaTypeWhereInput;
			orderBy?: Variable<string> | Ichinook_MediaTypeOrderByWithAggregationInput[];
			by: Variable<string> | chinook_MediaTypeScalarFieldEnum[];
			having?: Variable<string> | Ichinook_MediaTypeScalarWhereWithAggregatesInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_MediaTypeGroupByOutputTypeSelector) => T
	) => Field<
		'chinook_groupByMediaType',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'by', V['by']>,
			Argument<'having', V['having']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findUniqueMediaType: <
		V extends { where: Variable<string> | Ichinook_MediaTypeWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_MediaTypeSelector) => T
	) => Field<'chinook_findUniqueMediaType', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_findFirstPlaylist: <
		V extends {
			where?: Variable<string> | Ichinook_PlaylistWhereInput;
			orderBy?: Variable<string> | Ichinook_PlaylistOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_PlaylistWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_PlaylistScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_PlaylistSelector) => T
	) => Field<
		'chinook_findFirstPlaylist',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findManyPlaylist: <
		V extends {
			where?: Variable<string> | Ichinook_PlaylistWhereInput;
			orderBy?: Variable<string> | Ichinook_PlaylistOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_PlaylistWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_PlaylistScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_PlaylistSelector) => T
	) => Field<
		'chinook_findManyPlaylist',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_aggregatePlaylist: <
		V extends {
			where?: Variable<string> | Ichinook_PlaylistWhereInput;
			orderBy?: Variable<string> | Ichinook_PlaylistOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_PlaylistWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AggregatePlaylistSelector) => T
	) => Field<
		'chinook_aggregatePlaylist',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_groupByPlaylist: <
		V extends {
			where?: Variable<string> | Ichinook_PlaylistWhereInput;
			orderBy?: Variable<string> | Ichinook_PlaylistOrderByWithAggregationInput[];
			by: Variable<string> | chinook_PlaylistScalarFieldEnum[];
			having?: Variable<string> | Ichinook_PlaylistScalarWhereWithAggregatesInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_PlaylistGroupByOutputTypeSelector) => T
	) => Field<
		'chinook_groupByPlaylist',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'by', V['by']>,
			Argument<'having', V['having']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findUniquePlaylist: <
		V extends { where: Variable<string> | Ichinook_PlaylistWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_PlaylistSelector) => T
	) => Field<'chinook_findUniquePlaylist', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_findFirstPlaylistTrack: <
		V extends {
			where?: Variable<string> | Ichinook_PlaylistTrackWhereInput;
			orderBy?: Variable<string> | Ichinook_PlaylistTrackOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_PlaylistTrackWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_PlaylistTrackScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_PlaylistTrackSelector) => T
	) => Field<
		'chinook_findFirstPlaylistTrack',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findManyPlaylistTrack: <
		V extends {
			where?: Variable<string> | Ichinook_PlaylistTrackWhereInput;
			orderBy?: Variable<string> | Ichinook_PlaylistTrackOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_PlaylistTrackWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_PlaylistTrackScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_PlaylistTrackSelector) => T
	) => Field<
		'chinook_findManyPlaylistTrack',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_aggregatePlaylistTrack: <
		V extends {
			where?: Variable<string> | Ichinook_PlaylistTrackWhereInput;
			orderBy?: Variable<string> | Ichinook_PlaylistTrackOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_PlaylistTrackWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AggregatePlaylistTrackSelector) => T
	) => Field<
		'chinook_aggregatePlaylistTrack',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_groupByPlaylistTrack: <
		V extends {
			where?: Variable<string> | Ichinook_PlaylistTrackWhereInput;
			orderBy?: Variable<string> | Ichinook_PlaylistTrackOrderByWithAggregationInput[];
			by: Variable<string> | chinook_PlaylistTrackScalarFieldEnum[];
			having?: Variable<string> | Ichinook_PlaylistTrackScalarWhereWithAggregatesInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_PlaylistTrackGroupByOutputTypeSelector) => T
	) => Field<
		'chinook_groupByPlaylistTrack',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'by', V['by']>,
			Argument<'having', V['having']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findUniquePlaylistTrack: <
		V extends {
			where: Variable<string> | Ichinook_PlaylistTrackWhereUniqueInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_PlaylistTrackSelector) => T
	) => Field<'chinook_findUniquePlaylistTrack', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_findFirstTrack: <
		V extends {
			where?: Variable<string> | Ichinook_TrackWhereInput;
			orderBy?: Variable<string> | Ichinook_TrackOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_TrackWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_TrackScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_TrackSelector) => T
	) => Field<
		'chinook_findFirstTrack',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findManyTrack: <
		V extends {
			where?: Variable<string> | Ichinook_TrackWhereInput;
			orderBy?: Variable<string> | Ichinook_TrackOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_TrackWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_TrackScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_TrackSelector) => T
	) => Field<
		'chinook_findManyTrack',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly chinook_aggregateTrack: <
		V extends {
			where?: Variable<string> | Ichinook_TrackWhereInput;
			orderBy?: Variable<string> | Ichinook_TrackOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_TrackWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AggregateTrackSelector) => T
	) => Field<
		'chinook_aggregateTrack',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_groupByTrack: <
		V extends {
			where?: Variable<string> | Ichinook_TrackWhereInput;
			orderBy?: Variable<string> | Ichinook_TrackOrderByWithAggregationInput[];
			by: Variable<string> | chinook_TrackScalarFieldEnum[];
			having?: Variable<string> | Ichinook_TrackScalarWhereWithAggregatesInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_TrackGroupByOutputTypeSelector) => T
	) => Field<
		'chinook_groupByTrack',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'by', V['by']>,
			Argument<'having', V['having']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly chinook_findUniqueTrack: <
		V extends { where: Variable<string> | Ichinook_TrackWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_TrackSelector) => T
	) => Field<'chinook_findUniqueTrack', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly db_findFirstPost: <
		V extends {
			where?: Variable<string> | Idb_PostWhereInput;
			orderBy?: Variable<string> | Idb_PostOrderByWithRelationInput[];
			cursor?: Variable<string> | Idb_PostWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | db_PostScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_PostSelector) => T
	) => Field<
		'db_findFirstPost',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly db_findManyPost: <
		V extends {
			where?: Variable<string> | Idb_PostWhereInput;
			orderBy?: Variable<string> | Idb_PostOrderByWithRelationInput[];
			cursor?: Variable<string> | Idb_PostWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | db_PostScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_PostSelector) => T
	) => Field<
		'db_findManyPost',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly db_aggregatePost: <
		V extends {
			where?: Variable<string> | Idb_PostWhereInput;
			orderBy?: Variable<string> | Idb_PostOrderByWithRelationInput[];
			cursor?: Variable<string> | Idb_PostWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_AggregatePostSelector) => T
	) => Field<
		'db_aggregatePost',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly db_groupByPost: <
		V extends {
			where?: Variable<string> | Idb_PostWhereInput;
			orderBy?: Variable<string> | Idb_PostOrderByWithAggregationInput[];
			by: Variable<string> | db_PostScalarFieldEnum[];
			having?: Variable<string> | Idb_PostScalarWhereWithAggregatesInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_PostGroupByOutputTypeSelector) => T
	) => Field<
		'db_groupByPost',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'by', V['by']>,
			Argument<'having', V['having']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly db_findUniquePost: <
		V extends { where: Variable<string> | Idb_PostWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_PostSelector) => T
	) => Field<'db_findUniquePost', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly db_findFirstProfile: <
		V extends {
			where?: Variable<string> | Idb_ProfileWhereInput;
			orderBy?: Variable<string> | Idb_ProfileOrderByWithRelationInput[];
			cursor?: Variable<string> | Idb_ProfileWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | db_ProfileScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_ProfileSelector) => T
	) => Field<
		'db_findFirstProfile',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly db_findManyProfile: <
		V extends {
			where?: Variable<string> | Idb_ProfileWhereInput;
			orderBy?: Variable<string> | Idb_ProfileOrderByWithRelationInput[];
			cursor?: Variable<string> | Idb_ProfileWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | db_ProfileScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_ProfileSelector) => T
	) => Field<
		'db_findManyProfile',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly db_aggregateProfile: <
		V extends {
			where?: Variable<string> | Idb_ProfileWhereInput;
			orderBy?: Variable<string> | Idb_ProfileOrderByWithRelationInput[];
			cursor?: Variable<string> | Idb_ProfileWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_AggregateProfileSelector) => T
	) => Field<
		'db_aggregateProfile',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly db_groupByProfile: <
		V extends {
			where?: Variable<string> | Idb_ProfileWhereInput;
			orderBy?: Variable<string> | Idb_ProfileOrderByWithAggregationInput[];
			by: Variable<string> | db_ProfileScalarFieldEnum[];
			having?: Variable<string> | Idb_ProfileScalarWhereWithAggregatesInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_ProfileGroupByOutputTypeSelector) => T
	) => Field<
		'db_groupByProfile',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'by', V['by']>,
			Argument<'having', V['having']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly db_findUniqueProfile: <
		V extends { where: Variable<string> | Idb_ProfileWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_ProfileSelector) => T
	) => Field<'db_findUniqueProfile', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly db_findFirstUser: <
		V extends {
			where?: Variable<string> | Idb_UserWhereInput;
			orderBy?: Variable<string> | Idb_UserOrderByWithRelationInput[];
			cursor?: Variable<string> | Idb_UserWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | db_UserScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_UserSelector) => T
	) => Field<
		'db_findFirstUser',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly db_findManyUser: <
		V extends {
			where?: Variable<string> | Idb_UserWhereInput;
			orderBy?: Variable<string> | Idb_UserOrderByWithRelationInput[];
			cursor?: Variable<string> | Idb_UserWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | db_UserScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_UserSelector) => T
	) => Field<
		'db_findManyUser',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly db_aggregateUser: <
		V extends {
			where?: Variable<string> | Idb_UserWhereInput;
			orderBy?: Variable<string> | Idb_UserOrderByWithRelationInput[];
			cursor?: Variable<string> | Idb_UserWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_AggregateUserSelector) => T
	) => Field<
		'db_aggregateUser',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly db_groupByUser: <
		V extends {
			where?: Variable<string> | Idb_UserWhereInput;
			orderBy?: Variable<string> | Idb_UserOrderByWithAggregationInput[];
			by: Variable<string> | db_UserScalarFieldEnum[];
			having?: Variable<string> | Idb_UserScalarWhereWithAggregatesInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_UserGroupByOutputTypeSelector) => T
	) => Field<
		'db_groupByUser',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'by', V['by']>,
			Argument<'having', V['having']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>
		],
		SelectionSet<T>
	>;

	readonly db_findUniqueUser: <
		V extends { where: Variable<string> | Idb_UserWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_UserSelector) => T
	) => Field<'db_findUniqueUser', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly jsp2_getPosts: <T extends ReadonlyArray<Selection>>(
		select: (t: Ijsp2_PostSelector) => T
	) => Field<'jsp2_getPosts', never, SelectionSet<T>>;

	readonly jsp2_getUsers: <T extends ReadonlyArray<Selection>>(
		select: (t: Ijsp2_UserSelector) => T
	) => Field<'jsp2_getUsers', never, SelectionSet<T>>;

	readonly jsp2_getUser: <V extends { id: Variable<string> | number }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Ijsp2_UserSelector) => T
	) => Field<'jsp2_getUser', [Argument<'id', V['id']>], SelectionSet<T>>;

	readonly jsp2_getPost: <V extends { id: Variable<string> | number }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Ijsp2_PostSelector) => T
	) => Field<'jsp2_getPost', [Argument<'id', V['id']>], SelectionSet<T>>;

	/**
     * @description Returns a post by id

Equivalent to GET /posts/{id}
     */

	readonly ibm_jsp_post: <V extends { id: Variable<string> | string }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Iibm_jsp_PostSelector) => T
	) => Field<'ibm_jsp_post', [Argument<'id', V['id']>], SelectionSet<T>>;

	/**
     * @description Returns all posts

Equivalent to GET /posts
     */

	readonly ibm_jsp_postsList: <T extends ReadonlyArray<Selection>>(
		select: (t: Iibm_jsp_PostSelector) => T
	) => Field<'ibm_jsp_postsList', never, SelectionSet<T>>;

	/**
     * @description Returns a user by id

Equivalent to GET /users/{id}
     */

	readonly ibm_jsp_user: <V extends { id: Variable<string> | string }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Iibm_jsp_UserSelector) => T
	) => Field<'ibm_jsp_user', [Argument<'id', V['id']>], SelectionSet<T>>;

	/**
     * @description Returns all users

Equivalent to GET /users
     */

	readonly ibm_jsp_userList: <T extends ReadonlyArray<Selection>>(
		select: (t: Iibm_jsp_UserSelector) => T
	) => Field<'ibm_jsp_userList', never, SelectionSet<T>>;

	readonly sdl_sdlField: () => Field<'sdl_sdlField'>;

	readonly public_gqlUnion: <V extends { which: Variable<string> | public_Which }, T extends ReadonlyArray<Selection>>(
		variables: V,
		select: (t: Ipublic_GqlUnionSelector) => T
	) => Field<'public_gqlUnion', [Argument<'which', V['which']>], SelectionSet<T>>;
}

const QuerySelector: IQuerySelector = {
	__typename: () => field('__typename'),

	jsp_getPosts: (variables, select) =>
		field(
			'jsp_getPosts',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(jsp_PostSelector))
		),

	jsp_getUsers: (variables, select) =>
		field(
			'jsp_getUsers',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(jsp_UserSelector))
		),

	jsp_getUser: (variables, select) =>
		field(
			'jsp_getUser',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(jsp_UserSelector))
		),

	jsp_getPost: (variables, select) =>
		field(
			'jsp_getPost',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(jsp_PostSelector))
		),

	weather_getCityById: (variables, select) =>
		field(
			'weather_getCityById',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(weather_CitySelector))
		),

	weather_getCityByName: (variables, select) =>
		field(
			'weather_getCityByName',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(weather_CitySelector))
		),

	countries_continent: (variables, select) =>
		field(
			'countries_continent',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(countries_ContinentSelector))
		),

	countries_continents: (variables, select) =>
		field(
			'countries_continents',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(countries_ContinentSelector))
		),

	countries_countries: (variables, select) =>
		field(
			'countries_countries',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(countries_CountrySelector))
		),

	countries_country: (variables, select) =>
		field(
			'countries_country',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(countries_CountrySelector))
		),

	countries_language: (variables, select) =>
		field(
			'countries_language',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(countries_LanguageSelector))
		),

	countries_languages: (variables, select) =>
		field(
			'countries_languages',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(countries_LanguageSelector))
		),

	spacex_capsule: (variables, select) =>
		field(
			'spacex_capsule',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_CapsuleSelector))
		),

	spacex_capsules: (variables, select) =>
		field(
			'spacex_capsules',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_CapsuleSelector))
		),

	spacex_capsulesPast: (variables, select) =>
		field(
			'spacex_capsulesPast',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_CapsuleSelector))
		),

	spacex_capsulesUpcoming: (variables, select) =>
		field(
			'spacex_capsulesUpcoming',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_CapsuleSelector))
		),

	spacex_company: (select) => field('spacex_company', undefined as never, selectionSet(select(spacex_InfoSelector))),

	spacex_core: (variables, select) =>
		field(
			'spacex_core',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_CoreSelector))
		),

	spacex_cores: (variables, select) =>
		field(
			'spacex_cores',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_CoreSelector))
		),

	spacex_coresPast: (variables, select) =>
		field(
			'spacex_coresPast',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_CoreSelector))
		),

	spacex_coresUpcoming: (variables, select) =>
		field(
			'spacex_coresUpcoming',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_CoreSelector))
		),

	spacex_dragon: (variables, select) =>
		field(
			'spacex_dragon',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_DragonSelector))
		),

	spacex_dragons: (variables, select) =>
		field(
			'spacex_dragons',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_DragonSelector))
		),

	spacex_histories: (variables, select) =>
		field(
			'spacex_histories',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_HistorySelector))
		),

	spacex_historiesResult: (variables, select) =>
		field(
			'spacex_historiesResult',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_HistoriesResultSelector))
		),

	spacex_history: (variables, select) =>
		field(
			'spacex_history',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_HistorySelector))
		),

	spacex_landpad: (variables, select) =>
		field(
			'spacex_landpad',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_LandpadSelector))
		),

	spacex_landpads: (variables, select) =>
		field(
			'spacex_landpads',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_LandpadSelector))
		),

	spacex_launch: (variables, select) =>
		field(
			'spacex_launch',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_LaunchSelector))
		),

	spacex_launchLatest: (variables, select) =>
		field(
			'spacex_launchLatest',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_LaunchSelector))
		),

	spacex_launchNext: (variables, select) =>
		field(
			'spacex_launchNext',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_LaunchSelector))
		),

	spacex_launches: (variables, select) =>
		field(
			'spacex_launches',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_LaunchSelector))
		),

	spacex_launchesPast: (variables, select) =>
		field(
			'spacex_launchesPast',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_LaunchSelector))
		),

	spacex_launchesPastResult: (variables, select) =>
		field(
			'spacex_launchesPastResult',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_LaunchesPastResultSelector))
		),

	spacex_launchesUpcoming: (variables, select) =>
		field(
			'spacex_launchesUpcoming',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_LaunchSelector))
		),

	spacex_launchpad: (variables, select) =>
		field(
			'spacex_launchpad',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_LaunchpadSelector))
		),

	spacex_launchpads: (variables, select) =>
		field(
			'spacex_launchpads',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_LaunchpadSelector))
		),

	spacex_mission: (variables, select) =>
		field(
			'spacex_mission',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_MissionSelector))
		),

	spacex_missions: (variables, select) =>
		field(
			'spacex_missions',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_MissionSelector))
		),

	spacex_missionsResult: (variables, select) =>
		field(
			'spacex_missionsResult',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_MissionResultSelector))
		),

	spacex_payload: (variables, select) =>
		field(
			'spacex_payload',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_PayloadSelector))
		),

	spacex_payloads: (variables, select) =>
		field(
			'spacex_payloads',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_PayloadSelector))
		),

	spacex_roadster: (select) =>
		field('spacex_roadster', undefined as never, selectionSet(select(spacex_RoadsterSelector))),

	spacex_rocket: (variables, select) =>
		field(
			'spacex_rocket',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_RocketSelector))
		),

	spacex_rockets: (variables, select) =>
		field(
			'spacex_rockets',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_RocketSelector))
		),

	spacex_rocketsResult: (variables, select) =>
		field(
			'spacex_rocketsResult',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_RocketsResultSelector))
		),

	spacex_ship: (variables, select) =>
		field(
			'spacex_ship',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_ShipSelector))
		),

	spacex_ships: (variables, select) =>
		field(
			'spacex_ships',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_ShipSelector))
		),

	spacex_shipsResult: (variables, select) =>
		field(
			'spacex_shipsResult',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(spacex_ShipsResultSelector))
		),

	chinook_findFirstAlbum: (variables, select) =>
		field(
			'chinook_findFirstAlbum',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AlbumSelector))
		),

	chinook_findManyAlbum: (variables, select) =>
		field(
			'chinook_findManyAlbum',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AlbumSelector))
		),

	chinook_aggregateAlbum: (variables, select) =>
		field(
			'chinook_aggregateAlbum',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AggregateAlbumSelector))
		),

	chinook_groupByAlbum: (variables, select) =>
		field(
			'chinook_groupByAlbum',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AlbumGroupByOutputTypeSelector))
		),

	chinook_findUniqueAlbum: (variables, select) =>
		field(
			'chinook_findUniqueAlbum',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AlbumSelector))
		),

	chinook_findFirstArtist: (variables, select) =>
		field(
			'chinook_findFirstArtist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_ArtistSelector))
		),

	chinook_findManyArtist: (variables, select) =>
		field(
			'chinook_findManyArtist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_ArtistSelector))
		),

	chinook_aggregateArtist: (variables, select) =>
		field(
			'chinook_aggregateArtist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AggregateArtistSelector))
		),

	chinook_groupByArtist: (variables, select) =>
		field(
			'chinook_groupByArtist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_ArtistGroupByOutputTypeSelector))
		),

	chinook_findUniqueArtist: (variables, select) =>
		field(
			'chinook_findUniqueArtist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_ArtistSelector))
		),

	chinook_findFirstCustomer: (variables, select) =>
		field(
			'chinook_findFirstCustomer',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_CustomerSelector))
		),

	chinook_findManyCustomer: (variables, select) =>
		field(
			'chinook_findManyCustomer',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_CustomerSelector))
		),

	chinook_aggregateCustomer: (variables, select) =>
		field(
			'chinook_aggregateCustomer',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AggregateCustomerSelector))
		),

	chinook_groupByCustomer: (variables, select) =>
		field(
			'chinook_groupByCustomer',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_CustomerGroupByOutputTypeSelector))
		),

	chinook_findUniqueCustomer: (variables, select) =>
		field(
			'chinook_findUniqueCustomer',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_CustomerSelector))
		),

	chinook_findFirstEmployee: (variables, select) =>
		field(
			'chinook_findFirstEmployee',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_EmployeeSelector))
		),

	chinook_findManyEmployee: (variables, select) =>
		field(
			'chinook_findManyEmployee',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_EmployeeSelector))
		),

	chinook_aggregateEmployee: (variables, select) =>
		field(
			'chinook_aggregateEmployee',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AggregateEmployeeSelector))
		),

	chinook_groupByEmployee: (variables, select) =>
		field(
			'chinook_groupByEmployee',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_EmployeeGroupByOutputTypeSelector))
		),

	chinook_findUniqueEmployee: (variables, select) =>
		field(
			'chinook_findUniqueEmployee',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_EmployeeSelector))
		),

	chinook_findFirstGenre: (variables, select) =>
		field(
			'chinook_findFirstGenre',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_GenreSelector))
		),

	chinook_findManyGenre: (variables, select) =>
		field(
			'chinook_findManyGenre',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_GenreSelector))
		),

	chinook_aggregateGenre: (variables, select) =>
		field(
			'chinook_aggregateGenre',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AggregateGenreSelector))
		),

	chinook_groupByGenre: (variables, select) =>
		field(
			'chinook_groupByGenre',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_GenreGroupByOutputTypeSelector))
		),

	chinook_findUniqueGenre: (variables, select) =>
		field(
			'chinook_findUniqueGenre',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_GenreSelector))
		),

	chinook_findFirstInvoice: (variables, select) =>
		field(
			'chinook_findFirstInvoice',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_InvoiceSelector))
		),

	chinook_findManyInvoice: (variables, select) =>
		field(
			'chinook_findManyInvoice',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_InvoiceSelector))
		),

	chinook_aggregateInvoice: (variables, select) =>
		field(
			'chinook_aggregateInvoice',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AggregateInvoiceSelector))
		),

	chinook_groupByInvoice: (variables, select) =>
		field(
			'chinook_groupByInvoice',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_InvoiceGroupByOutputTypeSelector))
		),

	chinook_findUniqueInvoice: (variables, select) =>
		field(
			'chinook_findUniqueInvoice',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_InvoiceSelector))
		),

	chinook_findFirstInvoiceLine: (variables, select) =>
		field(
			'chinook_findFirstInvoiceLine',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_InvoiceLineSelector))
		),

	chinook_findManyInvoiceLine: (variables, select) =>
		field(
			'chinook_findManyInvoiceLine',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_InvoiceLineSelector))
		),

	chinook_aggregateInvoiceLine: (variables, select) =>
		field(
			'chinook_aggregateInvoiceLine',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AggregateInvoiceLineSelector))
		),

	chinook_groupByInvoiceLine: (variables, select) =>
		field(
			'chinook_groupByInvoiceLine',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_InvoiceLineGroupByOutputTypeSelector))
		),

	chinook_findUniqueInvoiceLine: (variables, select) =>
		field(
			'chinook_findUniqueInvoiceLine',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_InvoiceLineSelector))
		),

	chinook_findFirstMediaType: (variables, select) =>
		field(
			'chinook_findFirstMediaType',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_MediaTypeSelector))
		),

	chinook_findManyMediaType: (variables, select) =>
		field(
			'chinook_findManyMediaType',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_MediaTypeSelector))
		),

	chinook_aggregateMediaType: (variables, select) =>
		field(
			'chinook_aggregateMediaType',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AggregateMediaTypeSelector))
		),

	chinook_groupByMediaType: (variables, select) =>
		field(
			'chinook_groupByMediaType',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_MediaTypeGroupByOutputTypeSelector))
		),

	chinook_findUniqueMediaType: (variables, select) =>
		field(
			'chinook_findUniqueMediaType',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_MediaTypeSelector))
		),

	chinook_findFirstPlaylist: (variables, select) =>
		field(
			'chinook_findFirstPlaylist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_PlaylistSelector))
		),

	chinook_findManyPlaylist: (variables, select) =>
		field(
			'chinook_findManyPlaylist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_PlaylistSelector))
		),

	chinook_aggregatePlaylist: (variables, select) =>
		field(
			'chinook_aggregatePlaylist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AggregatePlaylistSelector))
		),

	chinook_groupByPlaylist: (variables, select) =>
		field(
			'chinook_groupByPlaylist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_PlaylistGroupByOutputTypeSelector))
		),

	chinook_findUniquePlaylist: (variables, select) =>
		field(
			'chinook_findUniquePlaylist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_PlaylistSelector))
		),

	chinook_findFirstPlaylistTrack: (variables, select) =>
		field(
			'chinook_findFirstPlaylistTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_PlaylistTrackSelector))
		),

	chinook_findManyPlaylistTrack: (variables, select) =>
		field(
			'chinook_findManyPlaylistTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_PlaylistTrackSelector))
		),

	chinook_aggregatePlaylistTrack: (variables, select) =>
		field(
			'chinook_aggregatePlaylistTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AggregatePlaylistTrackSelector))
		),

	chinook_groupByPlaylistTrack: (variables, select) =>
		field(
			'chinook_groupByPlaylistTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_PlaylistTrackGroupByOutputTypeSelector))
		),

	chinook_findUniquePlaylistTrack: (variables, select) =>
		field(
			'chinook_findUniquePlaylistTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_PlaylistTrackSelector))
		),

	chinook_findFirstTrack: (variables, select) =>
		field(
			'chinook_findFirstTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_TrackSelector))
		),

	chinook_findManyTrack: (variables, select) =>
		field(
			'chinook_findManyTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_TrackSelector))
		),

	chinook_aggregateTrack: (variables, select) =>
		field(
			'chinook_aggregateTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AggregateTrackSelector))
		),

	chinook_groupByTrack: (variables, select) =>
		field(
			'chinook_groupByTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_TrackGroupByOutputTypeSelector))
		),

	chinook_findUniqueTrack: (variables, select) =>
		field(
			'chinook_findUniqueTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_TrackSelector))
		),

	db_findFirstPost: (variables, select) =>
		field(
			'db_findFirstPost',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_PostSelector))
		),

	db_findManyPost: (variables, select) =>
		field(
			'db_findManyPost',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_PostSelector))
		),

	db_aggregatePost: (variables, select) =>
		field(
			'db_aggregatePost',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_AggregatePostSelector))
		),

	db_groupByPost: (variables, select) =>
		field(
			'db_groupByPost',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_PostGroupByOutputTypeSelector))
		),

	db_findUniquePost: (variables, select) =>
		field(
			'db_findUniquePost',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_PostSelector))
		),

	db_findFirstProfile: (variables, select) =>
		field(
			'db_findFirstProfile',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_ProfileSelector))
		),

	db_findManyProfile: (variables, select) =>
		field(
			'db_findManyProfile',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_ProfileSelector))
		),

	db_aggregateProfile: (variables, select) =>
		field(
			'db_aggregateProfile',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_AggregateProfileSelector))
		),

	db_groupByProfile: (variables, select) =>
		field(
			'db_groupByProfile',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_ProfileGroupByOutputTypeSelector))
		),

	db_findUniqueProfile: (variables, select) =>
		field(
			'db_findUniqueProfile',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_ProfileSelector))
		),

	db_findFirstUser: (variables, select) =>
		field(
			'db_findFirstUser',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_UserSelector))
		),

	db_findManyUser: (variables, select) =>
		field(
			'db_findManyUser',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_UserSelector))
		),

	db_aggregateUser: (variables, select) =>
		field(
			'db_aggregateUser',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_AggregateUserSelector))
		),

	db_groupByUser: (variables, select) =>
		field(
			'db_groupByUser',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_UserGroupByOutputTypeSelector))
		),

	db_findUniqueUser: (variables, select) =>
		field(
			'db_findUniqueUser',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_UserSelector))
		),

	jsp2_getPosts: (select) => field('jsp2_getPosts', undefined as never, selectionSet(select(jsp2_PostSelector))),

	jsp2_getUsers: (select) => field('jsp2_getUsers', undefined as never, selectionSet(select(jsp2_UserSelector))),

	jsp2_getUser: (variables, select) =>
		field(
			'jsp2_getUser',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(jsp2_UserSelector))
		),

	jsp2_getPost: (variables, select) =>
		field(
			'jsp2_getPost',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(jsp2_PostSelector))
		),

	/**
   * @description Returns a post by id

Equivalent to GET /posts/{id}
    */

	ibm_jsp_post: (variables, select) =>
		field(
			'ibm_jsp_post',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(ibm_jsp_PostSelector))
		),

	/**
   * @description Returns all posts

Equivalent to GET /posts
    */

	ibm_jsp_postsList: (select) =>
		field('ibm_jsp_postsList', undefined as never, selectionSet(select(ibm_jsp_PostSelector))),

	/**
   * @description Returns a user by id

Equivalent to GET /users/{id}
    */

	ibm_jsp_user: (variables, select) =>
		field(
			'ibm_jsp_user',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(ibm_jsp_UserSelector))
		),

	/**
   * @description Returns all users

Equivalent to GET /users
    */

	ibm_jsp_userList: (select) =>
		field('ibm_jsp_userList', undefined as never, selectionSet(select(ibm_jsp_UserSelector))),

	sdl_sdlField: () => field('sdl_sdlField'),

	public_gqlUnion: (variables, select) =>
		field(
			'public_gqlUnion',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(public_GqlUnionSelector))
		),
};

export const query = <T extends ReadonlyArray<Selection>>(select: (t: IQuerySelector) => T) =>
	new SelectionBuilder<ISchema, 'Query', T>(SCHEMA as any, 'Query', select(QuerySelector));

interface Ijsp_PostSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly userId: () => Field<'userId'>;

	readonly title: () => Field<'title'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const jsp_PostSelector: Ijsp_PostSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	userId: () => field('userId'),
	title: () => field('title'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const jsp_Post = <T extends ReadonlyArray<Selection>>(select: (t: Ijsp_PostSelector) => T) =>
	new SelectionBuilder<ISchema, 'jsp_Post', T>(SCHEMA as any, 'jsp_Post', select(jsp_PostSelector));

interface Ijsp_UserSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly name: () => Field<'name'>;

	readonly username: () => Field<'username'>;

	readonly email: () => Field<'email'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const jsp_UserSelector: Ijsp_UserSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	name: () => field('name'),
	username: () => field('username'),
	email: () => field('email'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const jsp_User = <T extends ReadonlyArray<Selection>>(select: (t: Ijsp_UserSelector) => T) =>
	new SelectionBuilder<ISchema, 'jsp_User', T>(SCHEMA as any, 'jsp_User', select(jsp_UserSelector));

interface Iweather_CitySelector {
	readonly __typename: () => Field<'__typename'>;

	readonly coord: <T extends ReadonlyArray<Selection>>(
		select: (t: Iweather_CoordinatesSelector) => T
	) => Field<'coord', never, SelectionSet<T>>;

	readonly country: () => Field<'country'>;

	readonly id: () => Field<'id'>;

	readonly name: () => Field<'name'>;

	readonly weather: <T extends ReadonlyArray<Selection>>(
		select: (t: Iweather_WeatherSelector) => T
	) => Field<'weather', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const weather_CitySelector: Iweather_CitySelector = {
	__typename: () => field('__typename'),

	coord: (select) => field('coord', undefined as never, selectionSet(select(weather_CoordinatesSelector))),

	country: () => field('country'),
	id: () => field('id'),
	name: () => field('name'),

	weather: (select) => field('weather', undefined as never, selectionSet(select(weather_WeatherSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const weather_City = <T extends ReadonlyArray<Selection>>(select: (t: Iweather_CitySelector) => T) =>
	new SelectionBuilder<ISchema, 'weather_City', T>(SCHEMA as any, 'weather_City', select(weather_CitySelector));

interface Iweather_CloudsSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly all: () => Field<'all'>;

	readonly humidity: () => Field<'humidity'>;

	readonly visibility: () => Field<'visibility'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const weather_CloudsSelector: Iweather_CloudsSelector = {
	__typename: () => field('__typename'),
	all: () => field('all'),
	humidity: () => field('humidity'),
	visibility: () => field('visibility'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const weather_Clouds = <T extends ReadonlyArray<Selection>>(select: (t: Iweather_CloudsSelector) => T) =>
	new SelectionBuilder<ISchema, 'weather_Clouds', T>(SCHEMA as any, 'weather_Clouds', select(weather_CloudsSelector));

interface Iweather_CoordinatesSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly lat: () => Field<'lat'>;

	readonly lon: () => Field<'lon'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const weather_CoordinatesSelector: Iweather_CoordinatesSelector = {
	__typename: () => field('__typename'),
	lat: () => field('lat'),
	lon: () => field('lon'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const weather_Coordinates = <T extends ReadonlyArray<Selection>>(
	select: (t: Iweather_CoordinatesSelector) => T
) =>
	new SelectionBuilder<ISchema, 'weather_Coordinates', T>(
		SCHEMA as any,
		'weather_Coordinates',
		select(weather_CoordinatesSelector)
	);

interface Iweather_SummarySelector {
	readonly __typename: () => Field<'__typename'>;

	readonly description: () => Field<'description'>;

	readonly icon: () => Field<'icon'>;

	readonly title: () => Field<'title'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const weather_SummarySelector: Iweather_SummarySelector = {
	__typename: () => field('__typename'),
	description: () => field('description'),
	icon: () => field('icon'),
	title: () => field('title'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const weather_Summary = <T extends ReadonlyArray<Selection>>(select: (t: Iweather_SummarySelector) => T) =>
	new SelectionBuilder<ISchema, 'weather_Summary', T>(
		SCHEMA as any,
		'weather_Summary',
		select(weather_SummarySelector)
	);

interface Iweather_TemperatureSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly actual: () => Field<'actual'>;

	readonly feelsLike: () => Field<'feelsLike'>;

	readonly max: () => Field<'max'>;

	readonly min: () => Field<'min'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const weather_TemperatureSelector: Iweather_TemperatureSelector = {
	__typename: () => field('__typename'),
	actual: () => field('actual'),
	feelsLike: () => field('feelsLike'),
	max: () => field('max'),
	min: () => field('min'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const weather_Temperature = <T extends ReadonlyArray<Selection>>(
	select: (t: Iweather_TemperatureSelector) => T
) =>
	new SelectionBuilder<ISchema, 'weather_Temperature', T>(
		SCHEMA as any,
		'weather_Temperature',
		select(weather_TemperatureSelector)
	);

interface Iweather_WeatherSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly clouds: <T extends ReadonlyArray<Selection>>(
		select: (t: Iweather_CloudsSelector) => T
	) => Field<'clouds', never, SelectionSet<T>>;

	readonly summary: <T extends ReadonlyArray<Selection>>(
		select: (t: Iweather_SummarySelector) => T
	) => Field<'summary', never, SelectionSet<T>>;

	readonly temperature: <T extends ReadonlyArray<Selection>>(
		select: (t: Iweather_TemperatureSelector) => T
	) => Field<'temperature', never, SelectionSet<T>>;

	readonly timestamp: () => Field<'timestamp'>;

	readonly wind: <T extends ReadonlyArray<Selection>>(
		select: (t: Iweather_WindSelector) => T
	) => Field<'wind', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const weather_WeatherSelector: Iweather_WeatherSelector = {
	__typename: () => field('__typename'),

	clouds: (select) => field('clouds', undefined as never, selectionSet(select(weather_CloudsSelector))),

	summary: (select) => field('summary', undefined as never, selectionSet(select(weather_SummarySelector))),

	temperature: (select) => field('temperature', undefined as never, selectionSet(select(weather_TemperatureSelector))),

	timestamp: () => field('timestamp'),

	wind: (select) => field('wind', undefined as never, selectionSet(select(weather_WindSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const weather_Weather = <T extends ReadonlyArray<Selection>>(select: (t: Iweather_WeatherSelector) => T) =>
	new SelectionBuilder<ISchema, 'weather_Weather', T>(
		SCHEMA as any,
		'weather_Weather',
		select(weather_WeatherSelector)
	);

interface Iweather_WindSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly deg: () => Field<'deg'>;

	readonly speed: () => Field<'speed'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const weather_WindSelector: Iweather_WindSelector = {
	__typename: () => field('__typename'),
	deg: () => field('deg'),
	speed: () => field('speed'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const weather_Wind = <T extends ReadonlyArray<Selection>>(select: (t: Iweather_WindSelector) => T) =>
	new SelectionBuilder<ISchema, 'weather_Wind', T>(SCHEMA as any, 'weather_Wind', select(weather_WindSelector));

interface Icountries_ContinentSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly code: () => Field<'code'>;

	readonly countries: <T extends ReadonlyArray<Selection>>(
		select: (t: Icountries_CountrySelector) => T
	) => Field<'countries', never, SelectionSet<T>>;

	readonly name: () => Field<'name'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const countries_ContinentSelector: Icountries_ContinentSelector = {
	__typename: () => field('__typename'),
	code: () => field('code'),

	countries: (select) => field('countries', undefined as never, selectionSet(select(countries_CountrySelector))),

	name: () => field('name'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const countries_Continent = <T extends ReadonlyArray<Selection>>(
	select: (t: Icountries_ContinentSelector) => T
) =>
	new SelectionBuilder<ISchema, 'countries_Continent', T>(
		SCHEMA as any,
		'countries_Continent',
		select(countries_ContinentSelector)
	);

interface Icountries_CountrySelector {
	readonly __typename: () => Field<'__typename'>;

	readonly capital: () => Field<'capital'>;

	readonly code: () => Field<'code'>;

	readonly continent: <T extends ReadonlyArray<Selection>>(
		select: (t: Icountries_ContinentSelector) => T
	) => Field<'continent', never, SelectionSet<T>>;

	readonly currency: () => Field<'currency'>;

	readonly emoji: () => Field<'emoji'>;

	readonly emojiU: () => Field<'emojiU'>;

	readonly languages: <T extends ReadonlyArray<Selection>>(
		select: (t: Icountries_LanguageSelector) => T
	) => Field<'languages', never, SelectionSet<T>>;

	readonly name: () => Field<'name'>;

	readonly native: () => Field<'native'>;

	readonly phone: () => Field<'phone'>;

	readonly states: <T extends ReadonlyArray<Selection>>(
		select: (t: Icountries_StateSelector) => T
	) => Field<'states', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const countries_CountrySelector: Icountries_CountrySelector = {
	__typename: () => field('__typename'),
	capital: () => field('capital'),
	code: () => field('code'),

	continent: (select) => field('continent', undefined as never, selectionSet(select(countries_ContinentSelector))),

	currency: () => field('currency'),
	emoji: () => field('emoji'),
	emojiU: () => field('emojiU'),

	languages: (select) => field('languages', undefined as never, selectionSet(select(countries_LanguageSelector))),

	name: () => field('name'),
	native: () => field('native'),
	phone: () => field('phone'),

	states: (select) => field('states', undefined as never, selectionSet(select(countries_StateSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const countries_Country = <T extends ReadonlyArray<Selection>>(select: (t: Icountries_CountrySelector) => T) =>
	new SelectionBuilder<ISchema, 'countries_Country', T>(
		SCHEMA as any,
		'countries_Country',
		select(countries_CountrySelector)
	);

interface Icountries_LanguageSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly code: () => Field<'code'>;

	readonly name: () => Field<'name'>;

	readonly native: () => Field<'native'>;

	readonly rtl: () => Field<'rtl'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const countries_LanguageSelector: Icountries_LanguageSelector = {
	__typename: () => field('__typename'),
	code: () => field('code'),
	name: () => field('name'),
	native: () => field('native'),
	rtl: () => field('rtl'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const countries_Language = <T extends ReadonlyArray<Selection>>(select: (t: Icountries_LanguageSelector) => T) =>
	new SelectionBuilder<ISchema, 'countries_Language', T>(
		SCHEMA as any,
		'countries_Language',
		select(countries_LanguageSelector)
	);

interface Icountries_StateSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly code: () => Field<'code'>;

	readonly country: <T extends ReadonlyArray<Selection>>(
		select: (t: Icountries_CountrySelector) => T
	) => Field<'country', never, SelectionSet<T>>;

	readonly name: () => Field<'name'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const countries_StateSelector: Icountries_StateSelector = {
	__typename: () => field('__typename'),
	code: () => field('code'),

	country: (select) => field('country', undefined as never, selectionSet(select(countries_CountrySelector))),

	name: () => field('name'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const countries_State = <T extends ReadonlyArray<Selection>>(select: (t: Icountries_StateSelector) => T) =>
	new SelectionBuilder<ISchema, 'countries_State', T>(
		SCHEMA as any,
		'countries_State',
		select(countries_StateSelector)
	);

interface Ispacex_AddressSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly address: () => Field<'address'>;

	readonly city: () => Field<'city'>;

	readonly state: () => Field<'state'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_AddressSelector: Ispacex_AddressSelector = {
	__typename: () => field('__typename'),
	address: () => field('address'),
	city: () => field('city'),
	state: () => field('state'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Address = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_AddressSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Address', T>(SCHEMA as any, 'spacex_Address', select(spacex_AddressSelector));

interface Ispacex_CapsuleSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly dragon: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_DragonSelector) => T
	) => Field<'dragon', never, SelectionSet<T>>;

	readonly id: () => Field<'id'>;

	readonly landings: () => Field<'landings'>;

	readonly missions: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_CapsuleMissionSelector) => T
	) => Field<'missions', never, SelectionSet<T>>;

	readonly original_launch: () => Field<'original_launch'>;

	readonly reuse_count: () => Field<'reuse_count'>;

	readonly status: () => Field<'status'>;

	readonly type: () => Field<'type'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_CapsuleSelector: Ispacex_CapsuleSelector = {
	__typename: () => field('__typename'),

	dragon: (select) => field('dragon', undefined as never, selectionSet(select(spacex_DragonSelector))),

	id: () => field('id'),
	landings: () => field('landings'),

	missions: (select) => field('missions', undefined as never, selectionSet(select(spacex_CapsuleMissionSelector))),

	original_launch: () => field('original_launch'),
	reuse_count: () => field('reuse_count'),
	status: () => field('status'),
	type: () => field('type'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Capsule = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_CapsuleSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Capsule', T>(SCHEMA as any, 'spacex_Capsule', select(spacex_CapsuleSelector));

interface Ispacex_CapsuleMissionSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly flight: () => Field<'flight'>;

	readonly name: () => Field<'name'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_CapsuleMissionSelector: Ispacex_CapsuleMissionSelector = {
	__typename: () => field('__typename'),
	flight: () => field('flight'),
	name: () => field('name'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_CapsuleMission = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_CapsuleMissionSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_CapsuleMission', T>(
		SCHEMA as any,
		'spacex_CapsuleMission',
		select(spacex_CapsuleMissionSelector)
	);

interface Ispacex_CoreSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly asds_attempts: () => Field<'asds_attempts'>;

	readonly asds_landings: () => Field<'asds_landings'>;

	readonly block: () => Field<'block'>;

	readonly id: () => Field<'id'>;

	readonly missions: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_CapsuleMissionSelector) => T
	) => Field<'missions', never, SelectionSet<T>>;

	readonly original_launch: () => Field<'original_launch'>;

	readonly reuse_count: () => Field<'reuse_count'>;

	readonly rtls_attempts: () => Field<'rtls_attempts'>;

	readonly rtls_landings: () => Field<'rtls_landings'>;

	readonly status: () => Field<'status'>;

	readonly water_landing: () => Field<'water_landing'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_CoreSelector: Ispacex_CoreSelector = {
	__typename: () => field('__typename'),
	asds_attempts: () => field('asds_attempts'),
	asds_landings: () => field('asds_landings'),
	block: () => field('block'),
	id: () => field('id'),

	missions: (select) => field('missions', undefined as never, selectionSet(select(spacex_CapsuleMissionSelector))),

	original_launch: () => field('original_launch'),
	reuse_count: () => field('reuse_count'),
	rtls_attempts: () => field('rtls_attempts'),
	rtls_landings: () => field('rtls_landings'),
	status: () => field('status'),
	water_landing: () => field('water_landing'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Core = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_CoreSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Core', T>(SCHEMA as any, 'spacex_Core', select(spacex_CoreSelector));

interface Ispacex_CoreMissionSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly flight: () => Field<'flight'>;

	readonly name: () => Field<'name'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_CoreMissionSelector: Ispacex_CoreMissionSelector = {
	__typename: () => field('__typename'),
	flight: () => field('flight'),
	name: () => field('name'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_CoreMission = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_CoreMissionSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_CoreMission', T>(
		SCHEMA as any,
		'spacex_CoreMission',
		select(spacex_CoreMissionSelector)
	);

interface Ispacex_DistanceSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly feet: () => Field<'feet'>;

	readonly meters: () => Field<'meters'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_DistanceSelector: Ispacex_DistanceSelector = {
	__typename: () => field('__typename'),
	feet: () => field('feet'),
	meters: () => field('meters'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Distance = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_DistanceSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Distance', T>(
		SCHEMA as any,
		'spacex_Distance',
		select(spacex_DistanceSelector)
	);

interface Ispacex_DragonSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly active: () => Field<'active'>;

	readonly crew_capacity: () => Field<'crew_capacity'>;

	readonly description: () => Field<'description'>;

	readonly diameter: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_DistanceSelector) => T
	) => Field<'diameter', never, SelectionSet<T>>;

	readonly dry_mass_kg: () => Field<'dry_mass_kg'>;

	readonly dry_mass_lb: () => Field<'dry_mass_lb'>;

	readonly first_flight: () => Field<'first_flight'>;

	readonly heat_shield: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_DragonHeatShieldSelector) => T
	) => Field<'heat_shield', never, SelectionSet<T>>;

	readonly height_w_trunk: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_DistanceSelector) => T
	) => Field<'height_w_trunk', never, SelectionSet<T>>;

	readonly id: () => Field<'id'>;

	readonly launch_payload_mass: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_MassSelector) => T
	) => Field<'launch_payload_mass', never, SelectionSet<T>>;

	readonly launch_payload_vol: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_VolumeSelector) => T
	) => Field<'launch_payload_vol', never, SelectionSet<T>>;

	readonly name: () => Field<'name'>;

	readonly orbit_duration_yr: () => Field<'orbit_duration_yr'>;

	readonly pressurized_capsule: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_DragonPressurizedCapsuleSelector) => T
	) => Field<'pressurized_capsule', never, SelectionSet<T>>;

	readonly return_payload_mass: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_MassSelector) => T
	) => Field<'return_payload_mass', never, SelectionSet<T>>;

	readonly return_payload_vol: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_VolumeSelector) => T
	) => Field<'return_payload_vol', never, SelectionSet<T>>;

	readonly sidewall_angle_deg: () => Field<'sidewall_angle_deg'>;

	readonly thrusters: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_DragonThrustSelector) => T
	) => Field<'thrusters', never, SelectionSet<T>>;

	readonly trunk: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_DragonTrunkSelector) => T
	) => Field<'trunk', never, SelectionSet<T>>;

	readonly type: () => Field<'type'>;

	readonly wikipedia: () => Field<'wikipedia'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_DragonSelector: Ispacex_DragonSelector = {
	__typename: () => field('__typename'),
	active: () => field('active'),
	crew_capacity: () => field('crew_capacity'),
	description: () => field('description'),

	diameter: (select) => field('diameter', undefined as never, selectionSet(select(spacex_DistanceSelector))),

	dry_mass_kg: () => field('dry_mass_kg'),
	dry_mass_lb: () => field('dry_mass_lb'),
	first_flight: () => field('first_flight'),

	heat_shield: (select) =>
		field('heat_shield', undefined as never, selectionSet(select(spacex_DragonHeatShieldSelector))),

	height_w_trunk: (select) =>
		field('height_w_trunk', undefined as never, selectionSet(select(spacex_DistanceSelector))),

	id: () => field('id'),

	launch_payload_mass: (select) =>
		field('launch_payload_mass', undefined as never, selectionSet(select(spacex_MassSelector))),

	launch_payload_vol: (select) =>
		field('launch_payload_vol', undefined as never, selectionSet(select(spacex_VolumeSelector))),

	name: () => field('name'),
	orbit_duration_yr: () => field('orbit_duration_yr'),

	pressurized_capsule: (select) =>
		field('pressurized_capsule', undefined as never, selectionSet(select(spacex_DragonPressurizedCapsuleSelector))),

	return_payload_mass: (select) =>
		field('return_payload_mass', undefined as never, selectionSet(select(spacex_MassSelector))),

	return_payload_vol: (select) =>
		field('return_payload_vol', undefined as never, selectionSet(select(spacex_VolumeSelector))),

	sidewall_angle_deg: () => field('sidewall_angle_deg'),

	thrusters: (select) => field('thrusters', undefined as never, selectionSet(select(spacex_DragonThrustSelector))),

	trunk: (select) => field('trunk', undefined as never, selectionSet(select(spacex_DragonTrunkSelector))),

	type: () => field('type'),
	wikipedia: () => field('wikipedia'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Dragon = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_DragonSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Dragon', T>(SCHEMA as any, 'spacex_Dragon', select(spacex_DragonSelector));

interface Ispacex_DragonHeatShieldSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly dev_partner: () => Field<'dev_partner'>;

	readonly material: () => Field<'material'>;

	readonly size_meters: () => Field<'size_meters'>;

	readonly temp_degrees: () => Field<'temp_degrees'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_DragonHeatShieldSelector: Ispacex_DragonHeatShieldSelector = {
	__typename: () => field('__typename'),
	dev_partner: () => field('dev_partner'),
	material: () => field('material'),
	size_meters: () => field('size_meters'),
	temp_degrees: () => field('temp_degrees'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_DragonHeatShield = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_DragonHeatShieldSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_DragonHeatShield', T>(
		SCHEMA as any,
		'spacex_DragonHeatShield',
		select(spacex_DragonHeatShieldSelector)
	);

interface Ispacex_DragonPressurizedCapsuleSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly payload_volume: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_VolumeSelector) => T
	) => Field<'payload_volume', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_DragonPressurizedCapsuleSelector: Ispacex_DragonPressurizedCapsuleSelector = {
	__typename: () => field('__typename'),

	payload_volume: (select) => field('payload_volume', undefined as never, selectionSet(select(spacex_VolumeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_DragonPressurizedCapsule = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_DragonPressurizedCapsuleSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_DragonPressurizedCapsule', T>(
		SCHEMA as any,
		'spacex_DragonPressurizedCapsule',
		select(spacex_DragonPressurizedCapsuleSelector)
	);

interface Ispacex_DragonThrustSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly amount: () => Field<'amount'>;

	readonly fuel_1: () => Field<'fuel_1'>;

	readonly fuel_2: () => Field<'fuel_2'>;

	readonly pods: () => Field<'pods'>;

	readonly thrust: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_ForceSelector) => T
	) => Field<'thrust', never, SelectionSet<T>>;

	readonly type: () => Field<'type'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_DragonThrustSelector: Ispacex_DragonThrustSelector = {
	__typename: () => field('__typename'),
	amount: () => field('amount'),
	fuel_1: () => field('fuel_1'),
	fuel_2: () => field('fuel_2'),
	pods: () => field('pods'),

	thrust: (select) => field('thrust', undefined as never, selectionSet(select(spacex_ForceSelector))),

	type: () => field('type'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_DragonThrust = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_DragonThrustSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_DragonThrust', T>(
		SCHEMA as any,
		'spacex_DragonThrust',
		select(spacex_DragonThrustSelector)
	);

interface Ispacex_DragonTrunkSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly cargo: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_DragonTrunkCargoSelector) => T
	) => Field<'cargo', never, SelectionSet<T>>;

	readonly trunk_volume: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_VolumeSelector) => T
	) => Field<'trunk_volume', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_DragonTrunkSelector: Ispacex_DragonTrunkSelector = {
	__typename: () => field('__typename'),

	cargo: (select) => field('cargo', undefined as never, selectionSet(select(spacex_DragonTrunkCargoSelector))),

	trunk_volume: (select) => field('trunk_volume', undefined as never, selectionSet(select(spacex_VolumeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_DragonTrunk = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_DragonTrunkSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_DragonTrunk', T>(
		SCHEMA as any,
		'spacex_DragonTrunk',
		select(spacex_DragonTrunkSelector)
	);

interface Ispacex_DragonTrunkCargoSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly solar_array: () => Field<'solar_array'>;

	readonly unpressurized_cargo: () => Field<'unpressurized_cargo'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_DragonTrunkCargoSelector: Ispacex_DragonTrunkCargoSelector = {
	__typename: () => field('__typename'),
	solar_array: () => field('solar_array'),
	unpressurized_cargo: () => field('unpressurized_cargo'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_DragonTrunkCargo = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_DragonTrunkCargoSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_DragonTrunkCargo', T>(
		SCHEMA as any,
		'spacex_DragonTrunkCargo',
		select(spacex_DragonTrunkCargoSelector)
	);

interface Ispacex_ForceSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly kN: () => Field<'kN'>;

	readonly lbf: () => Field<'lbf'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_ForceSelector: Ispacex_ForceSelector = {
	__typename: () => field('__typename'),
	kN: () => field('kN'),
	lbf: () => field('lbf'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Force = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_ForceSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Force', T>(SCHEMA as any, 'spacex_Force', select(spacex_ForceSelector));

interface Ispacex_HistoriesResultSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly data: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_HistorySelector) => T
	) => Field<'data', never, SelectionSet<T>>;

	readonly result: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_ResultSelector) => T
	) => Field<'result', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_HistoriesResultSelector: Ispacex_HistoriesResultSelector = {
	__typename: () => field('__typename'),

	data: (select) => field('data', undefined as never, selectionSet(select(spacex_HistorySelector))),

	result: (select) => field('result', undefined as never, selectionSet(select(spacex_ResultSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_HistoriesResult = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_HistoriesResultSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_HistoriesResult', T>(
		SCHEMA as any,
		'spacex_HistoriesResult',
		select(spacex_HistoriesResultSelector)
	);

interface Ispacex_HistorySelector {
	readonly __typename: () => Field<'__typename'>;

	readonly details: () => Field<'details'>;

	readonly event_date_unix: () => Field<'event_date_unix'>;

	readonly event_date_utc: () => Field<'event_date_utc'>;

	readonly flight: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_LaunchSelector) => T
	) => Field<'flight', never, SelectionSet<T>>;

	readonly id: () => Field<'id'>;

	readonly links: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_LinkSelector) => T
	) => Field<'links', never, SelectionSet<T>>;

	readonly title: () => Field<'title'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_HistorySelector: Ispacex_HistorySelector = {
	__typename: () => field('__typename'),
	details: () => field('details'),
	event_date_unix: () => field('event_date_unix'),
	event_date_utc: () => field('event_date_utc'),

	flight: (select) => field('flight', undefined as never, selectionSet(select(spacex_LaunchSelector))),

	id: () => field('id'),

	links: (select) => field('links', undefined as never, selectionSet(select(spacex_LinkSelector))),

	title: () => field('title'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_History = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_HistorySelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_History', T>(SCHEMA as any, 'spacex_History', select(spacex_HistorySelector));

interface Ispacex_InfoSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly ceo: () => Field<'ceo'>;

	readonly coo: () => Field<'coo'>;

	readonly cto: () => Field<'cto'>;

	readonly cto_propulsion: () => Field<'cto_propulsion'>;

	readonly employees: () => Field<'employees'>;

	readonly founded: () => Field<'founded'>;

	readonly founder: () => Field<'founder'>;

	readonly headquarters: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_AddressSelector) => T
	) => Field<'headquarters', never, SelectionSet<T>>;

	readonly launch_sites: () => Field<'launch_sites'>;

	readonly links: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_InfoLinksSelector) => T
	) => Field<'links', never, SelectionSet<T>>;

	readonly name: () => Field<'name'>;

	readonly summary: () => Field<'summary'>;

	readonly test_sites: () => Field<'test_sites'>;

	readonly valuation: () => Field<'valuation'>;

	readonly vehicles: () => Field<'vehicles'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_InfoSelector: Ispacex_InfoSelector = {
	__typename: () => field('__typename'),
	ceo: () => field('ceo'),
	coo: () => field('coo'),
	cto: () => field('cto'),
	cto_propulsion: () => field('cto_propulsion'),
	employees: () => field('employees'),
	founded: () => field('founded'),
	founder: () => field('founder'),

	headquarters: (select) => field('headquarters', undefined as never, selectionSet(select(spacex_AddressSelector))),

	launch_sites: () => field('launch_sites'),

	links: (select) => field('links', undefined as never, selectionSet(select(spacex_InfoLinksSelector))),

	name: () => field('name'),
	summary: () => field('summary'),
	test_sites: () => field('test_sites'),
	valuation: () => field('valuation'),
	vehicles: () => field('vehicles'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Info = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_InfoSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Info', T>(SCHEMA as any, 'spacex_Info', select(spacex_InfoSelector));

interface Ispacex_InfoLinksSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly elon_twitter: () => Field<'elon_twitter'>;

	readonly flickr: () => Field<'flickr'>;

	readonly twitter: () => Field<'twitter'>;

	readonly website: () => Field<'website'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_InfoLinksSelector: Ispacex_InfoLinksSelector = {
	__typename: () => field('__typename'),
	elon_twitter: () => field('elon_twitter'),
	flickr: () => field('flickr'),
	twitter: () => field('twitter'),
	website: () => field('website'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_InfoLinks = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_InfoLinksSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_InfoLinks', T>(
		SCHEMA as any,
		'spacex_InfoLinks',
		select(spacex_InfoLinksSelector)
	);

interface Ispacex_LandpadSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly attempted_landings: () => Field<'attempted_landings'>;

	readonly details: () => Field<'details'>;

	readonly full_name: () => Field<'full_name'>;

	readonly id: () => Field<'id'>;

	readonly landing_type: () => Field<'landing_type'>;

	readonly location: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_LocationSelector) => T
	) => Field<'location', never, SelectionSet<T>>;

	readonly status: () => Field<'status'>;

	readonly successful_landings: () => Field<'successful_landings'>;

	readonly wikipedia: () => Field<'wikipedia'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_LandpadSelector: Ispacex_LandpadSelector = {
	__typename: () => field('__typename'),
	attempted_landings: () => field('attempted_landings'),
	details: () => field('details'),
	full_name: () => field('full_name'),
	id: () => field('id'),
	landing_type: () => field('landing_type'),

	location: (select) => field('location', undefined as never, selectionSet(select(spacex_LocationSelector))),

	status: () => field('status'),
	successful_landings: () => field('successful_landings'),
	wikipedia: () => field('wikipedia'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Landpad = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_LandpadSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Landpad', T>(SCHEMA as any, 'spacex_Landpad', select(spacex_LandpadSelector));

interface Ispacex_LaunchSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly details: () => Field<'details'>;

	readonly id: () => Field<'id'>;

	readonly is_tentative: () => Field<'is_tentative'>;

	readonly launch_date_local: () => Field<'launch_date_local'>;

	readonly launch_date_unix: () => Field<'launch_date_unix'>;

	readonly launch_date_utc: () => Field<'launch_date_utc'>;

	readonly launch_site: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_LaunchSiteSelector) => T
	) => Field<'launch_site', never, SelectionSet<T>>;

	readonly launch_success: () => Field<'launch_success'>;

	readonly launch_year: () => Field<'launch_year'>;

	readonly links: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_LaunchLinksSelector) => T
	) => Field<'links', never, SelectionSet<T>>;

	readonly mission_id: () => Field<'mission_id'>;

	readonly mission_name: () => Field<'mission_name'>;

	readonly rocket: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_LaunchRocketSelector) => T
	) => Field<'rocket', never, SelectionSet<T>>;

	readonly ships: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_ShipSelector) => T
	) => Field<'ships', never, SelectionSet<T>>;

	readonly static_fire_date_unix: () => Field<'static_fire_date_unix'>;

	readonly static_fire_date_utc: () => Field<'static_fire_date_utc'>;

	readonly telemetry: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_LaunchTelemetrySelector) => T
	) => Field<'telemetry', never, SelectionSet<T>>;

	readonly tentative_max_precision: () => Field<'tentative_max_precision'>;

	readonly upcoming: () => Field<'upcoming'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_LaunchSelector: Ispacex_LaunchSelector = {
	__typename: () => field('__typename'),
	details: () => field('details'),
	id: () => field('id'),
	is_tentative: () => field('is_tentative'),
	launch_date_local: () => field('launch_date_local'),
	launch_date_unix: () => field('launch_date_unix'),
	launch_date_utc: () => field('launch_date_utc'),

	launch_site: (select) => field('launch_site', undefined as never, selectionSet(select(spacex_LaunchSiteSelector))),

	launch_success: () => field('launch_success'),
	launch_year: () => field('launch_year'),

	links: (select) => field('links', undefined as never, selectionSet(select(spacex_LaunchLinksSelector))),

	mission_id: () => field('mission_id'),
	mission_name: () => field('mission_name'),

	rocket: (select) => field('rocket', undefined as never, selectionSet(select(spacex_LaunchRocketSelector))),

	ships: (select) => field('ships', undefined as never, selectionSet(select(spacex_ShipSelector))),

	static_fire_date_unix: () => field('static_fire_date_unix'),
	static_fire_date_utc: () => field('static_fire_date_utc'),

	telemetry: (select) => field('telemetry', undefined as never, selectionSet(select(spacex_LaunchTelemetrySelector))),

	tentative_max_precision: () => field('tentative_max_precision'),
	upcoming: () => field('upcoming'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Launch = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_LaunchSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Launch', T>(SCHEMA as any, 'spacex_Launch', select(spacex_LaunchSelector));

interface Ispacex_LaunchLinksSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly article_link: () => Field<'article_link'>;

	readonly flickr_images: () => Field<'flickr_images'>;

	readonly mission_patch: () => Field<'mission_patch'>;

	readonly mission_patch_small: () => Field<'mission_patch_small'>;

	readonly presskit: () => Field<'presskit'>;

	readonly reddit_campaign: () => Field<'reddit_campaign'>;

	readonly reddit_launch: () => Field<'reddit_launch'>;

	readonly reddit_media: () => Field<'reddit_media'>;

	readonly reddit_recovery: () => Field<'reddit_recovery'>;

	readonly video_link: () => Field<'video_link'>;

	readonly wikipedia: () => Field<'wikipedia'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_LaunchLinksSelector: Ispacex_LaunchLinksSelector = {
	__typename: () => field('__typename'),
	article_link: () => field('article_link'),
	flickr_images: () => field('flickr_images'),
	mission_patch: () => field('mission_patch'),
	mission_patch_small: () => field('mission_patch_small'),
	presskit: () => field('presskit'),
	reddit_campaign: () => field('reddit_campaign'),
	reddit_launch: () => field('reddit_launch'),
	reddit_media: () => field('reddit_media'),
	reddit_recovery: () => field('reddit_recovery'),
	video_link: () => field('video_link'),
	wikipedia: () => field('wikipedia'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_LaunchLinks = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_LaunchLinksSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_LaunchLinks', T>(
		SCHEMA as any,
		'spacex_LaunchLinks',
		select(spacex_LaunchLinksSelector)
	);

interface Ispacex_LaunchRocketSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly fairings: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_LaunchRocketFairingsSelector) => T
	) => Field<'fairings', never, SelectionSet<T>>;

	readonly first_stage: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_LaunchRocketFirstStageSelector) => T
	) => Field<'first_stage', never, SelectionSet<T>>;

	readonly rocket: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_RocketSelector) => T
	) => Field<'rocket', never, SelectionSet<T>>;

	readonly rocket_name: () => Field<'rocket_name'>;

	readonly rocket_type: () => Field<'rocket_type'>;

	readonly second_stage: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_LaunchRocketSecondStageSelector) => T
	) => Field<'second_stage', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_LaunchRocketSelector: Ispacex_LaunchRocketSelector = {
	__typename: () => field('__typename'),

	fairings: (select) =>
		field('fairings', undefined as never, selectionSet(select(spacex_LaunchRocketFairingsSelector))),

	first_stage: (select) =>
		field('first_stage', undefined as never, selectionSet(select(spacex_LaunchRocketFirstStageSelector))),

	rocket: (select) => field('rocket', undefined as never, selectionSet(select(spacex_RocketSelector))),

	rocket_name: () => field('rocket_name'),
	rocket_type: () => field('rocket_type'),

	second_stage: (select) =>
		field('second_stage', undefined as never, selectionSet(select(spacex_LaunchRocketSecondStageSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_LaunchRocket = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_LaunchRocketSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_LaunchRocket', T>(
		SCHEMA as any,
		'spacex_LaunchRocket',
		select(spacex_LaunchRocketSelector)
	);

interface Ispacex_LaunchRocketFairingsSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly recovered: () => Field<'recovered'>;

	readonly recovery_attempt: () => Field<'recovery_attempt'>;

	readonly reused: () => Field<'reused'>;

	readonly ship: () => Field<'ship'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_LaunchRocketFairingsSelector: Ispacex_LaunchRocketFairingsSelector = {
	__typename: () => field('__typename'),
	recovered: () => field('recovered'),
	recovery_attempt: () => field('recovery_attempt'),
	reused: () => field('reused'),
	ship: () => field('ship'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_LaunchRocketFairings = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_LaunchRocketFairingsSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_LaunchRocketFairings', T>(
		SCHEMA as any,
		'spacex_LaunchRocketFairings',
		select(spacex_LaunchRocketFairingsSelector)
	);

interface Ispacex_LaunchRocketFirstStageSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly cores: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_LaunchRocketFirstStageCoreSelector) => T
	) => Field<'cores', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_LaunchRocketFirstStageSelector: Ispacex_LaunchRocketFirstStageSelector = {
	__typename: () => field('__typename'),

	cores: (select) =>
		field('cores', undefined as never, selectionSet(select(spacex_LaunchRocketFirstStageCoreSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_LaunchRocketFirstStage = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_LaunchRocketFirstStageSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_LaunchRocketFirstStage', T>(
		SCHEMA as any,
		'spacex_LaunchRocketFirstStage',
		select(spacex_LaunchRocketFirstStageSelector)
	);

interface Ispacex_LaunchRocketFirstStageCoreSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly block: () => Field<'block'>;

	readonly core: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_CoreSelector) => T
	) => Field<'core', never, SelectionSet<T>>;

	readonly flight: () => Field<'flight'>;

	readonly gridfins: () => Field<'gridfins'>;

	readonly land_success: () => Field<'land_success'>;

	readonly landing_intent: () => Field<'landing_intent'>;

	readonly landing_type: () => Field<'landing_type'>;

	readonly landing_vehicle: () => Field<'landing_vehicle'>;

	readonly legs: () => Field<'legs'>;

	readonly reused: () => Field<'reused'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_LaunchRocketFirstStageCoreSelector: Ispacex_LaunchRocketFirstStageCoreSelector = {
	__typename: () => field('__typename'),
	block: () => field('block'),

	core: (select) => field('core', undefined as never, selectionSet(select(spacex_CoreSelector))),

	flight: () => field('flight'),
	gridfins: () => field('gridfins'),
	land_success: () => field('land_success'),
	landing_intent: () => field('landing_intent'),
	landing_type: () => field('landing_type'),
	landing_vehicle: () => field('landing_vehicle'),
	legs: () => field('legs'),
	reused: () => field('reused'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_LaunchRocketFirstStageCore = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_LaunchRocketFirstStageCoreSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_LaunchRocketFirstStageCore', T>(
		SCHEMA as any,
		'spacex_LaunchRocketFirstStageCore',
		select(spacex_LaunchRocketFirstStageCoreSelector)
	);

interface Ispacex_LaunchRocketSecondStageSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly block: () => Field<'block'>;

	readonly payloads: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_PayloadSelector) => T
	) => Field<'payloads', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_LaunchRocketSecondStageSelector: Ispacex_LaunchRocketSecondStageSelector = {
	__typename: () => field('__typename'),
	block: () => field('block'),

	payloads: (select) => field('payloads', undefined as never, selectionSet(select(spacex_PayloadSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_LaunchRocketSecondStage = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_LaunchRocketSecondStageSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_LaunchRocketSecondStage', T>(
		SCHEMA as any,
		'spacex_LaunchRocketSecondStage',
		select(spacex_LaunchRocketSecondStageSelector)
	);

interface Ispacex_LaunchSiteSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly site_id: () => Field<'site_id'>;

	readonly site_name: () => Field<'site_name'>;

	readonly site_name_long: () => Field<'site_name_long'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_LaunchSiteSelector: Ispacex_LaunchSiteSelector = {
	__typename: () => field('__typename'),
	site_id: () => field('site_id'),
	site_name: () => field('site_name'),
	site_name_long: () => field('site_name_long'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_LaunchSite = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_LaunchSiteSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_LaunchSite', T>(
		SCHEMA as any,
		'spacex_LaunchSite',
		select(spacex_LaunchSiteSelector)
	);

interface Ispacex_LaunchTelemetrySelector {
	readonly __typename: () => Field<'__typename'>;

	readonly flight_club: () => Field<'flight_club'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_LaunchTelemetrySelector: Ispacex_LaunchTelemetrySelector = {
	__typename: () => field('__typename'),
	flight_club: () => field('flight_club'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_LaunchTelemetry = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_LaunchTelemetrySelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_LaunchTelemetry', T>(
		SCHEMA as any,
		'spacex_LaunchTelemetry',
		select(spacex_LaunchTelemetrySelector)
	);

interface Ispacex_LaunchesPastResultSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly data: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_LaunchSelector) => T
	) => Field<'data', never, SelectionSet<T>>;

	readonly result: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_ResultSelector) => T
	) => Field<'result', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_LaunchesPastResultSelector: Ispacex_LaunchesPastResultSelector = {
	__typename: () => field('__typename'),

	data: (select) => field('data', undefined as never, selectionSet(select(spacex_LaunchSelector))),

	result: (select) => field('result', undefined as never, selectionSet(select(spacex_ResultSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_LaunchesPastResult = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_LaunchesPastResultSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_LaunchesPastResult', T>(
		SCHEMA as any,
		'spacex_LaunchesPastResult',
		select(spacex_LaunchesPastResultSelector)
	);

interface Ispacex_LaunchpadSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly attempted_launches: () => Field<'attempted_launches'>;

	readonly details: () => Field<'details'>;

	readonly id: () => Field<'id'>;

	readonly location: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_LocationSelector) => T
	) => Field<'location', never, SelectionSet<T>>;

	readonly name: () => Field<'name'>;

	readonly status: () => Field<'status'>;

	readonly successful_launches: () => Field<'successful_launches'>;

	readonly vehicles_launched: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_RocketSelector) => T
	) => Field<'vehicles_launched', never, SelectionSet<T>>;

	readonly wikipedia: () => Field<'wikipedia'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_LaunchpadSelector: Ispacex_LaunchpadSelector = {
	__typename: () => field('__typename'),
	attempted_launches: () => field('attempted_launches'),
	details: () => field('details'),
	id: () => field('id'),

	location: (select) => field('location', undefined as never, selectionSet(select(spacex_LocationSelector))),

	name: () => field('name'),
	status: () => field('status'),
	successful_launches: () => field('successful_launches'),

	vehicles_launched: (select) =>
		field('vehicles_launched', undefined as never, selectionSet(select(spacex_RocketSelector))),

	wikipedia: () => field('wikipedia'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Launchpad = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_LaunchpadSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Launchpad', T>(
		SCHEMA as any,
		'spacex_Launchpad',
		select(spacex_LaunchpadSelector)
	);

interface Ispacex_LinkSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly article: () => Field<'article'>;

	readonly reddit: () => Field<'reddit'>;

	readonly wikipedia: () => Field<'wikipedia'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_LinkSelector: Ispacex_LinkSelector = {
	__typename: () => field('__typename'),
	article: () => field('article'),
	reddit: () => field('reddit'),
	wikipedia: () => field('wikipedia'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Link = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_LinkSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Link', T>(SCHEMA as any, 'spacex_Link', select(spacex_LinkSelector));

interface Ispacex_LocationSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly latitude: () => Field<'latitude'>;

	readonly longitude: () => Field<'longitude'>;

	readonly name: () => Field<'name'>;

	readonly region: () => Field<'region'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_LocationSelector: Ispacex_LocationSelector = {
	__typename: () => field('__typename'),
	latitude: () => field('latitude'),
	longitude: () => field('longitude'),
	name: () => field('name'),
	region: () => field('region'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Location = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_LocationSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Location', T>(
		SCHEMA as any,
		'spacex_Location',
		select(spacex_LocationSelector)
	);

interface Ispacex_MassSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly kg: () => Field<'kg'>;

	readonly lb: () => Field<'lb'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_MassSelector: Ispacex_MassSelector = {
	__typename: () => field('__typename'),
	kg: () => field('kg'),
	lb: () => field('lb'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Mass = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_MassSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Mass', T>(SCHEMA as any, 'spacex_Mass', select(spacex_MassSelector));

interface Ispacex_MissionSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly description: () => Field<'description'>;

	readonly id: () => Field<'id'>;

	readonly manufacturers: () => Field<'manufacturers'>;

	readonly name: () => Field<'name'>;

	readonly payloads: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_PayloadSelector) => T
	) => Field<'payloads', never, SelectionSet<T>>;

	readonly twitter: () => Field<'twitter'>;

	readonly website: () => Field<'website'>;

	readonly wikipedia: () => Field<'wikipedia'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_MissionSelector: Ispacex_MissionSelector = {
	__typename: () => field('__typename'),
	description: () => field('description'),
	id: () => field('id'),
	manufacturers: () => field('manufacturers'),
	name: () => field('name'),

	payloads: (select) => field('payloads', undefined as never, selectionSet(select(spacex_PayloadSelector))),

	twitter: () => field('twitter'),
	website: () => field('website'),
	wikipedia: () => field('wikipedia'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Mission = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_MissionSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Mission', T>(SCHEMA as any, 'spacex_Mission', select(spacex_MissionSelector));

interface Ispacex_MissionResultSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly data: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_MissionSelector) => T
	) => Field<'data', never, SelectionSet<T>>;

	readonly result: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_ResultSelector) => T
	) => Field<'result', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_MissionResultSelector: Ispacex_MissionResultSelector = {
	__typename: () => field('__typename'),

	data: (select) => field('data', undefined as never, selectionSet(select(spacex_MissionSelector))),

	result: (select) => field('result', undefined as never, selectionSet(select(spacex_ResultSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_MissionResult = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_MissionResultSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_MissionResult', T>(
		SCHEMA as any,
		'spacex_MissionResult',
		select(spacex_MissionResultSelector)
	);

interface Ispacex_PayloadSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly customers: () => Field<'customers'>;

	readonly id: () => Field<'id'>;

	readonly manufacturer: () => Field<'manufacturer'>;

	readonly nationality: () => Field<'nationality'>;

	readonly norad_id: () => Field<'norad_id'>;

	readonly orbit: () => Field<'orbit'>;

	readonly orbit_params: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_PayloadOrbitParamsSelector) => T
	) => Field<'orbit_params', never, SelectionSet<T>>;

	readonly payload_mass_kg: () => Field<'payload_mass_kg'>;

	readonly payload_mass_lbs: () => Field<'payload_mass_lbs'>;

	readonly payload_type: () => Field<'payload_type'>;

	readonly reused: () => Field<'reused'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_PayloadSelector: Ispacex_PayloadSelector = {
	__typename: () => field('__typename'),
	customers: () => field('customers'),
	id: () => field('id'),
	manufacturer: () => field('manufacturer'),
	nationality: () => field('nationality'),
	norad_id: () => field('norad_id'),
	orbit: () => field('orbit'),

	orbit_params: (select) =>
		field('orbit_params', undefined as never, selectionSet(select(spacex_PayloadOrbitParamsSelector))),

	payload_mass_kg: () => field('payload_mass_kg'),
	payload_mass_lbs: () => field('payload_mass_lbs'),
	payload_type: () => field('payload_type'),
	reused: () => field('reused'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Payload = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_PayloadSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Payload', T>(SCHEMA as any, 'spacex_Payload', select(spacex_PayloadSelector));

interface Ispacex_PayloadOrbitParamsSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly apoapsis_km: () => Field<'apoapsis_km'>;

	readonly arg_of_pericenter: () => Field<'arg_of_pericenter'>;

	readonly eccentricity: () => Field<'eccentricity'>;

	readonly epoch: () => Field<'epoch'>;

	readonly inclination_deg: () => Field<'inclination_deg'>;

	readonly lifespan_years: () => Field<'lifespan_years'>;

	readonly longitude: () => Field<'longitude'>;

	readonly mean_anomaly: () => Field<'mean_anomaly'>;

	readonly mean_motion: () => Field<'mean_motion'>;

	readonly periapsis_km: () => Field<'periapsis_km'>;

	readonly period_min: () => Field<'period_min'>;

	readonly raan: () => Field<'raan'>;

	readonly reference_system: () => Field<'reference_system'>;

	readonly regime: () => Field<'regime'>;

	readonly semi_major_axis_km: () => Field<'semi_major_axis_km'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_PayloadOrbitParamsSelector: Ispacex_PayloadOrbitParamsSelector = {
	__typename: () => field('__typename'),
	apoapsis_km: () => field('apoapsis_km'),
	arg_of_pericenter: () => field('arg_of_pericenter'),
	eccentricity: () => field('eccentricity'),
	epoch: () => field('epoch'),
	inclination_deg: () => field('inclination_deg'),
	lifespan_years: () => field('lifespan_years'),
	longitude: () => field('longitude'),
	mean_anomaly: () => field('mean_anomaly'),
	mean_motion: () => field('mean_motion'),
	periapsis_km: () => field('periapsis_km'),
	period_min: () => field('period_min'),
	raan: () => field('raan'),
	reference_system: () => field('reference_system'),
	regime: () => field('regime'),
	semi_major_axis_km: () => field('semi_major_axis_km'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_PayloadOrbitParams = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_PayloadOrbitParamsSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_PayloadOrbitParams', T>(
		SCHEMA as any,
		'spacex_PayloadOrbitParams',
		select(spacex_PayloadOrbitParamsSelector)
	);

interface Ispacex_ResultSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly totalCount: () => Field<'totalCount'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_ResultSelector: Ispacex_ResultSelector = {
	__typename: () => field('__typename'),
	totalCount: () => field('totalCount'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Result = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_ResultSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Result', T>(SCHEMA as any, 'spacex_Result', select(spacex_ResultSelector));

interface Ispacex_RoadsterSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly apoapsis_au: () => Field<'apoapsis_au'>;

	readonly details: () => Field<'details'>;

	readonly earth_distance_km: () => Field<'earth_distance_km'>;

	readonly earth_distance_mi: () => Field<'earth_distance_mi'>;

	readonly eccentricity: () => Field<'eccentricity'>;

	readonly epoch_jd: () => Field<'epoch_jd'>;

	readonly inclination: () => Field<'inclination'>;

	readonly launch_date_unix: () => Field<'launch_date_unix'>;

	readonly launch_date_utc: () => Field<'launch_date_utc'>;

	readonly launch_mass_kg: () => Field<'launch_mass_kg'>;

	readonly launch_mass_lbs: () => Field<'launch_mass_lbs'>;

	readonly longitude: () => Field<'longitude'>;

	readonly mars_distance_km: () => Field<'mars_distance_km'>;

	readonly mars_distance_mi: () => Field<'mars_distance_mi'>;

	readonly name: () => Field<'name'>;

	readonly norad_id: () => Field<'norad_id'>;

	readonly orbit_type: () => Field<'orbit_type'>;

	readonly periapsis_arg: () => Field<'periapsis_arg'>;

	readonly periapsis_au: () => Field<'periapsis_au'>;

	readonly period_days: () => Field<'period_days'>;

	readonly semi_major_axis_au: () => Field<'semi_major_axis_au'>;

	readonly speed_kph: () => Field<'speed_kph'>;

	readonly speed_mph: () => Field<'speed_mph'>;

	readonly wikipedia: () => Field<'wikipedia'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_RoadsterSelector: Ispacex_RoadsterSelector = {
	__typename: () => field('__typename'),
	apoapsis_au: () => field('apoapsis_au'),
	details: () => field('details'),
	earth_distance_km: () => field('earth_distance_km'),
	earth_distance_mi: () => field('earth_distance_mi'),
	eccentricity: () => field('eccentricity'),
	epoch_jd: () => field('epoch_jd'),
	inclination: () => field('inclination'),
	launch_date_unix: () => field('launch_date_unix'),
	launch_date_utc: () => field('launch_date_utc'),
	launch_mass_kg: () => field('launch_mass_kg'),
	launch_mass_lbs: () => field('launch_mass_lbs'),
	longitude: () => field('longitude'),
	mars_distance_km: () => field('mars_distance_km'),
	mars_distance_mi: () => field('mars_distance_mi'),
	name: () => field('name'),
	norad_id: () => field('norad_id'),
	orbit_type: () => field('orbit_type'),
	periapsis_arg: () => field('periapsis_arg'),
	periapsis_au: () => field('periapsis_au'),
	period_days: () => field('period_days'),
	semi_major_axis_au: () => field('semi_major_axis_au'),
	speed_kph: () => field('speed_kph'),
	speed_mph: () => field('speed_mph'),
	wikipedia: () => field('wikipedia'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Roadster = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_RoadsterSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Roadster', T>(
		SCHEMA as any,
		'spacex_Roadster',
		select(spacex_RoadsterSelector)
	);

interface Ispacex_RocketSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly active: () => Field<'active'>;

	readonly boosters: () => Field<'boosters'>;

	readonly company: () => Field<'company'>;

	readonly cost_per_launch: () => Field<'cost_per_launch'>;

	readonly country: () => Field<'country'>;

	readonly description: () => Field<'description'>;

	readonly diameter: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_DistanceSelector) => T
	) => Field<'diameter', never, SelectionSet<T>>;

	readonly engines: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_RocketEnginesSelector) => T
	) => Field<'engines', never, SelectionSet<T>>;

	readonly first_flight: () => Field<'first_flight'>;

	readonly first_stage: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_RocketFirstStageSelector) => T
	) => Field<'first_stage', never, SelectionSet<T>>;

	readonly height: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_DistanceSelector) => T
	) => Field<'height', never, SelectionSet<T>>;

	readonly id: () => Field<'id'>;

	readonly landing_legs: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_RocketLandingLegsSelector) => T
	) => Field<'landing_legs', never, SelectionSet<T>>;

	readonly mass: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_MassSelector) => T
	) => Field<'mass', never, SelectionSet<T>>;

	readonly name: () => Field<'name'>;

	readonly payload_weights: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_RocketPayloadWeightSelector) => T
	) => Field<'payload_weights', never, SelectionSet<T>>;

	readonly second_stage: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_RocketSecondStageSelector) => T
	) => Field<'second_stage', never, SelectionSet<T>>;

	readonly stages: () => Field<'stages'>;

	readonly success_rate_pct: () => Field<'success_rate_pct'>;

	readonly type: () => Field<'type'>;

	readonly wikipedia: () => Field<'wikipedia'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_RocketSelector: Ispacex_RocketSelector = {
	__typename: () => field('__typename'),
	active: () => field('active'),
	boosters: () => field('boosters'),
	company: () => field('company'),
	cost_per_launch: () => field('cost_per_launch'),
	country: () => field('country'),
	description: () => field('description'),

	diameter: (select) => field('diameter', undefined as never, selectionSet(select(spacex_DistanceSelector))),

	engines: (select) => field('engines', undefined as never, selectionSet(select(spacex_RocketEnginesSelector))),

	first_flight: () => field('first_flight'),

	first_stage: (select) =>
		field('first_stage', undefined as never, selectionSet(select(spacex_RocketFirstStageSelector))),

	height: (select) => field('height', undefined as never, selectionSet(select(spacex_DistanceSelector))),

	id: () => field('id'),

	landing_legs: (select) =>
		field('landing_legs', undefined as never, selectionSet(select(spacex_RocketLandingLegsSelector))),

	mass: (select) => field('mass', undefined as never, selectionSet(select(spacex_MassSelector))),

	name: () => field('name'),

	payload_weights: (select) =>
		field('payload_weights', undefined as never, selectionSet(select(spacex_RocketPayloadWeightSelector))),

	second_stage: (select) =>
		field('second_stage', undefined as never, selectionSet(select(spacex_RocketSecondStageSelector))),

	stages: () => field('stages'),
	success_rate_pct: () => field('success_rate_pct'),
	type: () => field('type'),
	wikipedia: () => field('wikipedia'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Rocket = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_RocketSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Rocket', T>(SCHEMA as any, 'spacex_Rocket', select(spacex_RocketSelector));

interface Ispacex_RocketEnginesSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly engine_loss_max: () => Field<'engine_loss_max'>;

	readonly layout: () => Field<'layout'>;

	readonly number: () => Field<'number'>;

	readonly propellant_1: () => Field<'propellant_1'>;

	readonly propellant_2: () => Field<'propellant_2'>;

	readonly thrust_sea_level: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_ForceSelector) => T
	) => Field<'thrust_sea_level', never, SelectionSet<T>>;

	readonly thrust_to_weight: () => Field<'thrust_to_weight'>;

	readonly thrust_vacuum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_ForceSelector) => T
	) => Field<'thrust_vacuum', never, SelectionSet<T>>;

	readonly type: () => Field<'type'>;

	readonly version: () => Field<'version'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_RocketEnginesSelector: Ispacex_RocketEnginesSelector = {
	__typename: () => field('__typename'),
	engine_loss_max: () => field('engine_loss_max'),
	layout: () => field('layout'),
	number: () => field('number'),
	propellant_1: () => field('propellant_1'),
	propellant_2: () => field('propellant_2'),

	thrust_sea_level: (select) =>
		field('thrust_sea_level', undefined as never, selectionSet(select(spacex_ForceSelector))),

	thrust_to_weight: () => field('thrust_to_weight'),

	thrust_vacuum: (select) => field('thrust_vacuum', undefined as never, selectionSet(select(spacex_ForceSelector))),

	type: () => field('type'),
	version: () => field('version'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_RocketEngines = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_RocketEnginesSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_RocketEngines', T>(
		SCHEMA as any,
		'spacex_RocketEngines',
		select(spacex_RocketEnginesSelector)
	);

interface Ispacex_RocketFirstStageSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly burn_time_sec: () => Field<'burn_time_sec'>;

	readonly engines: () => Field<'engines'>;

	readonly fuel_amount_tons: () => Field<'fuel_amount_tons'>;

	readonly reusable: () => Field<'reusable'>;

	readonly thrust_sea_level: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_ForceSelector) => T
	) => Field<'thrust_sea_level', never, SelectionSet<T>>;

	readonly thrust_vacuum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_ForceSelector) => T
	) => Field<'thrust_vacuum', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_RocketFirstStageSelector: Ispacex_RocketFirstStageSelector = {
	__typename: () => field('__typename'),
	burn_time_sec: () => field('burn_time_sec'),
	engines: () => field('engines'),
	fuel_amount_tons: () => field('fuel_amount_tons'),
	reusable: () => field('reusable'),

	thrust_sea_level: (select) =>
		field('thrust_sea_level', undefined as never, selectionSet(select(spacex_ForceSelector))),

	thrust_vacuum: (select) => field('thrust_vacuum', undefined as never, selectionSet(select(spacex_ForceSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_RocketFirstStage = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_RocketFirstStageSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_RocketFirstStage', T>(
		SCHEMA as any,
		'spacex_RocketFirstStage',
		select(spacex_RocketFirstStageSelector)
	);

interface Ispacex_RocketLandingLegsSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly material: () => Field<'material'>;

	readonly number: () => Field<'number'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_RocketLandingLegsSelector: Ispacex_RocketLandingLegsSelector = {
	__typename: () => field('__typename'),
	material: () => field('material'),
	number: () => field('number'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_RocketLandingLegs = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_RocketLandingLegsSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_RocketLandingLegs', T>(
		SCHEMA as any,
		'spacex_RocketLandingLegs',
		select(spacex_RocketLandingLegsSelector)
	);

interface Ispacex_RocketPayloadWeightSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly kg: () => Field<'kg'>;

	readonly lb: () => Field<'lb'>;

	readonly name: () => Field<'name'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_RocketPayloadWeightSelector: Ispacex_RocketPayloadWeightSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	kg: () => field('kg'),
	lb: () => field('lb'),
	name: () => field('name'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_RocketPayloadWeight = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_RocketPayloadWeightSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_RocketPayloadWeight', T>(
		SCHEMA as any,
		'spacex_RocketPayloadWeight',
		select(spacex_RocketPayloadWeightSelector)
	);

interface Ispacex_RocketSecondStageSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly burn_time_sec: () => Field<'burn_time_sec'>;

	readonly engines: () => Field<'engines'>;

	readonly fuel_amount_tons: () => Field<'fuel_amount_tons'>;

	readonly payloads: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_RocketSecondStagePayloadsSelector) => T
	) => Field<'payloads', never, SelectionSet<T>>;

	readonly thrust: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_ForceSelector) => T
	) => Field<'thrust', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_RocketSecondStageSelector: Ispacex_RocketSecondStageSelector = {
	__typename: () => field('__typename'),
	burn_time_sec: () => field('burn_time_sec'),
	engines: () => field('engines'),
	fuel_amount_tons: () => field('fuel_amount_tons'),

	payloads: (select) =>
		field('payloads', undefined as never, selectionSet(select(spacex_RocketSecondStagePayloadsSelector))),

	thrust: (select) => field('thrust', undefined as never, selectionSet(select(spacex_ForceSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_RocketSecondStage = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_RocketSecondStageSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_RocketSecondStage', T>(
		SCHEMA as any,
		'spacex_RocketSecondStage',
		select(spacex_RocketSecondStageSelector)
	);

interface Ispacex_RocketSecondStagePayloadCompositeFairingSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly diameter: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_DistanceSelector) => T
	) => Field<'diameter', never, SelectionSet<T>>;

	readonly height: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_DistanceSelector) => T
	) => Field<'height', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_RocketSecondStagePayloadCompositeFairingSelector: Ispacex_RocketSecondStagePayloadCompositeFairingSelector =
	{
		__typename: () => field('__typename'),

		diameter: (select) => field('diameter', undefined as never, selectionSet(select(spacex_DistanceSelector))),

		height: (select) => field('height', undefined as never, selectionSet(select(spacex_DistanceSelector))),

		_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
	};

export const spacex_RocketSecondStagePayloadCompositeFairing = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_RocketSecondStagePayloadCompositeFairingSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_RocketSecondStagePayloadCompositeFairing', T>(
		SCHEMA as any,
		'spacex_RocketSecondStagePayloadCompositeFairing',
		select(spacex_RocketSecondStagePayloadCompositeFairingSelector)
	);

interface Ispacex_RocketSecondStagePayloadsSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly composite_fairing: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_RocketSecondStagePayloadCompositeFairingSelector) => T
	) => Field<'composite_fairing', never, SelectionSet<T>>;

	readonly option_1: () => Field<'option_1'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_RocketSecondStagePayloadsSelector: Ispacex_RocketSecondStagePayloadsSelector = {
	__typename: () => field('__typename'),

	composite_fairing: (select) =>
		field(
			'composite_fairing',
			undefined as never,
			selectionSet(select(spacex_RocketSecondStagePayloadCompositeFairingSelector))
		),

	option_1: () => field('option_1'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_RocketSecondStagePayloads = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_RocketSecondStagePayloadsSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_RocketSecondStagePayloads', T>(
		SCHEMA as any,
		'spacex_RocketSecondStagePayloads',
		select(spacex_RocketSecondStagePayloadsSelector)
	);

interface Ispacex_RocketsResultSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly data: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_RocketSelector) => T
	) => Field<'data', never, SelectionSet<T>>;

	readonly result: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_ResultSelector) => T
	) => Field<'result', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_RocketsResultSelector: Ispacex_RocketsResultSelector = {
	__typename: () => field('__typename'),

	data: (select) => field('data', undefined as never, selectionSet(select(spacex_RocketSelector))),

	result: (select) => field('result', undefined as never, selectionSet(select(spacex_ResultSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_RocketsResult = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_RocketsResultSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_RocketsResult', T>(
		SCHEMA as any,
		'spacex_RocketsResult',
		select(spacex_RocketsResultSelector)
	);

interface Ispacex_ShipSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly abs: () => Field<'abs'>;

	readonly active: () => Field<'active'>;

	readonly attempted_landings: () => Field<'attempted_landings'>;

	readonly class: () => Field<'class'>;

	readonly course_deg: () => Field<'course_deg'>;

	readonly home_port: () => Field<'home_port'>;

	readonly id: () => Field<'id'>;

	readonly image: () => Field<'image'>;

	readonly imo: () => Field<'imo'>;

	readonly missions: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_ShipMissionSelector) => T
	) => Field<'missions', never, SelectionSet<T>>;

	readonly mmsi: () => Field<'mmsi'>;

	readonly model: () => Field<'model'>;

	readonly name: () => Field<'name'>;

	readonly position: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_ShipLocationSelector) => T
	) => Field<'position', never, SelectionSet<T>>;

	readonly roles: () => Field<'roles'>;

	readonly speed_kn: () => Field<'speed_kn'>;

	readonly status: () => Field<'status'>;

	readonly successful_landings: () => Field<'successful_landings'>;

	readonly type: () => Field<'type'>;

	readonly url: () => Field<'url'>;

	readonly weight_kg: () => Field<'weight_kg'>;

	readonly weight_lbs: () => Field<'weight_lbs'>;

	readonly year_built: () => Field<'year_built'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_ShipSelector: Ispacex_ShipSelector = {
	__typename: () => field('__typename'),
	abs: () => field('abs'),
	active: () => field('active'),
	attempted_landings: () => field('attempted_landings'),
	class: () => field('class'),
	course_deg: () => field('course_deg'),
	home_port: () => field('home_port'),
	id: () => field('id'),
	image: () => field('image'),
	imo: () => field('imo'),

	missions: (select) => field('missions', undefined as never, selectionSet(select(spacex_ShipMissionSelector))),

	mmsi: () => field('mmsi'),
	model: () => field('model'),
	name: () => field('name'),

	position: (select) => field('position', undefined as never, selectionSet(select(spacex_ShipLocationSelector))),

	roles: () => field('roles'),
	speed_kn: () => field('speed_kn'),
	status: () => field('status'),
	successful_landings: () => field('successful_landings'),
	type: () => field('type'),
	url: () => field('url'),
	weight_kg: () => field('weight_kg'),
	weight_lbs: () => field('weight_lbs'),
	year_built: () => field('year_built'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Ship = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_ShipSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Ship', T>(SCHEMA as any, 'spacex_Ship', select(spacex_ShipSelector));

interface Ispacex_ShipLocationSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly latitude: () => Field<'latitude'>;

	readonly longitude: () => Field<'longitude'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_ShipLocationSelector: Ispacex_ShipLocationSelector = {
	__typename: () => field('__typename'),
	latitude: () => field('latitude'),
	longitude: () => field('longitude'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_ShipLocation = <T extends ReadonlyArray<Selection>>(
	select: (t: Ispacex_ShipLocationSelector) => T
) =>
	new SelectionBuilder<ISchema, 'spacex_ShipLocation', T>(
		SCHEMA as any,
		'spacex_ShipLocation',
		select(spacex_ShipLocationSelector)
	);

interface Ispacex_ShipMissionSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly flight: () => Field<'flight'>;

	readonly name: () => Field<'name'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_ShipMissionSelector: Ispacex_ShipMissionSelector = {
	__typename: () => field('__typename'),
	flight: () => field('flight'),
	name: () => field('name'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_ShipMission = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_ShipMissionSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_ShipMission', T>(
		SCHEMA as any,
		'spacex_ShipMission',
		select(spacex_ShipMissionSelector)
	);

interface Ispacex_ShipsResultSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly data: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_ShipSelector) => T
	) => Field<'data', never, SelectionSet<T>>;

	readonly result: <T extends ReadonlyArray<Selection>>(
		select: (t: Ispacex_ResultSelector) => T
	) => Field<'result', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_ShipsResultSelector: Ispacex_ShipsResultSelector = {
	__typename: () => field('__typename'),

	data: (select) => field('data', undefined as never, selectionSet(select(spacex_ShipSelector))),

	result: (select) => field('result', undefined as never, selectionSet(select(spacex_ResultSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_ShipsResult = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_ShipsResultSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_ShipsResult', T>(
		SCHEMA as any,
		'spacex_ShipsResult',
		select(spacex_ShipsResultSelector)
	);

interface Ispacex_VolumeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly cubic_feet: () => Field<'cubic_feet'>;

	readonly cubic_meters: () => Field<'cubic_meters'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const spacex_VolumeSelector: Ispacex_VolumeSelector = {
	__typename: () => field('__typename'),
	cubic_feet: () => field('cubic_feet'),
	cubic_meters: () => field('cubic_meters'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const spacex_Volume = <T extends ReadonlyArray<Selection>>(select: (t: Ispacex_VolumeSelector) => T) =>
	new SelectionBuilder<ISchema, 'spacex_Volume', T>(SCHEMA as any, 'spacex_Volume', select(spacex_VolumeSelector));

interface Ichinook_ArtistCountOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly Album: () => Field<'Album'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_ArtistCountOutputTypeSelector: Ichinook_ArtistCountOutputTypeSelector = {
	__typename: () => field('__typename'),
	Album: () => field('Album'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_ArtistCountOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_ArtistCountOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_ArtistCountOutputType', T>(
		SCHEMA as any,
		'chinook_ArtistCountOutputType',
		select(chinook_ArtistCountOutputTypeSelector)
	);

interface Ichinook_ArtistSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly ArtistId: () => Field<'ArtistId'>;

	readonly Name: () => Field<'Name'>;

	readonly Album: <
		V extends {
			where?: Variable<string> | Ichinook_AlbumWhereInput;
			orderBy?: Variable<string> | Ichinook_AlbumOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_AlbumWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_AlbumScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AlbumSelector) => T
	) => Field<
		'Album',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_ArtistCountOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_ArtistSelector: Ichinook_ArtistSelector = {
	__typename: () => field('__typename'),
	ArtistId: () => field('ArtistId'),
	Name: () => field('Name'),

	Album: (variables, select) =>
		field(
			'Album',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AlbumSelector))
		),

	_count: (select) => field('_count', undefined as never, selectionSet(select(chinook_ArtistCountOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_Artist = <T extends ReadonlyArray<Selection>>(select: (t: Ichinook_ArtistSelector) => T) =>
	new SelectionBuilder<ISchema, 'chinook_Artist', T>(SCHEMA as any, 'chinook_Artist', select(chinook_ArtistSelector));

interface Ichinook_GenreCountOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly Track: () => Field<'Track'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_GenreCountOutputTypeSelector: Ichinook_GenreCountOutputTypeSelector = {
	__typename: () => field('__typename'),
	Track: () => field('Track'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_GenreCountOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_GenreCountOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_GenreCountOutputType', T>(
		SCHEMA as any,
		'chinook_GenreCountOutputType',
		select(chinook_GenreCountOutputTypeSelector)
	);

interface Ichinook_GenreSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly GenreId: () => Field<'GenreId'>;

	readonly Name: () => Field<'Name'>;

	readonly Track: <
		V extends {
			where?: Variable<string> | Ichinook_TrackWhereInput;
			orderBy?: Variable<string> | Ichinook_TrackOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_TrackWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_TrackScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_TrackSelector) => T
	) => Field<
		'Track',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_GenreCountOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_GenreSelector: Ichinook_GenreSelector = {
	__typename: () => field('__typename'),
	GenreId: () => field('GenreId'),
	Name: () => field('Name'),

	Track: (variables, select) =>
		field(
			'Track',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_TrackSelector))
		),

	_count: (select) => field('_count', undefined as never, selectionSet(select(chinook_GenreCountOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_Genre = <T extends ReadonlyArray<Selection>>(select: (t: Ichinook_GenreSelector) => T) =>
	new SelectionBuilder<ISchema, 'chinook_Genre', T>(SCHEMA as any, 'chinook_Genre', select(chinook_GenreSelector));

interface Ichinook_MediaTypeCountOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly Track: () => Field<'Track'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_MediaTypeCountOutputTypeSelector: Ichinook_MediaTypeCountOutputTypeSelector = {
	__typename: () => field('__typename'),
	Track: () => field('Track'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_MediaTypeCountOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_MediaTypeCountOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_MediaTypeCountOutputType', T>(
		SCHEMA as any,
		'chinook_MediaTypeCountOutputType',
		select(chinook_MediaTypeCountOutputTypeSelector)
	);

interface Ichinook_MediaTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly MediaTypeId: () => Field<'MediaTypeId'>;

	readonly Name: () => Field<'Name'>;

	readonly Track: <
		V extends {
			where?: Variable<string> | Ichinook_TrackWhereInput;
			orderBy?: Variable<string> | Ichinook_TrackOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_TrackWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_TrackScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_TrackSelector) => T
	) => Field<
		'Track',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_MediaTypeCountOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_MediaTypeSelector: Ichinook_MediaTypeSelector = {
	__typename: () => field('__typename'),
	MediaTypeId: () => field('MediaTypeId'),
	Name: () => field('Name'),

	Track: (variables, select) =>
		field(
			'Track',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_TrackSelector))
		),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_MediaTypeCountOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_MediaType = <T extends ReadonlyArray<Selection>>(select: (t: Ichinook_MediaTypeSelector) => T) =>
	new SelectionBuilder<ISchema, 'chinook_MediaType', T>(
		SCHEMA as any,
		'chinook_MediaType',
		select(chinook_MediaTypeSelector)
	);

interface Ichinook_EmployeeCountOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly Customer: () => Field<'Customer'>;

	readonly other_Employee: () => Field<'other_Employee'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_EmployeeCountOutputTypeSelector: Ichinook_EmployeeCountOutputTypeSelector = {
	__typename: () => field('__typename'),
	Customer: () => field('Customer'),
	other_Employee: () => field('other_Employee'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_EmployeeCountOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_EmployeeCountOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_EmployeeCountOutputType', T>(
		SCHEMA as any,
		'chinook_EmployeeCountOutputType',
		select(chinook_EmployeeCountOutputTypeSelector)
	);

interface Ichinook_EmployeeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly EmployeeId: () => Field<'EmployeeId'>;

	readonly LastName: () => Field<'LastName'>;

	readonly FirstName: () => Field<'FirstName'>;

	readonly Title: () => Field<'Title'>;

	readonly ReportsTo: () => Field<'ReportsTo'>;

	readonly BirthDate: () => Field<'BirthDate'>;

	readonly HireDate: () => Field<'HireDate'>;

	readonly Address: () => Field<'Address'>;

	readonly City: () => Field<'City'>;

	readonly State: () => Field<'State'>;

	readonly Country: () => Field<'Country'>;

	readonly PostalCode: () => Field<'PostalCode'>;

	readonly Phone: () => Field<'Phone'>;

	readonly Fax: () => Field<'Fax'>;

	readonly Email: () => Field<'Email'>;

	readonly Employee: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_EmployeeSelector) => T
	) => Field<'Employee', never, SelectionSet<T>>;

	readonly Customer: <
		V extends {
			where?: Variable<string> | Ichinook_CustomerWhereInput;
			orderBy?: Variable<string> | Ichinook_CustomerOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_CustomerWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_CustomerScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_CustomerSelector) => T
	) => Field<
		'Customer',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly other_Employee: <
		V extends {
			where?: Variable<string> | Ichinook_EmployeeWhereInput;
			orderBy?: Variable<string> | Ichinook_EmployeeOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_EmployeeWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_EmployeeScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_EmployeeSelector) => T
	) => Field<
		'other_Employee',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_EmployeeCountOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_EmployeeSelector: Ichinook_EmployeeSelector = {
	__typename: () => field('__typename'),
	EmployeeId: () => field('EmployeeId'),
	LastName: () => field('LastName'),
	FirstName: () => field('FirstName'),
	Title: () => field('Title'),
	ReportsTo: () => field('ReportsTo'),
	BirthDate: () => field('BirthDate'),
	HireDate: () => field('HireDate'),
	Address: () => field('Address'),
	City: () => field('City'),
	State: () => field('State'),
	Country: () => field('Country'),
	PostalCode: () => field('PostalCode'),
	Phone: () => field('Phone'),
	Fax: () => field('Fax'),
	Email: () => field('Email'),

	Employee: (select) => field('Employee', undefined as never, selectionSet(select(chinook_EmployeeSelector))),

	Customer: (variables, select) =>
		field(
			'Customer',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_CustomerSelector))
		),

	other_Employee: (variables, select) =>
		field(
			'other_Employee',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_EmployeeSelector))
		),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_EmployeeCountOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_Employee = <T extends ReadonlyArray<Selection>>(select: (t: Ichinook_EmployeeSelector) => T) =>
	new SelectionBuilder<ISchema, 'chinook_Employee', T>(
		SCHEMA as any,
		'chinook_Employee',
		select(chinook_EmployeeSelector)
	);

interface Ichinook_CustomerCountOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly Invoice: () => Field<'Invoice'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_CustomerCountOutputTypeSelector: Ichinook_CustomerCountOutputTypeSelector = {
	__typename: () => field('__typename'),
	Invoice: () => field('Invoice'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_CustomerCountOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_CustomerCountOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_CustomerCountOutputType', T>(
		SCHEMA as any,
		'chinook_CustomerCountOutputType',
		select(chinook_CustomerCountOutputTypeSelector)
	);

interface Ichinook_CustomerSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly CustomerId: () => Field<'CustomerId'>;

	readonly FirstName: () => Field<'FirstName'>;

	readonly LastName: () => Field<'LastName'>;

	readonly Company: () => Field<'Company'>;

	readonly Address: () => Field<'Address'>;

	readonly City: () => Field<'City'>;

	readonly State: () => Field<'State'>;

	readonly Country: () => Field<'Country'>;

	readonly PostalCode: () => Field<'PostalCode'>;

	readonly Phone: () => Field<'Phone'>;

	readonly Fax: () => Field<'Fax'>;

	readonly Email: () => Field<'Email'>;

	readonly SupportRepId: () => Field<'SupportRepId'>;

	readonly Employee: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_EmployeeSelector) => T
	) => Field<'Employee', never, SelectionSet<T>>;

	readonly Invoice: <
		V extends {
			where?: Variable<string> | Ichinook_InvoiceWhereInput;
			orderBy?: Variable<string> | Ichinook_InvoiceOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_InvoiceWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_InvoiceScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_InvoiceSelector) => T
	) => Field<
		'Invoice',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_CustomerCountOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_CustomerSelector: Ichinook_CustomerSelector = {
	__typename: () => field('__typename'),
	CustomerId: () => field('CustomerId'),
	FirstName: () => field('FirstName'),
	LastName: () => field('LastName'),
	Company: () => field('Company'),
	Address: () => field('Address'),
	City: () => field('City'),
	State: () => field('State'),
	Country: () => field('Country'),
	PostalCode: () => field('PostalCode'),
	Phone: () => field('Phone'),
	Fax: () => field('Fax'),
	Email: () => field('Email'),
	SupportRepId: () => field('SupportRepId'),

	Employee: (select) => field('Employee', undefined as never, selectionSet(select(chinook_EmployeeSelector))),

	Invoice: (variables, select) =>
		field(
			'Invoice',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_InvoiceSelector))
		),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_CustomerCountOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_Customer = <T extends ReadonlyArray<Selection>>(select: (t: Ichinook_CustomerSelector) => T) =>
	new SelectionBuilder<ISchema, 'chinook_Customer', T>(
		SCHEMA as any,
		'chinook_Customer',
		select(chinook_CustomerSelector)
	);

interface Ichinook_InvoiceCountOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly InvoiceLine: () => Field<'InvoiceLine'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_InvoiceCountOutputTypeSelector: Ichinook_InvoiceCountOutputTypeSelector = {
	__typename: () => field('__typename'),
	InvoiceLine: () => field('InvoiceLine'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_InvoiceCountOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_InvoiceCountOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_InvoiceCountOutputType', T>(
		SCHEMA as any,
		'chinook_InvoiceCountOutputType',
		select(chinook_InvoiceCountOutputTypeSelector)
	);

interface Ichinook_InvoiceSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly InvoiceId: () => Field<'InvoiceId'>;

	readonly CustomerId: () => Field<'CustomerId'>;

	readonly InvoiceDate: () => Field<'InvoiceDate'>;

	readonly BillingAddress: () => Field<'BillingAddress'>;

	readonly BillingCity: () => Field<'BillingCity'>;

	readonly BillingState: () => Field<'BillingState'>;

	readonly BillingCountry: () => Field<'BillingCountry'>;

	readonly BillingPostalCode: () => Field<'BillingPostalCode'>;

	readonly Total: () => Field<'Total'>;

	readonly Customer: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_CustomerSelector) => T
	) => Field<'Customer', never, SelectionSet<T>>;

	readonly InvoiceLine: <
		V extends {
			where?: Variable<string> | Ichinook_InvoiceLineWhereInput;
			orderBy?: Variable<string> | Ichinook_InvoiceLineOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_InvoiceLineWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_InvoiceLineScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_InvoiceLineSelector) => T
	) => Field<
		'InvoiceLine',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceCountOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_InvoiceSelector: Ichinook_InvoiceSelector = {
	__typename: () => field('__typename'),
	InvoiceId: () => field('InvoiceId'),
	CustomerId: () => field('CustomerId'),
	InvoiceDate: () => field('InvoiceDate'),
	BillingAddress: () => field('BillingAddress'),
	BillingCity: () => field('BillingCity'),
	BillingState: () => field('BillingState'),
	BillingCountry: () => field('BillingCountry'),
	BillingPostalCode: () => field('BillingPostalCode'),
	Total: () => field('Total'),

	Customer: (select) => field('Customer', undefined as never, selectionSet(select(chinook_CustomerSelector))),

	InvoiceLine: (variables, select) =>
		field(
			'InvoiceLine',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_InvoiceLineSelector))
		),

	_count: (select) => field('_count', undefined as never, selectionSet(select(chinook_InvoiceCountOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_Invoice = <T extends ReadonlyArray<Selection>>(select: (t: Ichinook_InvoiceSelector) => T) =>
	new SelectionBuilder<ISchema, 'chinook_Invoice', T>(
		SCHEMA as any,
		'chinook_Invoice',
		select(chinook_InvoiceSelector)
	);

interface Ichinook_InvoiceLineSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly InvoiceLineId: () => Field<'InvoiceLineId'>;

	readonly InvoiceId: () => Field<'InvoiceId'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly UnitPrice: () => Field<'UnitPrice'>;

	readonly Quantity: () => Field<'Quantity'>;

	readonly Invoice: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceSelector) => T
	) => Field<'Invoice', never, SelectionSet<T>>;

	readonly Track: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_TrackSelector) => T
	) => Field<'Track', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_InvoiceLineSelector: Ichinook_InvoiceLineSelector = {
	__typename: () => field('__typename'),
	InvoiceLineId: () => field('InvoiceLineId'),
	InvoiceId: () => field('InvoiceId'),
	TrackId: () => field('TrackId'),
	UnitPrice: () => field('UnitPrice'),
	Quantity: () => field('Quantity'),

	Invoice: (select) => field('Invoice', undefined as never, selectionSet(select(chinook_InvoiceSelector))),

	Track: (select) => field('Track', undefined as never, selectionSet(select(chinook_TrackSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_InvoiceLine = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_InvoiceLineSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_InvoiceLine', T>(
		SCHEMA as any,
		'chinook_InvoiceLine',
		select(chinook_InvoiceLineSelector)
	);

interface Ichinook_PlaylistCountOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly PlaylistTrack: () => Field<'PlaylistTrack'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_PlaylistCountOutputTypeSelector: Ichinook_PlaylistCountOutputTypeSelector = {
	__typename: () => field('__typename'),
	PlaylistTrack: () => field('PlaylistTrack'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_PlaylistCountOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_PlaylistCountOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_PlaylistCountOutputType', T>(
		SCHEMA as any,
		'chinook_PlaylistCountOutputType',
		select(chinook_PlaylistCountOutputTypeSelector)
	);

interface Ichinook_PlaylistSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly PlaylistId: () => Field<'PlaylistId'>;

	readonly Name: () => Field<'Name'>;

	readonly PlaylistTrack: <
		V extends {
			where?: Variable<string> | Ichinook_PlaylistTrackWhereInput;
			orderBy?: Variable<string> | Ichinook_PlaylistTrackOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_PlaylistTrackWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_PlaylistTrackScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_PlaylistTrackSelector) => T
	) => Field<
		'PlaylistTrack',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistCountOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_PlaylistSelector: Ichinook_PlaylistSelector = {
	__typename: () => field('__typename'),
	PlaylistId: () => field('PlaylistId'),
	Name: () => field('Name'),

	PlaylistTrack: (variables, select) =>
		field(
			'PlaylistTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_PlaylistTrackSelector))
		),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_PlaylistCountOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_Playlist = <T extends ReadonlyArray<Selection>>(select: (t: Ichinook_PlaylistSelector) => T) =>
	new SelectionBuilder<ISchema, 'chinook_Playlist', T>(
		SCHEMA as any,
		'chinook_Playlist',
		select(chinook_PlaylistSelector)
	);

interface Ichinook_PlaylistTrackSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly PlaylistId: () => Field<'PlaylistId'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly Playlist: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistSelector) => T
	) => Field<'Playlist', never, SelectionSet<T>>;

	readonly Track: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_TrackSelector) => T
	) => Field<'Track', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_PlaylistTrackSelector: Ichinook_PlaylistTrackSelector = {
	__typename: () => field('__typename'),
	PlaylistId: () => field('PlaylistId'),
	TrackId: () => field('TrackId'),

	Playlist: (select) => field('Playlist', undefined as never, selectionSet(select(chinook_PlaylistSelector))),

	Track: (select) => field('Track', undefined as never, selectionSet(select(chinook_TrackSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_PlaylistTrack = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_PlaylistTrackSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_PlaylistTrack', T>(
		SCHEMA as any,
		'chinook_PlaylistTrack',
		select(chinook_PlaylistTrackSelector)
	);

interface Ichinook_TrackCountOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly InvoiceLine: () => Field<'InvoiceLine'>;

	readonly PlaylistTrack: () => Field<'PlaylistTrack'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_TrackCountOutputTypeSelector: Ichinook_TrackCountOutputTypeSelector = {
	__typename: () => field('__typename'),
	InvoiceLine: () => field('InvoiceLine'),
	PlaylistTrack: () => field('PlaylistTrack'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_TrackCountOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_TrackCountOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_TrackCountOutputType', T>(
		SCHEMA as any,
		'chinook_TrackCountOutputType',
		select(chinook_TrackCountOutputTypeSelector)
	);

interface Ichinook_TrackSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly Name: () => Field<'Name'>;

	readonly AlbumId: () => Field<'AlbumId'>;

	readonly MediaTypeId: () => Field<'MediaTypeId'>;

	readonly GenreId: () => Field<'GenreId'>;

	readonly Composer: () => Field<'Composer'>;

	readonly Milliseconds: () => Field<'Milliseconds'>;

	readonly String: () => Field<'String'>;

	readonly UnitPrice: () => Field<'UnitPrice'>;

	readonly Album: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_AlbumSelector) => T
	) => Field<'Album', never, SelectionSet<T>>;

	readonly Genre: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_GenreSelector) => T
	) => Field<'Genre', never, SelectionSet<T>>;

	readonly MediaType: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_MediaTypeSelector) => T
	) => Field<'MediaType', never, SelectionSet<T>>;

	readonly InvoiceLine: <
		V extends {
			where?: Variable<string> | Ichinook_InvoiceLineWhereInput;
			orderBy?: Variable<string> | Ichinook_InvoiceLineOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_InvoiceLineWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_InvoiceLineScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_InvoiceLineSelector) => T
	) => Field<
		'InvoiceLine',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly PlaylistTrack: <
		V extends {
			where?: Variable<string> | Ichinook_PlaylistTrackWhereInput;
			orderBy?: Variable<string> | Ichinook_PlaylistTrackOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_PlaylistTrackWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_PlaylistTrackScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_PlaylistTrackSelector) => T
	) => Field<
		'PlaylistTrack',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_TrackCountOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_TrackSelector: Ichinook_TrackSelector = {
	__typename: () => field('__typename'),
	TrackId: () => field('TrackId'),
	Name: () => field('Name'),
	AlbumId: () => field('AlbumId'),
	MediaTypeId: () => field('MediaTypeId'),
	GenreId: () => field('GenreId'),
	Composer: () => field('Composer'),
	Milliseconds: () => field('Milliseconds'),
	String: () => field('String'),
	UnitPrice: () => field('UnitPrice'),

	Album: (select) => field('Album', undefined as never, selectionSet(select(chinook_AlbumSelector))),

	Genre: (select) => field('Genre', undefined as never, selectionSet(select(chinook_GenreSelector))),

	MediaType: (select) => field('MediaType', undefined as never, selectionSet(select(chinook_MediaTypeSelector))),

	InvoiceLine: (variables, select) =>
		field(
			'InvoiceLine',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_InvoiceLineSelector))
		),

	PlaylistTrack: (variables, select) =>
		field(
			'PlaylistTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_PlaylistTrackSelector))
		),

	_count: (select) => field('_count', undefined as never, selectionSet(select(chinook_TrackCountOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_Track = <T extends ReadonlyArray<Selection>>(select: (t: Ichinook_TrackSelector) => T) =>
	new SelectionBuilder<ISchema, 'chinook_Track', T>(SCHEMA as any, 'chinook_Track', select(chinook_TrackSelector));

interface Ichinook_AlbumCountOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly Track: () => Field<'Track'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AlbumCountOutputTypeSelector: Ichinook_AlbumCountOutputTypeSelector = {
	__typename: () => field('__typename'),
	Track: () => field('Track'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_AlbumCountOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_AlbumCountOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_AlbumCountOutputType', T>(
		SCHEMA as any,
		'chinook_AlbumCountOutputType',
		select(chinook_AlbumCountOutputTypeSelector)
	);

interface Ichinook_AlbumSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly AlbumId: () => Field<'AlbumId'>;

	readonly Title: () => Field<'Title'>;

	readonly ArtistId: () => Field<'ArtistId'>;

	readonly Artist: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_ArtistSelector) => T
	) => Field<'Artist', never, SelectionSet<T>>;

	readonly Track: <
		V extends {
			where?: Variable<string> | Ichinook_TrackWhereInput;
			orderBy?: Variable<string> | Ichinook_TrackOrderByWithRelationInput[];
			cursor?: Variable<string> | Ichinook_TrackWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | chinook_TrackScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_TrackSelector) => T
	) => Field<
		'Track',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_AlbumCountOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AlbumSelector: Ichinook_AlbumSelector = {
	__typename: () => field('__typename'),
	AlbumId: () => field('AlbumId'),
	Title: () => field('Title'),
	ArtistId: () => field('ArtistId'),

	Artist: (select) => field('Artist', undefined as never, selectionSet(select(chinook_ArtistSelector))),

	Track: (variables, select) =>
		field(
			'Track',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_TrackSelector))
		),

	_count: (select) => field('_count', undefined as never, selectionSet(select(chinook_AlbumCountOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_Album = <T extends ReadonlyArray<Selection>>(select: (t: Ichinook_AlbumSelector) => T) =>
	new SelectionBuilder<ISchema, 'chinook_Album', T>(SCHEMA as any, 'chinook_Album', select(chinook_AlbumSelector));

interface Ichinook_AlbumCountAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly AlbumId: () => Field<'AlbumId'>;

	readonly Title: () => Field<'Title'>;

	readonly ArtistId: () => Field<'ArtistId'>;

	readonly _all: () => Field<'_all'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AlbumCountAggregateOutputTypeSelector: Ichinook_AlbumCountAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	AlbumId: () => field('AlbumId'),
	Title: () => field('Title'),
	ArtistId: () => field('ArtistId'),
	_all: () => field('_all'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_AlbumCountAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_AlbumCountAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_AlbumCountAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_AlbumCountAggregateOutputType',
		select(chinook_AlbumCountAggregateOutputTypeSelector)
	);

interface Ichinook_AlbumAvgAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly AlbumId: () => Field<'AlbumId'>;

	readonly ArtistId: () => Field<'ArtistId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AlbumAvgAggregateOutputTypeSelector: Ichinook_AlbumAvgAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	AlbumId: () => field('AlbumId'),
	ArtistId: () => field('ArtistId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_AlbumAvgAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_AlbumAvgAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_AlbumAvgAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_AlbumAvgAggregateOutputType',
		select(chinook_AlbumAvgAggregateOutputTypeSelector)
	);

interface Ichinook_AlbumSumAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly AlbumId: () => Field<'AlbumId'>;

	readonly ArtistId: () => Field<'ArtistId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AlbumSumAggregateOutputTypeSelector: Ichinook_AlbumSumAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	AlbumId: () => field('AlbumId'),
	ArtistId: () => field('ArtistId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_AlbumSumAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_AlbumSumAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_AlbumSumAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_AlbumSumAggregateOutputType',
		select(chinook_AlbumSumAggregateOutputTypeSelector)
	);

interface Ichinook_AlbumMinAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly AlbumId: () => Field<'AlbumId'>;

	readonly Title: () => Field<'Title'>;

	readonly ArtistId: () => Field<'ArtistId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AlbumMinAggregateOutputTypeSelector: Ichinook_AlbumMinAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	AlbumId: () => field('AlbumId'),
	Title: () => field('Title'),
	ArtistId: () => field('ArtistId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_AlbumMinAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_AlbumMinAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_AlbumMinAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_AlbumMinAggregateOutputType',
		select(chinook_AlbumMinAggregateOutputTypeSelector)
	);

interface Ichinook_AlbumMaxAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly AlbumId: () => Field<'AlbumId'>;

	readonly Title: () => Field<'Title'>;

	readonly ArtistId: () => Field<'ArtistId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AlbumMaxAggregateOutputTypeSelector: Ichinook_AlbumMaxAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	AlbumId: () => field('AlbumId'),
	Title: () => field('Title'),
	ArtistId: () => field('ArtistId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_AlbumMaxAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_AlbumMaxAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_AlbumMaxAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_AlbumMaxAggregateOutputType',
		select(chinook_AlbumMaxAggregateOutputTypeSelector)
	);

interface Ichinook_AggregateAlbumSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_AlbumCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_AlbumAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_AlbumSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_AlbumMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_AlbumMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AggregateAlbumSelector: Ichinook_AggregateAlbumSelector = {
	__typename: () => field('__typename'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_AlbumCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_AlbumAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_AlbumSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_AlbumMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_AlbumMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_AggregateAlbum = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_AggregateAlbumSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_AggregateAlbum', T>(
		SCHEMA as any,
		'chinook_AggregateAlbum',
		select(chinook_AggregateAlbumSelector)
	);

interface Ichinook_AlbumGroupByOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly AlbumId: () => Field<'AlbumId'>;

	readonly Title: () => Field<'Title'>;

	readonly ArtistId: () => Field<'ArtistId'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_AlbumCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_AlbumAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_AlbumSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_AlbumMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_AlbumMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AlbumGroupByOutputTypeSelector: Ichinook_AlbumGroupByOutputTypeSelector = {
	__typename: () => field('__typename'),
	AlbumId: () => field('AlbumId'),
	Title: () => field('Title'),
	ArtistId: () => field('ArtistId'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_AlbumCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_AlbumAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_AlbumSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_AlbumMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_AlbumMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_AlbumGroupByOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_AlbumGroupByOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_AlbumGroupByOutputType', T>(
		SCHEMA as any,
		'chinook_AlbumGroupByOutputType',
		select(chinook_AlbumGroupByOutputTypeSelector)
	);

interface Ichinook_ArtistCountAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly ArtistId: () => Field<'ArtistId'>;

	readonly Name: () => Field<'Name'>;

	readonly _all: () => Field<'_all'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_ArtistCountAggregateOutputTypeSelector: Ichinook_ArtistCountAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	ArtistId: () => field('ArtistId'),
	Name: () => field('Name'),
	_all: () => field('_all'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_ArtistCountAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_ArtistCountAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_ArtistCountAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_ArtistCountAggregateOutputType',
		select(chinook_ArtistCountAggregateOutputTypeSelector)
	);

interface Ichinook_ArtistAvgAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly ArtistId: () => Field<'ArtistId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_ArtistAvgAggregateOutputTypeSelector: Ichinook_ArtistAvgAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	ArtistId: () => field('ArtistId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_ArtistAvgAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_ArtistAvgAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_ArtistAvgAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_ArtistAvgAggregateOutputType',
		select(chinook_ArtistAvgAggregateOutputTypeSelector)
	);

interface Ichinook_ArtistSumAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly ArtistId: () => Field<'ArtistId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_ArtistSumAggregateOutputTypeSelector: Ichinook_ArtistSumAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	ArtistId: () => field('ArtistId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_ArtistSumAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_ArtistSumAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_ArtistSumAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_ArtistSumAggregateOutputType',
		select(chinook_ArtistSumAggregateOutputTypeSelector)
	);

interface Ichinook_ArtistMinAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly ArtistId: () => Field<'ArtistId'>;

	readonly Name: () => Field<'Name'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_ArtistMinAggregateOutputTypeSelector: Ichinook_ArtistMinAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	ArtistId: () => field('ArtistId'),
	Name: () => field('Name'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_ArtistMinAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_ArtistMinAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_ArtistMinAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_ArtistMinAggregateOutputType',
		select(chinook_ArtistMinAggregateOutputTypeSelector)
	);

interface Ichinook_ArtistMaxAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly ArtistId: () => Field<'ArtistId'>;

	readonly Name: () => Field<'Name'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_ArtistMaxAggregateOutputTypeSelector: Ichinook_ArtistMaxAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	ArtistId: () => field('ArtistId'),
	Name: () => field('Name'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_ArtistMaxAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_ArtistMaxAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_ArtistMaxAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_ArtistMaxAggregateOutputType',
		select(chinook_ArtistMaxAggregateOutputTypeSelector)
	);

interface Ichinook_AggregateArtistSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_ArtistCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_ArtistAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_ArtistSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_ArtistMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_ArtistMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AggregateArtistSelector: Ichinook_AggregateArtistSelector = {
	__typename: () => field('__typename'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_ArtistCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_ArtistAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_ArtistSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_ArtistMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_ArtistMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_AggregateArtist = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_AggregateArtistSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_AggregateArtist', T>(
		SCHEMA as any,
		'chinook_AggregateArtist',
		select(chinook_AggregateArtistSelector)
	);

interface Ichinook_ArtistGroupByOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly ArtistId: () => Field<'ArtistId'>;

	readonly Name: () => Field<'Name'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_ArtistCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_ArtistAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_ArtistSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_ArtistMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_ArtistMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_ArtistGroupByOutputTypeSelector: Ichinook_ArtistGroupByOutputTypeSelector = {
	__typename: () => field('__typename'),
	ArtistId: () => field('ArtistId'),
	Name: () => field('Name'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_ArtistCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_ArtistAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_ArtistSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_ArtistMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_ArtistMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_ArtistGroupByOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_ArtistGroupByOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_ArtistGroupByOutputType', T>(
		SCHEMA as any,
		'chinook_ArtistGroupByOutputType',
		select(chinook_ArtistGroupByOutputTypeSelector)
	);

interface Ichinook_CustomerCountAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly CustomerId: () => Field<'CustomerId'>;

	readonly FirstName: () => Field<'FirstName'>;

	readonly LastName: () => Field<'LastName'>;

	readonly Company: () => Field<'Company'>;

	readonly Address: () => Field<'Address'>;

	readonly City: () => Field<'City'>;

	readonly State: () => Field<'State'>;

	readonly Country: () => Field<'Country'>;

	readonly PostalCode: () => Field<'PostalCode'>;

	readonly Phone: () => Field<'Phone'>;

	readonly Fax: () => Field<'Fax'>;

	readonly Email: () => Field<'Email'>;

	readonly SupportRepId: () => Field<'SupportRepId'>;

	readonly _all: () => Field<'_all'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_CustomerCountAggregateOutputTypeSelector: Ichinook_CustomerCountAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	CustomerId: () => field('CustomerId'),
	FirstName: () => field('FirstName'),
	LastName: () => field('LastName'),
	Company: () => field('Company'),
	Address: () => field('Address'),
	City: () => field('City'),
	State: () => field('State'),
	Country: () => field('Country'),
	PostalCode: () => field('PostalCode'),
	Phone: () => field('Phone'),
	Fax: () => field('Fax'),
	Email: () => field('Email'),
	SupportRepId: () => field('SupportRepId'),
	_all: () => field('_all'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_CustomerCountAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_CustomerCountAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_CustomerCountAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_CustomerCountAggregateOutputType',
		select(chinook_CustomerCountAggregateOutputTypeSelector)
	);

interface Ichinook_CustomerAvgAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly CustomerId: () => Field<'CustomerId'>;

	readonly SupportRepId: () => Field<'SupportRepId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_CustomerAvgAggregateOutputTypeSelector: Ichinook_CustomerAvgAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	CustomerId: () => field('CustomerId'),
	SupportRepId: () => field('SupportRepId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_CustomerAvgAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_CustomerAvgAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_CustomerAvgAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_CustomerAvgAggregateOutputType',
		select(chinook_CustomerAvgAggregateOutputTypeSelector)
	);

interface Ichinook_CustomerSumAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly CustomerId: () => Field<'CustomerId'>;

	readonly SupportRepId: () => Field<'SupportRepId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_CustomerSumAggregateOutputTypeSelector: Ichinook_CustomerSumAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	CustomerId: () => field('CustomerId'),
	SupportRepId: () => field('SupportRepId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_CustomerSumAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_CustomerSumAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_CustomerSumAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_CustomerSumAggregateOutputType',
		select(chinook_CustomerSumAggregateOutputTypeSelector)
	);

interface Ichinook_CustomerMinAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly CustomerId: () => Field<'CustomerId'>;

	readonly FirstName: () => Field<'FirstName'>;

	readonly LastName: () => Field<'LastName'>;

	readonly Company: () => Field<'Company'>;

	readonly Address: () => Field<'Address'>;

	readonly City: () => Field<'City'>;

	readonly State: () => Field<'State'>;

	readonly Country: () => Field<'Country'>;

	readonly PostalCode: () => Field<'PostalCode'>;

	readonly Phone: () => Field<'Phone'>;

	readonly Fax: () => Field<'Fax'>;

	readonly Email: () => Field<'Email'>;

	readonly SupportRepId: () => Field<'SupportRepId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_CustomerMinAggregateOutputTypeSelector: Ichinook_CustomerMinAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	CustomerId: () => field('CustomerId'),
	FirstName: () => field('FirstName'),
	LastName: () => field('LastName'),
	Company: () => field('Company'),
	Address: () => field('Address'),
	City: () => field('City'),
	State: () => field('State'),
	Country: () => field('Country'),
	PostalCode: () => field('PostalCode'),
	Phone: () => field('Phone'),
	Fax: () => field('Fax'),
	Email: () => field('Email'),
	SupportRepId: () => field('SupportRepId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_CustomerMinAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_CustomerMinAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_CustomerMinAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_CustomerMinAggregateOutputType',
		select(chinook_CustomerMinAggregateOutputTypeSelector)
	);

interface Ichinook_CustomerMaxAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly CustomerId: () => Field<'CustomerId'>;

	readonly FirstName: () => Field<'FirstName'>;

	readonly LastName: () => Field<'LastName'>;

	readonly Company: () => Field<'Company'>;

	readonly Address: () => Field<'Address'>;

	readonly City: () => Field<'City'>;

	readonly State: () => Field<'State'>;

	readonly Country: () => Field<'Country'>;

	readonly PostalCode: () => Field<'PostalCode'>;

	readonly Phone: () => Field<'Phone'>;

	readonly Fax: () => Field<'Fax'>;

	readonly Email: () => Field<'Email'>;

	readonly SupportRepId: () => Field<'SupportRepId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_CustomerMaxAggregateOutputTypeSelector: Ichinook_CustomerMaxAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	CustomerId: () => field('CustomerId'),
	FirstName: () => field('FirstName'),
	LastName: () => field('LastName'),
	Company: () => field('Company'),
	Address: () => field('Address'),
	City: () => field('City'),
	State: () => field('State'),
	Country: () => field('Country'),
	PostalCode: () => field('PostalCode'),
	Phone: () => field('Phone'),
	Fax: () => field('Fax'),
	Email: () => field('Email'),
	SupportRepId: () => field('SupportRepId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_CustomerMaxAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_CustomerMaxAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_CustomerMaxAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_CustomerMaxAggregateOutputType',
		select(chinook_CustomerMaxAggregateOutputTypeSelector)
	);

interface Ichinook_AggregateCustomerSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_CustomerCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_CustomerAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_CustomerSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_CustomerMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_CustomerMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AggregateCustomerSelector: Ichinook_AggregateCustomerSelector = {
	__typename: () => field('__typename'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_CustomerCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_CustomerAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_CustomerSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_CustomerMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_CustomerMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_AggregateCustomer = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_AggregateCustomerSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_AggregateCustomer', T>(
		SCHEMA as any,
		'chinook_AggregateCustomer',
		select(chinook_AggregateCustomerSelector)
	);

interface Ichinook_CustomerGroupByOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly CustomerId: () => Field<'CustomerId'>;

	readonly FirstName: () => Field<'FirstName'>;

	readonly LastName: () => Field<'LastName'>;

	readonly Company: () => Field<'Company'>;

	readonly Address: () => Field<'Address'>;

	readonly City: () => Field<'City'>;

	readonly State: () => Field<'State'>;

	readonly Country: () => Field<'Country'>;

	readonly PostalCode: () => Field<'PostalCode'>;

	readonly Phone: () => Field<'Phone'>;

	readonly Fax: () => Field<'Fax'>;

	readonly Email: () => Field<'Email'>;

	readonly SupportRepId: () => Field<'SupportRepId'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_CustomerCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_CustomerAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_CustomerSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_CustomerMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_CustomerMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_CustomerGroupByOutputTypeSelector: Ichinook_CustomerGroupByOutputTypeSelector = {
	__typename: () => field('__typename'),
	CustomerId: () => field('CustomerId'),
	FirstName: () => field('FirstName'),
	LastName: () => field('LastName'),
	Company: () => field('Company'),
	Address: () => field('Address'),
	City: () => field('City'),
	State: () => field('State'),
	Country: () => field('Country'),
	PostalCode: () => field('PostalCode'),
	Phone: () => field('Phone'),
	Fax: () => field('Fax'),
	Email: () => field('Email'),
	SupportRepId: () => field('SupportRepId'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_CustomerCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_CustomerAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_CustomerSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_CustomerMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_CustomerMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_CustomerGroupByOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_CustomerGroupByOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_CustomerGroupByOutputType', T>(
		SCHEMA as any,
		'chinook_CustomerGroupByOutputType',
		select(chinook_CustomerGroupByOutputTypeSelector)
	);

interface Ichinook_EmployeeCountAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly EmployeeId: () => Field<'EmployeeId'>;

	readonly LastName: () => Field<'LastName'>;

	readonly FirstName: () => Field<'FirstName'>;

	readonly Title: () => Field<'Title'>;

	readonly ReportsTo: () => Field<'ReportsTo'>;

	readonly BirthDate: () => Field<'BirthDate'>;

	readonly HireDate: () => Field<'HireDate'>;

	readonly Address: () => Field<'Address'>;

	readonly City: () => Field<'City'>;

	readonly State: () => Field<'State'>;

	readonly Country: () => Field<'Country'>;

	readonly PostalCode: () => Field<'PostalCode'>;

	readonly Phone: () => Field<'Phone'>;

	readonly Fax: () => Field<'Fax'>;

	readonly Email: () => Field<'Email'>;

	readonly _all: () => Field<'_all'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_EmployeeCountAggregateOutputTypeSelector: Ichinook_EmployeeCountAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	EmployeeId: () => field('EmployeeId'),
	LastName: () => field('LastName'),
	FirstName: () => field('FirstName'),
	Title: () => field('Title'),
	ReportsTo: () => field('ReportsTo'),
	BirthDate: () => field('BirthDate'),
	HireDate: () => field('HireDate'),
	Address: () => field('Address'),
	City: () => field('City'),
	State: () => field('State'),
	Country: () => field('Country'),
	PostalCode: () => field('PostalCode'),
	Phone: () => field('Phone'),
	Fax: () => field('Fax'),
	Email: () => field('Email'),
	_all: () => field('_all'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_EmployeeCountAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_EmployeeCountAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_EmployeeCountAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_EmployeeCountAggregateOutputType',
		select(chinook_EmployeeCountAggregateOutputTypeSelector)
	);

interface Ichinook_EmployeeAvgAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly EmployeeId: () => Field<'EmployeeId'>;

	readonly ReportsTo: () => Field<'ReportsTo'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_EmployeeAvgAggregateOutputTypeSelector: Ichinook_EmployeeAvgAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	EmployeeId: () => field('EmployeeId'),
	ReportsTo: () => field('ReportsTo'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_EmployeeAvgAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_EmployeeAvgAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_EmployeeAvgAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_EmployeeAvgAggregateOutputType',
		select(chinook_EmployeeAvgAggregateOutputTypeSelector)
	);

interface Ichinook_EmployeeSumAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly EmployeeId: () => Field<'EmployeeId'>;

	readonly ReportsTo: () => Field<'ReportsTo'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_EmployeeSumAggregateOutputTypeSelector: Ichinook_EmployeeSumAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	EmployeeId: () => field('EmployeeId'),
	ReportsTo: () => field('ReportsTo'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_EmployeeSumAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_EmployeeSumAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_EmployeeSumAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_EmployeeSumAggregateOutputType',
		select(chinook_EmployeeSumAggregateOutputTypeSelector)
	);

interface Ichinook_EmployeeMinAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly EmployeeId: () => Field<'EmployeeId'>;

	readonly LastName: () => Field<'LastName'>;

	readonly FirstName: () => Field<'FirstName'>;

	readonly Title: () => Field<'Title'>;

	readonly ReportsTo: () => Field<'ReportsTo'>;

	readonly BirthDate: () => Field<'BirthDate'>;

	readonly HireDate: () => Field<'HireDate'>;

	readonly Address: () => Field<'Address'>;

	readonly City: () => Field<'City'>;

	readonly State: () => Field<'State'>;

	readonly Country: () => Field<'Country'>;

	readonly PostalCode: () => Field<'PostalCode'>;

	readonly Phone: () => Field<'Phone'>;

	readonly Fax: () => Field<'Fax'>;

	readonly Email: () => Field<'Email'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_EmployeeMinAggregateOutputTypeSelector: Ichinook_EmployeeMinAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	EmployeeId: () => field('EmployeeId'),
	LastName: () => field('LastName'),
	FirstName: () => field('FirstName'),
	Title: () => field('Title'),
	ReportsTo: () => field('ReportsTo'),
	BirthDate: () => field('BirthDate'),
	HireDate: () => field('HireDate'),
	Address: () => field('Address'),
	City: () => field('City'),
	State: () => field('State'),
	Country: () => field('Country'),
	PostalCode: () => field('PostalCode'),
	Phone: () => field('Phone'),
	Fax: () => field('Fax'),
	Email: () => field('Email'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_EmployeeMinAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_EmployeeMinAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_EmployeeMinAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_EmployeeMinAggregateOutputType',
		select(chinook_EmployeeMinAggregateOutputTypeSelector)
	);

interface Ichinook_EmployeeMaxAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly EmployeeId: () => Field<'EmployeeId'>;

	readonly LastName: () => Field<'LastName'>;

	readonly FirstName: () => Field<'FirstName'>;

	readonly Title: () => Field<'Title'>;

	readonly ReportsTo: () => Field<'ReportsTo'>;

	readonly BirthDate: () => Field<'BirthDate'>;

	readonly HireDate: () => Field<'HireDate'>;

	readonly Address: () => Field<'Address'>;

	readonly City: () => Field<'City'>;

	readonly State: () => Field<'State'>;

	readonly Country: () => Field<'Country'>;

	readonly PostalCode: () => Field<'PostalCode'>;

	readonly Phone: () => Field<'Phone'>;

	readonly Fax: () => Field<'Fax'>;

	readonly Email: () => Field<'Email'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_EmployeeMaxAggregateOutputTypeSelector: Ichinook_EmployeeMaxAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	EmployeeId: () => field('EmployeeId'),
	LastName: () => field('LastName'),
	FirstName: () => field('FirstName'),
	Title: () => field('Title'),
	ReportsTo: () => field('ReportsTo'),
	BirthDate: () => field('BirthDate'),
	HireDate: () => field('HireDate'),
	Address: () => field('Address'),
	City: () => field('City'),
	State: () => field('State'),
	Country: () => field('Country'),
	PostalCode: () => field('PostalCode'),
	Phone: () => field('Phone'),
	Fax: () => field('Fax'),
	Email: () => field('Email'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_EmployeeMaxAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_EmployeeMaxAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_EmployeeMaxAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_EmployeeMaxAggregateOutputType',
		select(chinook_EmployeeMaxAggregateOutputTypeSelector)
	);

interface Ichinook_AggregateEmployeeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_EmployeeCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_EmployeeAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_EmployeeSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_EmployeeMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_EmployeeMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AggregateEmployeeSelector: Ichinook_AggregateEmployeeSelector = {
	__typename: () => field('__typename'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_EmployeeCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_EmployeeAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_EmployeeSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_EmployeeMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_EmployeeMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_AggregateEmployee = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_AggregateEmployeeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_AggregateEmployee', T>(
		SCHEMA as any,
		'chinook_AggregateEmployee',
		select(chinook_AggregateEmployeeSelector)
	);

interface Ichinook_EmployeeGroupByOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly EmployeeId: () => Field<'EmployeeId'>;

	readonly LastName: () => Field<'LastName'>;

	readonly FirstName: () => Field<'FirstName'>;

	readonly Title: () => Field<'Title'>;

	readonly ReportsTo: () => Field<'ReportsTo'>;

	readonly BirthDate: () => Field<'BirthDate'>;

	readonly HireDate: () => Field<'HireDate'>;

	readonly Address: () => Field<'Address'>;

	readonly City: () => Field<'City'>;

	readonly State: () => Field<'State'>;

	readonly Country: () => Field<'Country'>;

	readonly PostalCode: () => Field<'PostalCode'>;

	readonly Phone: () => Field<'Phone'>;

	readonly Fax: () => Field<'Fax'>;

	readonly Email: () => Field<'Email'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_EmployeeCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_EmployeeAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_EmployeeSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_EmployeeMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_EmployeeMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_EmployeeGroupByOutputTypeSelector: Ichinook_EmployeeGroupByOutputTypeSelector = {
	__typename: () => field('__typename'),
	EmployeeId: () => field('EmployeeId'),
	LastName: () => field('LastName'),
	FirstName: () => field('FirstName'),
	Title: () => field('Title'),
	ReportsTo: () => field('ReportsTo'),
	BirthDate: () => field('BirthDate'),
	HireDate: () => field('HireDate'),
	Address: () => field('Address'),
	City: () => field('City'),
	State: () => field('State'),
	Country: () => field('Country'),
	PostalCode: () => field('PostalCode'),
	Phone: () => field('Phone'),
	Fax: () => field('Fax'),
	Email: () => field('Email'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_EmployeeCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_EmployeeAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_EmployeeSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_EmployeeMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_EmployeeMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_EmployeeGroupByOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_EmployeeGroupByOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_EmployeeGroupByOutputType', T>(
		SCHEMA as any,
		'chinook_EmployeeGroupByOutputType',
		select(chinook_EmployeeGroupByOutputTypeSelector)
	);

interface Ichinook_GenreCountAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly GenreId: () => Field<'GenreId'>;

	readonly Name: () => Field<'Name'>;

	readonly _all: () => Field<'_all'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_GenreCountAggregateOutputTypeSelector: Ichinook_GenreCountAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	GenreId: () => field('GenreId'),
	Name: () => field('Name'),
	_all: () => field('_all'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_GenreCountAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_GenreCountAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_GenreCountAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_GenreCountAggregateOutputType',
		select(chinook_GenreCountAggregateOutputTypeSelector)
	);

interface Ichinook_GenreAvgAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly GenreId: () => Field<'GenreId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_GenreAvgAggregateOutputTypeSelector: Ichinook_GenreAvgAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	GenreId: () => field('GenreId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_GenreAvgAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_GenreAvgAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_GenreAvgAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_GenreAvgAggregateOutputType',
		select(chinook_GenreAvgAggregateOutputTypeSelector)
	);

interface Ichinook_GenreSumAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly GenreId: () => Field<'GenreId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_GenreSumAggregateOutputTypeSelector: Ichinook_GenreSumAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	GenreId: () => field('GenreId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_GenreSumAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_GenreSumAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_GenreSumAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_GenreSumAggregateOutputType',
		select(chinook_GenreSumAggregateOutputTypeSelector)
	);

interface Ichinook_GenreMinAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly GenreId: () => Field<'GenreId'>;

	readonly Name: () => Field<'Name'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_GenreMinAggregateOutputTypeSelector: Ichinook_GenreMinAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	GenreId: () => field('GenreId'),
	Name: () => field('Name'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_GenreMinAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_GenreMinAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_GenreMinAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_GenreMinAggregateOutputType',
		select(chinook_GenreMinAggregateOutputTypeSelector)
	);

interface Ichinook_GenreMaxAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly GenreId: () => Field<'GenreId'>;

	readonly Name: () => Field<'Name'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_GenreMaxAggregateOutputTypeSelector: Ichinook_GenreMaxAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	GenreId: () => field('GenreId'),
	Name: () => field('Name'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_GenreMaxAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_GenreMaxAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_GenreMaxAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_GenreMaxAggregateOutputType',
		select(chinook_GenreMaxAggregateOutputTypeSelector)
	);

interface Ichinook_AggregateGenreSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_GenreCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_GenreAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_GenreSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_GenreMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_GenreMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AggregateGenreSelector: Ichinook_AggregateGenreSelector = {
	__typename: () => field('__typename'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_GenreCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_GenreAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_GenreSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_GenreMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_GenreMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_AggregateGenre = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_AggregateGenreSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_AggregateGenre', T>(
		SCHEMA as any,
		'chinook_AggregateGenre',
		select(chinook_AggregateGenreSelector)
	);

interface Ichinook_GenreGroupByOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly GenreId: () => Field<'GenreId'>;

	readonly Name: () => Field<'Name'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_GenreCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_GenreAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_GenreSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_GenreMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_GenreMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_GenreGroupByOutputTypeSelector: Ichinook_GenreGroupByOutputTypeSelector = {
	__typename: () => field('__typename'),
	GenreId: () => field('GenreId'),
	Name: () => field('Name'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_GenreCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_GenreAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_GenreSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_GenreMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_GenreMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_GenreGroupByOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_GenreGroupByOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_GenreGroupByOutputType', T>(
		SCHEMA as any,
		'chinook_GenreGroupByOutputType',
		select(chinook_GenreGroupByOutputTypeSelector)
	);

interface Ichinook_InvoiceCountAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly InvoiceId: () => Field<'InvoiceId'>;

	readonly CustomerId: () => Field<'CustomerId'>;

	readonly InvoiceDate: () => Field<'InvoiceDate'>;

	readonly BillingAddress: () => Field<'BillingAddress'>;

	readonly BillingCity: () => Field<'BillingCity'>;

	readonly BillingState: () => Field<'BillingState'>;

	readonly BillingCountry: () => Field<'BillingCountry'>;

	readonly BillingPostalCode: () => Field<'BillingPostalCode'>;

	readonly Total: () => Field<'Total'>;

	readonly _all: () => Field<'_all'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_InvoiceCountAggregateOutputTypeSelector: Ichinook_InvoiceCountAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	InvoiceId: () => field('InvoiceId'),
	CustomerId: () => field('CustomerId'),
	InvoiceDate: () => field('InvoiceDate'),
	BillingAddress: () => field('BillingAddress'),
	BillingCity: () => field('BillingCity'),
	BillingState: () => field('BillingState'),
	BillingCountry: () => field('BillingCountry'),
	BillingPostalCode: () => field('BillingPostalCode'),
	Total: () => field('Total'),
	_all: () => field('_all'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_InvoiceCountAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_InvoiceCountAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_InvoiceCountAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_InvoiceCountAggregateOutputType',
		select(chinook_InvoiceCountAggregateOutputTypeSelector)
	);

interface Ichinook_InvoiceAvgAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly InvoiceId: () => Field<'InvoiceId'>;

	readonly CustomerId: () => Field<'CustomerId'>;

	readonly Total: () => Field<'Total'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_InvoiceAvgAggregateOutputTypeSelector: Ichinook_InvoiceAvgAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	InvoiceId: () => field('InvoiceId'),
	CustomerId: () => field('CustomerId'),
	Total: () => field('Total'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_InvoiceAvgAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_InvoiceAvgAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_InvoiceAvgAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_InvoiceAvgAggregateOutputType',
		select(chinook_InvoiceAvgAggregateOutputTypeSelector)
	);

interface Ichinook_InvoiceSumAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly InvoiceId: () => Field<'InvoiceId'>;

	readonly CustomerId: () => Field<'CustomerId'>;

	readonly Total: () => Field<'Total'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_InvoiceSumAggregateOutputTypeSelector: Ichinook_InvoiceSumAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	InvoiceId: () => field('InvoiceId'),
	CustomerId: () => field('CustomerId'),
	Total: () => field('Total'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_InvoiceSumAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_InvoiceSumAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_InvoiceSumAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_InvoiceSumAggregateOutputType',
		select(chinook_InvoiceSumAggregateOutputTypeSelector)
	);

interface Ichinook_InvoiceMinAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly InvoiceId: () => Field<'InvoiceId'>;

	readonly CustomerId: () => Field<'CustomerId'>;

	readonly InvoiceDate: () => Field<'InvoiceDate'>;

	readonly BillingAddress: () => Field<'BillingAddress'>;

	readonly BillingCity: () => Field<'BillingCity'>;

	readonly BillingState: () => Field<'BillingState'>;

	readonly BillingCountry: () => Field<'BillingCountry'>;

	readonly BillingPostalCode: () => Field<'BillingPostalCode'>;

	readonly Total: () => Field<'Total'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_InvoiceMinAggregateOutputTypeSelector: Ichinook_InvoiceMinAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	InvoiceId: () => field('InvoiceId'),
	CustomerId: () => field('CustomerId'),
	InvoiceDate: () => field('InvoiceDate'),
	BillingAddress: () => field('BillingAddress'),
	BillingCity: () => field('BillingCity'),
	BillingState: () => field('BillingState'),
	BillingCountry: () => field('BillingCountry'),
	BillingPostalCode: () => field('BillingPostalCode'),
	Total: () => field('Total'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_InvoiceMinAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_InvoiceMinAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_InvoiceMinAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_InvoiceMinAggregateOutputType',
		select(chinook_InvoiceMinAggregateOutputTypeSelector)
	);

interface Ichinook_InvoiceMaxAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly InvoiceId: () => Field<'InvoiceId'>;

	readonly CustomerId: () => Field<'CustomerId'>;

	readonly InvoiceDate: () => Field<'InvoiceDate'>;

	readonly BillingAddress: () => Field<'BillingAddress'>;

	readonly BillingCity: () => Field<'BillingCity'>;

	readonly BillingState: () => Field<'BillingState'>;

	readonly BillingCountry: () => Field<'BillingCountry'>;

	readonly BillingPostalCode: () => Field<'BillingPostalCode'>;

	readonly Total: () => Field<'Total'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_InvoiceMaxAggregateOutputTypeSelector: Ichinook_InvoiceMaxAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	InvoiceId: () => field('InvoiceId'),
	CustomerId: () => field('CustomerId'),
	InvoiceDate: () => field('InvoiceDate'),
	BillingAddress: () => field('BillingAddress'),
	BillingCity: () => field('BillingCity'),
	BillingState: () => field('BillingState'),
	BillingCountry: () => field('BillingCountry'),
	BillingPostalCode: () => field('BillingPostalCode'),
	Total: () => field('Total'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_InvoiceMaxAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_InvoiceMaxAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_InvoiceMaxAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_InvoiceMaxAggregateOutputType',
		select(chinook_InvoiceMaxAggregateOutputTypeSelector)
	);

interface Ichinook_AggregateInvoiceSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AggregateInvoiceSelector: Ichinook_AggregateInvoiceSelector = {
	__typename: () => field('__typename'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_InvoiceCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_InvoiceAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_InvoiceSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_InvoiceMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_InvoiceMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_AggregateInvoice = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_AggregateInvoiceSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_AggregateInvoice', T>(
		SCHEMA as any,
		'chinook_AggregateInvoice',
		select(chinook_AggregateInvoiceSelector)
	);

interface Ichinook_InvoiceGroupByOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly InvoiceId: () => Field<'InvoiceId'>;

	readonly CustomerId: () => Field<'CustomerId'>;

	readonly InvoiceDate: () => Field<'InvoiceDate'>;

	readonly BillingAddress: () => Field<'BillingAddress'>;

	readonly BillingCity: () => Field<'BillingCity'>;

	readonly BillingState: () => Field<'BillingState'>;

	readonly BillingCountry: () => Field<'BillingCountry'>;

	readonly BillingPostalCode: () => Field<'BillingPostalCode'>;

	readonly Total: () => Field<'Total'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_InvoiceGroupByOutputTypeSelector: Ichinook_InvoiceGroupByOutputTypeSelector = {
	__typename: () => field('__typename'),
	InvoiceId: () => field('InvoiceId'),
	CustomerId: () => field('CustomerId'),
	InvoiceDate: () => field('InvoiceDate'),
	BillingAddress: () => field('BillingAddress'),
	BillingCity: () => field('BillingCity'),
	BillingState: () => field('BillingState'),
	BillingCountry: () => field('BillingCountry'),
	BillingPostalCode: () => field('BillingPostalCode'),
	Total: () => field('Total'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_InvoiceCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_InvoiceAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_InvoiceSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_InvoiceMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_InvoiceMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_InvoiceGroupByOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_InvoiceGroupByOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_InvoiceGroupByOutputType', T>(
		SCHEMA as any,
		'chinook_InvoiceGroupByOutputType',
		select(chinook_InvoiceGroupByOutputTypeSelector)
	);

interface Ichinook_InvoiceLineCountAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly InvoiceLineId: () => Field<'InvoiceLineId'>;

	readonly InvoiceId: () => Field<'InvoiceId'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly UnitPrice: () => Field<'UnitPrice'>;

	readonly Quantity: () => Field<'Quantity'>;

	readonly _all: () => Field<'_all'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_InvoiceLineCountAggregateOutputTypeSelector: Ichinook_InvoiceLineCountAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	InvoiceLineId: () => field('InvoiceLineId'),
	InvoiceId: () => field('InvoiceId'),
	TrackId: () => field('TrackId'),
	UnitPrice: () => field('UnitPrice'),
	Quantity: () => field('Quantity'),
	_all: () => field('_all'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_InvoiceLineCountAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_InvoiceLineCountAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_InvoiceLineCountAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_InvoiceLineCountAggregateOutputType',
		select(chinook_InvoiceLineCountAggregateOutputTypeSelector)
	);

interface Ichinook_InvoiceLineAvgAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly InvoiceLineId: () => Field<'InvoiceLineId'>;

	readonly InvoiceId: () => Field<'InvoiceId'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly UnitPrice: () => Field<'UnitPrice'>;

	readonly Quantity: () => Field<'Quantity'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_InvoiceLineAvgAggregateOutputTypeSelector: Ichinook_InvoiceLineAvgAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	InvoiceLineId: () => field('InvoiceLineId'),
	InvoiceId: () => field('InvoiceId'),
	TrackId: () => field('TrackId'),
	UnitPrice: () => field('UnitPrice'),
	Quantity: () => field('Quantity'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_InvoiceLineAvgAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_InvoiceLineAvgAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_InvoiceLineAvgAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_InvoiceLineAvgAggregateOutputType',
		select(chinook_InvoiceLineAvgAggregateOutputTypeSelector)
	);

interface Ichinook_InvoiceLineSumAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly InvoiceLineId: () => Field<'InvoiceLineId'>;

	readonly InvoiceId: () => Field<'InvoiceId'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly UnitPrice: () => Field<'UnitPrice'>;

	readonly Quantity: () => Field<'Quantity'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_InvoiceLineSumAggregateOutputTypeSelector: Ichinook_InvoiceLineSumAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	InvoiceLineId: () => field('InvoiceLineId'),
	InvoiceId: () => field('InvoiceId'),
	TrackId: () => field('TrackId'),
	UnitPrice: () => field('UnitPrice'),
	Quantity: () => field('Quantity'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_InvoiceLineSumAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_InvoiceLineSumAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_InvoiceLineSumAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_InvoiceLineSumAggregateOutputType',
		select(chinook_InvoiceLineSumAggregateOutputTypeSelector)
	);

interface Ichinook_InvoiceLineMinAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly InvoiceLineId: () => Field<'InvoiceLineId'>;

	readonly InvoiceId: () => Field<'InvoiceId'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly UnitPrice: () => Field<'UnitPrice'>;

	readonly Quantity: () => Field<'Quantity'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_InvoiceLineMinAggregateOutputTypeSelector: Ichinook_InvoiceLineMinAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	InvoiceLineId: () => field('InvoiceLineId'),
	InvoiceId: () => field('InvoiceId'),
	TrackId: () => field('TrackId'),
	UnitPrice: () => field('UnitPrice'),
	Quantity: () => field('Quantity'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_InvoiceLineMinAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_InvoiceLineMinAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_InvoiceLineMinAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_InvoiceLineMinAggregateOutputType',
		select(chinook_InvoiceLineMinAggregateOutputTypeSelector)
	);

interface Ichinook_InvoiceLineMaxAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly InvoiceLineId: () => Field<'InvoiceLineId'>;

	readonly InvoiceId: () => Field<'InvoiceId'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly UnitPrice: () => Field<'UnitPrice'>;

	readonly Quantity: () => Field<'Quantity'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_InvoiceLineMaxAggregateOutputTypeSelector: Ichinook_InvoiceLineMaxAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	InvoiceLineId: () => field('InvoiceLineId'),
	InvoiceId: () => field('InvoiceId'),
	TrackId: () => field('TrackId'),
	UnitPrice: () => field('UnitPrice'),
	Quantity: () => field('Quantity'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_InvoiceLineMaxAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_InvoiceLineMaxAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_InvoiceLineMaxAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_InvoiceLineMaxAggregateOutputType',
		select(chinook_InvoiceLineMaxAggregateOutputTypeSelector)
	);

interface Ichinook_AggregateInvoiceLineSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceLineCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceLineAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceLineSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceLineMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceLineMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AggregateInvoiceLineSelector: Ichinook_AggregateInvoiceLineSelector = {
	__typename: () => field('__typename'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_InvoiceLineCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_InvoiceLineAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_InvoiceLineSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_InvoiceLineMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_InvoiceLineMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_AggregateInvoiceLine = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_AggregateInvoiceLineSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_AggregateInvoiceLine', T>(
		SCHEMA as any,
		'chinook_AggregateInvoiceLine',
		select(chinook_AggregateInvoiceLineSelector)
	);

interface Ichinook_InvoiceLineGroupByOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly InvoiceLineId: () => Field<'InvoiceLineId'>;

	readonly InvoiceId: () => Field<'InvoiceId'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly UnitPrice: () => Field<'UnitPrice'>;

	readonly Quantity: () => Field<'Quantity'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceLineCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceLineAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceLineSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceLineMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_InvoiceLineMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_InvoiceLineGroupByOutputTypeSelector: Ichinook_InvoiceLineGroupByOutputTypeSelector = {
	__typename: () => field('__typename'),
	InvoiceLineId: () => field('InvoiceLineId'),
	InvoiceId: () => field('InvoiceId'),
	TrackId: () => field('TrackId'),
	UnitPrice: () => field('UnitPrice'),
	Quantity: () => field('Quantity'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_InvoiceLineCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_InvoiceLineAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_InvoiceLineSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_InvoiceLineMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_InvoiceLineMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_InvoiceLineGroupByOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_InvoiceLineGroupByOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_InvoiceLineGroupByOutputType', T>(
		SCHEMA as any,
		'chinook_InvoiceLineGroupByOutputType',
		select(chinook_InvoiceLineGroupByOutputTypeSelector)
	);

interface Ichinook_MediaTypeCountAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly MediaTypeId: () => Field<'MediaTypeId'>;

	readonly Name: () => Field<'Name'>;

	readonly _all: () => Field<'_all'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_MediaTypeCountAggregateOutputTypeSelector: Ichinook_MediaTypeCountAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	MediaTypeId: () => field('MediaTypeId'),
	Name: () => field('Name'),
	_all: () => field('_all'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_MediaTypeCountAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_MediaTypeCountAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_MediaTypeCountAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_MediaTypeCountAggregateOutputType',
		select(chinook_MediaTypeCountAggregateOutputTypeSelector)
	);

interface Ichinook_MediaTypeAvgAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly MediaTypeId: () => Field<'MediaTypeId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_MediaTypeAvgAggregateOutputTypeSelector: Ichinook_MediaTypeAvgAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	MediaTypeId: () => field('MediaTypeId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_MediaTypeAvgAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_MediaTypeAvgAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_MediaTypeAvgAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_MediaTypeAvgAggregateOutputType',
		select(chinook_MediaTypeAvgAggregateOutputTypeSelector)
	);

interface Ichinook_MediaTypeSumAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly MediaTypeId: () => Field<'MediaTypeId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_MediaTypeSumAggregateOutputTypeSelector: Ichinook_MediaTypeSumAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	MediaTypeId: () => field('MediaTypeId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_MediaTypeSumAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_MediaTypeSumAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_MediaTypeSumAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_MediaTypeSumAggregateOutputType',
		select(chinook_MediaTypeSumAggregateOutputTypeSelector)
	);

interface Ichinook_MediaTypeMinAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly MediaTypeId: () => Field<'MediaTypeId'>;

	readonly Name: () => Field<'Name'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_MediaTypeMinAggregateOutputTypeSelector: Ichinook_MediaTypeMinAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	MediaTypeId: () => field('MediaTypeId'),
	Name: () => field('Name'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_MediaTypeMinAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_MediaTypeMinAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_MediaTypeMinAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_MediaTypeMinAggregateOutputType',
		select(chinook_MediaTypeMinAggregateOutputTypeSelector)
	);

interface Ichinook_MediaTypeMaxAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly MediaTypeId: () => Field<'MediaTypeId'>;

	readonly Name: () => Field<'Name'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_MediaTypeMaxAggregateOutputTypeSelector: Ichinook_MediaTypeMaxAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	MediaTypeId: () => field('MediaTypeId'),
	Name: () => field('Name'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_MediaTypeMaxAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_MediaTypeMaxAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_MediaTypeMaxAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_MediaTypeMaxAggregateOutputType',
		select(chinook_MediaTypeMaxAggregateOutputTypeSelector)
	);

interface Ichinook_AggregateMediaTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_MediaTypeCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_MediaTypeAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_MediaTypeSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_MediaTypeMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_MediaTypeMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AggregateMediaTypeSelector: Ichinook_AggregateMediaTypeSelector = {
	__typename: () => field('__typename'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_MediaTypeCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_MediaTypeAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_MediaTypeSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_MediaTypeMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_MediaTypeMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_AggregateMediaType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_AggregateMediaTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_AggregateMediaType', T>(
		SCHEMA as any,
		'chinook_AggregateMediaType',
		select(chinook_AggregateMediaTypeSelector)
	);

interface Ichinook_MediaTypeGroupByOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly MediaTypeId: () => Field<'MediaTypeId'>;

	readonly Name: () => Field<'Name'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_MediaTypeCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_MediaTypeAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_MediaTypeSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_MediaTypeMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_MediaTypeMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_MediaTypeGroupByOutputTypeSelector: Ichinook_MediaTypeGroupByOutputTypeSelector = {
	__typename: () => field('__typename'),
	MediaTypeId: () => field('MediaTypeId'),
	Name: () => field('Name'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_MediaTypeCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_MediaTypeAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_MediaTypeSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_MediaTypeMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_MediaTypeMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_MediaTypeGroupByOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_MediaTypeGroupByOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_MediaTypeGroupByOutputType', T>(
		SCHEMA as any,
		'chinook_MediaTypeGroupByOutputType',
		select(chinook_MediaTypeGroupByOutputTypeSelector)
	);

interface Ichinook_PlaylistCountAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly PlaylistId: () => Field<'PlaylistId'>;

	readonly Name: () => Field<'Name'>;

	readonly _all: () => Field<'_all'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_PlaylistCountAggregateOutputTypeSelector: Ichinook_PlaylistCountAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	PlaylistId: () => field('PlaylistId'),
	Name: () => field('Name'),
	_all: () => field('_all'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_PlaylistCountAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_PlaylistCountAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_PlaylistCountAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_PlaylistCountAggregateOutputType',
		select(chinook_PlaylistCountAggregateOutputTypeSelector)
	);

interface Ichinook_PlaylistAvgAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly PlaylistId: () => Field<'PlaylistId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_PlaylistAvgAggregateOutputTypeSelector: Ichinook_PlaylistAvgAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	PlaylistId: () => field('PlaylistId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_PlaylistAvgAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_PlaylistAvgAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_PlaylistAvgAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_PlaylistAvgAggregateOutputType',
		select(chinook_PlaylistAvgAggregateOutputTypeSelector)
	);

interface Ichinook_PlaylistSumAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly PlaylistId: () => Field<'PlaylistId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_PlaylistSumAggregateOutputTypeSelector: Ichinook_PlaylistSumAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	PlaylistId: () => field('PlaylistId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_PlaylistSumAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_PlaylistSumAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_PlaylistSumAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_PlaylistSumAggregateOutputType',
		select(chinook_PlaylistSumAggregateOutputTypeSelector)
	);

interface Ichinook_PlaylistMinAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly PlaylistId: () => Field<'PlaylistId'>;

	readonly Name: () => Field<'Name'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_PlaylistMinAggregateOutputTypeSelector: Ichinook_PlaylistMinAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	PlaylistId: () => field('PlaylistId'),
	Name: () => field('Name'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_PlaylistMinAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_PlaylistMinAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_PlaylistMinAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_PlaylistMinAggregateOutputType',
		select(chinook_PlaylistMinAggregateOutputTypeSelector)
	);

interface Ichinook_PlaylistMaxAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly PlaylistId: () => Field<'PlaylistId'>;

	readonly Name: () => Field<'Name'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_PlaylistMaxAggregateOutputTypeSelector: Ichinook_PlaylistMaxAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	PlaylistId: () => field('PlaylistId'),
	Name: () => field('Name'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_PlaylistMaxAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_PlaylistMaxAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_PlaylistMaxAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_PlaylistMaxAggregateOutputType',
		select(chinook_PlaylistMaxAggregateOutputTypeSelector)
	);

interface Ichinook_AggregatePlaylistSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AggregatePlaylistSelector: Ichinook_AggregatePlaylistSelector = {
	__typename: () => field('__typename'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_PlaylistCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_PlaylistAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_PlaylistSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_PlaylistMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_PlaylistMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_AggregatePlaylist = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_AggregatePlaylistSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_AggregatePlaylist', T>(
		SCHEMA as any,
		'chinook_AggregatePlaylist',
		select(chinook_AggregatePlaylistSelector)
	);

interface Ichinook_PlaylistGroupByOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly PlaylistId: () => Field<'PlaylistId'>;

	readonly Name: () => Field<'Name'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_PlaylistGroupByOutputTypeSelector: Ichinook_PlaylistGroupByOutputTypeSelector = {
	__typename: () => field('__typename'),
	PlaylistId: () => field('PlaylistId'),
	Name: () => field('Name'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_PlaylistCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_PlaylistAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_PlaylistSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_PlaylistMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_PlaylistMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_PlaylistGroupByOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_PlaylistGroupByOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_PlaylistGroupByOutputType', T>(
		SCHEMA as any,
		'chinook_PlaylistGroupByOutputType',
		select(chinook_PlaylistGroupByOutputTypeSelector)
	);

interface Ichinook_PlaylistTrackCountAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly PlaylistId: () => Field<'PlaylistId'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly _all: () => Field<'_all'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_PlaylistTrackCountAggregateOutputTypeSelector: Ichinook_PlaylistTrackCountAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	PlaylistId: () => field('PlaylistId'),
	TrackId: () => field('TrackId'),
	_all: () => field('_all'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_PlaylistTrackCountAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_PlaylistTrackCountAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_PlaylistTrackCountAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_PlaylistTrackCountAggregateOutputType',
		select(chinook_PlaylistTrackCountAggregateOutputTypeSelector)
	);

interface Ichinook_PlaylistTrackAvgAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly PlaylistId: () => Field<'PlaylistId'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_PlaylistTrackAvgAggregateOutputTypeSelector: Ichinook_PlaylistTrackAvgAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	PlaylistId: () => field('PlaylistId'),
	TrackId: () => field('TrackId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_PlaylistTrackAvgAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_PlaylistTrackAvgAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_PlaylistTrackAvgAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_PlaylistTrackAvgAggregateOutputType',
		select(chinook_PlaylistTrackAvgAggregateOutputTypeSelector)
	);

interface Ichinook_PlaylistTrackSumAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly PlaylistId: () => Field<'PlaylistId'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_PlaylistTrackSumAggregateOutputTypeSelector: Ichinook_PlaylistTrackSumAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	PlaylistId: () => field('PlaylistId'),
	TrackId: () => field('TrackId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_PlaylistTrackSumAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_PlaylistTrackSumAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_PlaylistTrackSumAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_PlaylistTrackSumAggregateOutputType',
		select(chinook_PlaylistTrackSumAggregateOutputTypeSelector)
	);

interface Ichinook_PlaylistTrackMinAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly PlaylistId: () => Field<'PlaylistId'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_PlaylistTrackMinAggregateOutputTypeSelector: Ichinook_PlaylistTrackMinAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	PlaylistId: () => field('PlaylistId'),
	TrackId: () => field('TrackId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_PlaylistTrackMinAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_PlaylistTrackMinAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_PlaylistTrackMinAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_PlaylistTrackMinAggregateOutputType',
		select(chinook_PlaylistTrackMinAggregateOutputTypeSelector)
	);

interface Ichinook_PlaylistTrackMaxAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly PlaylistId: () => Field<'PlaylistId'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_PlaylistTrackMaxAggregateOutputTypeSelector: Ichinook_PlaylistTrackMaxAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	PlaylistId: () => field('PlaylistId'),
	TrackId: () => field('TrackId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_PlaylistTrackMaxAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_PlaylistTrackMaxAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_PlaylistTrackMaxAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_PlaylistTrackMaxAggregateOutputType',
		select(chinook_PlaylistTrackMaxAggregateOutputTypeSelector)
	);

interface Ichinook_AggregatePlaylistTrackSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistTrackCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistTrackAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistTrackSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistTrackMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistTrackMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AggregatePlaylistTrackSelector: Ichinook_AggregatePlaylistTrackSelector = {
	__typename: () => field('__typename'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_PlaylistTrackCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_PlaylistTrackAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_PlaylistTrackSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_PlaylistTrackMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_PlaylistTrackMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_AggregatePlaylistTrack = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_AggregatePlaylistTrackSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_AggregatePlaylistTrack', T>(
		SCHEMA as any,
		'chinook_AggregatePlaylistTrack',
		select(chinook_AggregatePlaylistTrackSelector)
	);

interface Ichinook_PlaylistTrackGroupByOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly PlaylistId: () => Field<'PlaylistId'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistTrackCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistTrackAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistTrackSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistTrackMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_PlaylistTrackMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_PlaylistTrackGroupByOutputTypeSelector: Ichinook_PlaylistTrackGroupByOutputTypeSelector = {
	__typename: () => field('__typename'),
	PlaylistId: () => field('PlaylistId'),
	TrackId: () => field('TrackId'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_PlaylistTrackCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_PlaylistTrackAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_PlaylistTrackSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_PlaylistTrackMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_PlaylistTrackMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_PlaylistTrackGroupByOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_PlaylistTrackGroupByOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_PlaylistTrackGroupByOutputType', T>(
		SCHEMA as any,
		'chinook_PlaylistTrackGroupByOutputType',
		select(chinook_PlaylistTrackGroupByOutputTypeSelector)
	);

interface Ichinook_TrackCountAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly Name: () => Field<'Name'>;

	readonly AlbumId: () => Field<'AlbumId'>;

	readonly MediaTypeId: () => Field<'MediaTypeId'>;

	readonly GenreId: () => Field<'GenreId'>;

	readonly Composer: () => Field<'Composer'>;

	readonly Milliseconds: () => Field<'Milliseconds'>;

	readonly String: () => Field<'String'>;

	readonly UnitPrice: () => Field<'UnitPrice'>;

	readonly _all: () => Field<'_all'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_TrackCountAggregateOutputTypeSelector: Ichinook_TrackCountAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	TrackId: () => field('TrackId'),
	Name: () => field('Name'),
	AlbumId: () => field('AlbumId'),
	MediaTypeId: () => field('MediaTypeId'),
	GenreId: () => field('GenreId'),
	Composer: () => field('Composer'),
	Milliseconds: () => field('Milliseconds'),
	String: () => field('String'),
	UnitPrice: () => field('UnitPrice'),
	_all: () => field('_all'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_TrackCountAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_TrackCountAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_TrackCountAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_TrackCountAggregateOutputType',
		select(chinook_TrackCountAggregateOutputTypeSelector)
	);

interface Ichinook_TrackAvgAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly AlbumId: () => Field<'AlbumId'>;

	readonly MediaTypeId: () => Field<'MediaTypeId'>;

	readonly GenreId: () => Field<'GenreId'>;

	readonly Milliseconds: () => Field<'Milliseconds'>;

	readonly String: () => Field<'String'>;

	readonly UnitPrice: () => Field<'UnitPrice'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_TrackAvgAggregateOutputTypeSelector: Ichinook_TrackAvgAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	TrackId: () => field('TrackId'),
	AlbumId: () => field('AlbumId'),
	MediaTypeId: () => field('MediaTypeId'),
	GenreId: () => field('GenreId'),
	Milliseconds: () => field('Milliseconds'),
	String: () => field('String'),
	UnitPrice: () => field('UnitPrice'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_TrackAvgAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_TrackAvgAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_TrackAvgAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_TrackAvgAggregateOutputType',
		select(chinook_TrackAvgAggregateOutputTypeSelector)
	);

interface Ichinook_TrackSumAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly AlbumId: () => Field<'AlbumId'>;

	readonly MediaTypeId: () => Field<'MediaTypeId'>;

	readonly GenreId: () => Field<'GenreId'>;

	readonly Milliseconds: () => Field<'Milliseconds'>;

	readonly String: () => Field<'String'>;

	readonly UnitPrice: () => Field<'UnitPrice'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_TrackSumAggregateOutputTypeSelector: Ichinook_TrackSumAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	TrackId: () => field('TrackId'),
	AlbumId: () => field('AlbumId'),
	MediaTypeId: () => field('MediaTypeId'),
	GenreId: () => field('GenreId'),
	Milliseconds: () => field('Milliseconds'),
	String: () => field('String'),
	UnitPrice: () => field('UnitPrice'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_TrackSumAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_TrackSumAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_TrackSumAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_TrackSumAggregateOutputType',
		select(chinook_TrackSumAggregateOutputTypeSelector)
	);

interface Ichinook_TrackMinAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly Name: () => Field<'Name'>;

	readonly AlbumId: () => Field<'AlbumId'>;

	readonly MediaTypeId: () => Field<'MediaTypeId'>;

	readonly GenreId: () => Field<'GenreId'>;

	readonly Composer: () => Field<'Composer'>;

	readonly Milliseconds: () => Field<'Milliseconds'>;

	readonly String: () => Field<'String'>;

	readonly UnitPrice: () => Field<'UnitPrice'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_TrackMinAggregateOutputTypeSelector: Ichinook_TrackMinAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	TrackId: () => field('TrackId'),
	Name: () => field('Name'),
	AlbumId: () => field('AlbumId'),
	MediaTypeId: () => field('MediaTypeId'),
	GenreId: () => field('GenreId'),
	Composer: () => field('Composer'),
	Milliseconds: () => field('Milliseconds'),
	String: () => field('String'),
	UnitPrice: () => field('UnitPrice'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_TrackMinAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_TrackMinAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_TrackMinAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_TrackMinAggregateOutputType',
		select(chinook_TrackMinAggregateOutputTypeSelector)
	);

interface Ichinook_TrackMaxAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly Name: () => Field<'Name'>;

	readonly AlbumId: () => Field<'AlbumId'>;

	readonly MediaTypeId: () => Field<'MediaTypeId'>;

	readonly GenreId: () => Field<'GenreId'>;

	readonly Composer: () => Field<'Composer'>;

	readonly Milliseconds: () => Field<'Milliseconds'>;

	readonly String: () => Field<'String'>;

	readonly UnitPrice: () => Field<'UnitPrice'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_TrackMaxAggregateOutputTypeSelector: Ichinook_TrackMaxAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	TrackId: () => field('TrackId'),
	Name: () => field('Name'),
	AlbumId: () => field('AlbumId'),
	MediaTypeId: () => field('MediaTypeId'),
	GenreId: () => field('GenreId'),
	Composer: () => field('Composer'),
	Milliseconds: () => field('Milliseconds'),
	String: () => field('String'),
	UnitPrice: () => field('UnitPrice'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_TrackMaxAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_TrackMaxAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_TrackMaxAggregateOutputType', T>(
		SCHEMA as any,
		'chinook_TrackMaxAggregateOutputType',
		select(chinook_TrackMaxAggregateOutputTypeSelector)
	);

interface Ichinook_AggregateTrackSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_TrackCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_TrackAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_TrackSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_TrackMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_TrackMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AggregateTrackSelector: Ichinook_AggregateTrackSelector = {
	__typename: () => field('__typename'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_TrackCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_TrackAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_TrackSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_TrackMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_TrackMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_AggregateTrack = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_AggregateTrackSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_AggregateTrack', T>(
		SCHEMA as any,
		'chinook_AggregateTrack',
		select(chinook_AggregateTrackSelector)
	);

interface Ichinook_TrackGroupByOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly TrackId: () => Field<'TrackId'>;

	readonly Name: () => Field<'Name'>;

	readonly AlbumId: () => Field<'AlbumId'>;

	readonly MediaTypeId: () => Field<'MediaTypeId'>;

	readonly GenreId: () => Field<'GenreId'>;

	readonly Composer: () => Field<'Composer'>;

	readonly Milliseconds: () => Field<'Milliseconds'>;

	readonly String: () => Field<'String'>;

	readonly UnitPrice: () => Field<'UnitPrice'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_TrackCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_TrackAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_TrackSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_TrackMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Ichinook_TrackMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_TrackGroupByOutputTypeSelector: Ichinook_TrackGroupByOutputTypeSelector = {
	__typename: () => field('__typename'),
	TrackId: () => field('TrackId'),
	Name: () => field('Name'),
	AlbumId: () => field('AlbumId'),
	MediaTypeId: () => field('MediaTypeId'),
	GenreId: () => field('GenreId'),
	Composer: () => field('Composer'),
	Milliseconds: () => field('Milliseconds'),
	String: () => field('String'),
	UnitPrice: () => field('UnitPrice'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(chinook_TrackCountAggregateOutputTypeSelector))),

	_avg: (select) =>
		field('_avg', undefined as never, selectionSet(select(chinook_TrackAvgAggregateOutputTypeSelector))),

	_sum: (select) =>
		field('_sum', undefined as never, selectionSet(select(chinook_TrackSumAggregateOutputTypeSelector))),

	_min: (select) =>
		field('_min', undefined as never, selectionSet(select(chinook_TrackMinAggregateOutputTypeSelector))),

	_max: (select) =>
		field('_max', undefined as never, selectionSet(select(chinook_TrackMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_TrackGroupByOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_TrackGroupByOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_TrackGroupByOutputType', T>(
		SCHEMA as any,
		'chinook_TrackGroupByOutputType',
		select(chinook_TrackGroupByOutputTypeSelector)
	);

interface Ichinook_AffectedRowsOutputSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly count: () => Field<'count'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const chinook_AffectedRowsOutputSelector: Ichinook_AffectedRowsOutputSelector = {
	__typename: () => field('__typename'),
	count: () => field('count'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const chinook_AffectedRowsOutput = <T extends ReadonlyArray<Selection>>(
	select: (t: Ichinook_AffectedRowsOutputSelector) => T
) =>
	new SelectionBuilder<ISchema, 'chinook_AffectedRowsOutput', T>(
		SCHEMA as any,
		'chinook_AffectedRowsOutput',
		select(chinook_AffectedRowsOutputSelector)
	);

interface IMutationSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly chinook_createOneAlbum: <
		V extends { data: Variable<string> | Ichinook_AlbumCreateInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AlbumSelector) => T
	) => Field<'chinook_createOneAlbum', [Argument<'data', V['data']>], SelectionSet<T>>;

	readonly chinook_upsertOneAlbum: <
		V extends {
			where: Variable<string> | Ichinook_AlbumWhereUniqueInput;
			create: Variable<string> | Ichinook_AlbumCreateInput;
			update: Variable<string> | Ichinook_AlbumUpdateInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AlbumSelector) => T
	) => Field<
		'chinook_upsertOneAlbum',
		[Argument<'where', V['where']>, Argument<'create', V['create']>, Argument<'update', V['update']>],
		SelectionSet<T>
	>;

	readonly chinook_deleteOneAlbum: <
		V extends { where: Variable<string> | Ichinook_AlbumWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AlbumSelector) => T
	) => Field<'chinook_deleteOneAlbum', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_updateOneAlbum: <
		V extends {
			data: Variable<string> | Ichinook_AlbumUpdateInput;
			where: Variable<string> | Ichinook_AlbumWhereUniqueInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AlbumSelector) => T
	) => Field<'chinook_updateOneAlbum', [Argument<'data', V['data']>, Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_updateManyAlbum: <
		V extends {
			data: Variable<string> | Ichinook_AlbumUpdateManyMutationInput;
			where?: Variable<string> | Ichinook_AlbumWhereInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<'chinook_updateManyAlbum', [Argument<'data', V['data']>, Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_deleteManyAlbum: <
		V extends { where?: Variable<string> | Ichinook_AlbumWhereInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<'chinook_deleteManyAlbum', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_createOneArtist: <
		V extends { data: Variable<string> | Ichinook_ArtistCreateInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_ArtistSelector) => T
	) => Field<'chinook_createOneArtist', [Argument<'data', V['data']>], SelectionSet<T>>;

	readonly chinook_upsertOneArtist: <
		V extends {
			where: Variable<string> | Ichinook_ArtistWhereUniqueInput;
			create: Variable<string> | Ichinook_ArtistCreateInput;
			update: Variable<string> | Ichinook_ArtistUpdateInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_ArtistSelector) => T
	) => Field<
		'chinook_upsertOneArtist',
		[Argument<'where', V['where']>, Argument<'create', V['create']>, Argument<'update', V['update']>],
		SelectionSet<T>
	>;

	readonly chinook_deleteOneArtist: <
		V extends { where: Variable<string> | Ichinook_ArtistWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_ArtistSelector) => T
	) => Field<'chinook_deleteOneArtist', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_updateOneArtist: <
		V extends {
			data: Variable<string> | Ichinook_ArtistUpdateInput;
			where: Variable<string> | Ichinook_ArtistWhereUniqueInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_ArtistSelector) => T
	) => Field<'chinook_updateOneArtist', [Argument<'data', V['data']>, Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_updateManyArtist: <
		V extends {
			data: Variable<string> | Ichinook_ArtistUpdateManyMutationInput;
			where?: Variable<string> | Ichinook_ArtistWhereInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<'chinook_updateManyArtist', [Argument<'data', V['data']>, Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_deleteManyArtist: <
		V extends { where?: Variable<string> | Ichinook_ArtistWhereInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<'chinook_deleteManyArtist', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_createOneCustomer: <
		V extends { data: Variable<string> | Ichinook_CustomerCreateInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_CustomerSelector) => T
	) => Field<'chinook_createOneCustomer', [Argument<'data', V['data']>], SelectionSet<T>>;

	readonly chinook_upsertOneCustomer: <
		V extends {
			where: Variable<string> | Ichinook_CustomerWhereUniqueInput;
			create: Variable<string> | Ichinook_CustomerCreateInput;
			update: Variable<string> | Ichinook_CustomerUpdateInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_CustomerSelector) => T
	) => Field<
		'chinook_upsertOneCustomer',
		[Argument<'where', V['where']>, Argument<'create', V['create']>, Argument<'update', V['update']>],
		SelectionSet<T>
	>;

	readonly chinook_deleteOneCustomer: <
		V extends { where: Variable<string> | Ichinook_CustomerWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_CustomerSelector) => T
	) => Field<'chinook_deleteOneCustomer', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_updateOneCustomer: <
		V extends {
			data: Variable<string> | Ichinook_CustomerUpdateInput;
			where: Variable<string> | Ichinook_CustomerWhereUniqueInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_CustomerSelector) => T
	) => Field<
		'chinook_updateOneCustomer',
		[Argument<'data', V['data']>, Argument<'where', V['where']>],
		SelectionSet<T>
	>;

	readonly chinook_updateManyCustomer: <
		V extends {
			data: Variable<string> | Ichinook_CustomerUpdateManyMutationInput;
			where?: Variable<string> | Ichinook_CustomerWhereInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<
		'chinook_updateManyCustomer',
		[Argument<'data', V['data']>, Argument<'where', V['where']>],
		SelectionSet<T>
	>;

	readonly chinook_deleteManyCustomer: <
		V extends { where?: Variable<string> | Ichinook_CustomerWhereInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<'chinook_deleteManyCustomer', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_createOneEmployee: <
		V extends { data: Variable<string> | Ichinook_EmployeeCreateInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_EmployeeSelector) => T
	) => Field<'chinook_createOneEmployee', [Argument<'data', V['data']>], SelectionSet<T>>;

	readonly chinook_upsertOneEmployee: <
		V extends {
			where: Variable<string> | Ichinook_EmployeeWhereUniqueInput;
			create: Variable<string> | Ichinook_EmployeeCreateInput;
			update: Variable<string> | Ichinook_EmployeeUpdateInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_EmployeeSelector) => T
	) => Field<
		'chinook_upsertOneEmployee',
		[Argument<'where', V['where']>, Argument<'create', V['create']>, Argument<'update', V['update']>],
		SelectionSet<T>
	>;

	readonly chinook_deleteOneEmployee: <
		V extends { where: Variable<string> | Ichinook_EmployeeWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_EmployeeSelector) => T
	) => Field<'chinook_deleteOneEmployee', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_updateOneEmployee: <
		V extends {
			data: Variable<string> | Ichinook_EmployeeUpdateInput;
			where: Variable<string> | Ichinook_EmployeeWhereUniqueInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_EmployeeSelector) => T
	) => Field<
		'chinook_updateOneEmployee',
		[Argument<'data', V['data']>, Argument<'where', V['where']>],
		SelectionSet<T>
	>;

	readonly chinook_updateManyEmployee: <
		V extends {
			data: Variable<string> | Ichinook_EmployeeUpdateManyMutationInput;
			where?: Variable<string> | Ichinook_EmployeeWhereInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<
		'chinook_updateManyEmployee',
		[Argument<'data', V['data']>, Argument<'where', V['where']>],
		SelectionSet<T>
	>;

	readonly chinook_deleteManyEmployee: <
		V extends { where?: Variable<string> | Ichinook_EmployeeWhereInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<'chinook_deleteManyEmployee', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_createOneGenre: <
		V extends { data: Variable<string> | Ichinook_GenreCreateInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_GenreSelector) => T
	) => Field<'chinook_createOneGenre', [Argument<'data', V['data']>], SelectionSet<T>>;

	readonly chinook_upsertOneGenre: <
		V extends {
			where: Variable<string> | Ichinook_GenreWhereUniqueInput;
			create: Variable<string> | Ichinook_GenreCreateInput;
			update: Variable<string> | Ichinook_GenreUpdateInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_GenreSelector) => T
	) => Field<
		'chinook_upsertOneGenre',
		[Argument<'where', V['where']>, Argument<'create', V['create']>, Argument<'update', V['update']>],
		SelectionSet<T>
	>;

	readonly chinook_deleteOneGenre: <
		V extends { where: Variable<string> | Ichinook_GenreWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_GenreSelector) => T
	) => Field<'chinook_deleteOneGenre', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_updateOneGenre: <
		V extends {
			data: Variable<string> | Ichinook_GenreUpdateInput;
			where: Variable<string> | Ichinook_GenreWhereUniqueInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_GenreSelector) => T
	) => Field<'chinook_updateOneGenre', [Argument<'data', V['data']>, Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_updateManyGenre: <
		V extends {
			data: Variable<string> | Ichinook_GenreUpdateManyMutationInput;
			where?: Variable<string> | Ichinook_GenreWhereInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<'chinook_updateManyGenre', [Argument<'data', V['data']>, Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_deleteManyGenre: <
		V extends { where?: Variable<string> | Ichinook_GenreWhereInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<'chinook_deleteManyGenre', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_createOneInvoice: <
		V extends { data: Variable<string> | Ichinook_InvoiceCreateInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_InvoiceSelector) => T
	) => Field<'chinook_createOneInvoice', [Argument<'data', V['data']>], SelectionSet<T>>;

	readonly chinook_upsertOneInvoice: <
		V extends {
			where: Variable<string> | Ichinook_InvoiceWhereUniqueInput;
			create: Variable<string> | Ichinook_InvoiceCreateInput;
			update: Variable<string> | Ichinook_InvoiceUpdateInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_InvoiceSelector) => T
	) => Field<
		'chinook_upsertOneInvoice',
		[Argument<'where', V['where']>, Argument<'create', V['create']>, Argument<'update', V['update']>],
		SelectionSet<T>
	>;

	readonly chinook_deleteOneInvoice: <
		V extends { where: Variable<string> | Ichinook_InvoiceWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_InvoiceSelector) => T
	) => Field<'chinook_deleteOneInvoice', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_updateOneInvoice: <
		V extends {
			data: Variable<string> | Ichinook_InvoiceUpdateInput;
			where: Variable<string> | Ichinook_InvoiceWhereUniqueInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_InvoiceSelector) => T
	) => Field<'chinook_updateOneInvoice', [Argument<'data', V['data']>, Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_updateManyInvoice: <
		V extends {
			data: Variable<string> | Ichinook_InvoiceUpdateManyMutationInput;
			where?: Variable<string> | Ichinook_InvoiceWhereInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<
		'chinook_updateManyInvoice',
		[Argument<'data', V['data']>, Argument<'where', V['where']>],
		SelectionSet<T>
	>;

	readonly chinook_deleteManyInvoice: <
		V extends { where?: Variable<string> | Ichinook_InvoiceWhereInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<'chinook_deleteManyInvoice', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_createOneInvoiceLine: <
		V extends { data: Variable<string> | Ichinook_InvoiceLineCreateInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_InvoiceLineSelector) => T
	) => Field<'chinook_createOneInvoiceLine', [Argument<'data', V['data']>], SelectionSet<T>>;

	readonly chinook_upsertOneInvoiceLine: <
		V extends {
			where: Variable<string> | Ichinook_InvoiceLineWhereUniqueInput;
			create: Variable<string> | Ichinook_InvoiceLineCreateInput;
			update: Variable<string> | Ichinook_InvoiceLineUpdateInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_InvoiceLineSelector) => T
	) => Field<
		'chinook_upsertOneInvoiceLine',
		[Argument<'where', V['where']>, Argument<'create', V['create']>, Argument<'update', V['update']>],
		SelectionSet<T>
	>;

	readonly chinook_deleteOneInvoiceLine: <
		V extends {
			where: Variable<string> | Ichinook_InvoiceLineWhereUniqueInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_InvoiceLineSelector) => T
	) => Field<'chinook_deleteOneInvoiceLine', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_updateOneInvoiceLine: <
		V extends {
			data: Variable<string> | Ichinook_InvoiceLineUpdateInput;
			where: Variable<string> | Ichinook_InvoiceLineWhereUniqueInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_InvoiceLineSelector) => T
	) => Field<
		'chinook_updateOneInvoiceLine',
		[Argument<'data', V['data']>, Argument<'where', V['where']>],
		SelectionSet<T>
	>;

	readonly chinook_updateManyInvoiceLine: <
		V extends {
			data: Variable<string> | Ichinook_InvoiceLineUpdateManyMutationInput;
			where?: Variable<string> | Ichinook_InvoiceLineWhereInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<
		'chinook_updateManyInvoiceLine',
		[Argument<'data', V['data']>, Argument<'where', V['where']>],
		SelectionSet<T>
	>;

	readonly chinook_deleteManyInvoiceLine: <
		V extends { where?: Variable<string> | Ichinook_InvoiceLineWhereInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<'chinook_deleteManyInvoiceLine', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_createOneMediaType: <
		V extends { data: Variable<string> | Ichinook_MediaTypeCreateInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_MediaTypeSelector) => T
	) => Field<'chinook_createOneMediaType', [Argument<'data', V['data']>], SelectionSet<T>>;

	readonly chinook_upsertOneMediaType: <
		V extends {
			where: Variable<string> | Ichinook_MediaTypeWhereUniqueInput;
			create: Variable<string> | Ichinook_MediaTypeCreateInput;
			update: Variable<string> | Ichinook_MediaTypeUpdateInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_MediaTypeSelector) => T
	) => Field<
		'chinook_upsertOneMediaType',
		[Argument<'where', V['where']>, Argument<'create', V['create']>, Argument<'update', V['update']>],
		SelectionSet<T>
	>;

	readonly chinook_deleteOneMediaType: <
		V extends { where: Variable<string> | Ichinook_MediaTypeWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_MediaTypeSelector) => T
	) => Field<'chinook_deleteOneMediaType', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_updateOneMediaType: <
		V extends {
			data: Variable<string> | Ichinook_MediaTypeUpdateInput;
			where: Variable<string> | Ichinook_MediaTypeWhereUniqueInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_MediaTypeSelector) => T
	) => Field<
		'chinook_updateOneMediaType',
		[Argument<'data', V['data']>, Argument<'where', V['where']>],
		SelectionSet<T>
	>;

	readonly chinook_updateManyMediaType: <
		V extends {
			data: Variable<string> | Ichinook_MediaTypeUpdateManyMutationInput;
			where?: Variable<string> | Ichinook_MediaTypeWhereInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<
		'chinook_updateManyMediaType',
		[Argument<'data', V['data']>, Argument<'where', V['where']>],
		SelectionSet<T>
	>;

	readonly chinook_deleteManyMediaType: <
		V extends { where?: Variable<string> | Ichinook_MediaTypeWhereInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<'chinook_deleteManyMediaType', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_createOnePlaylist: <
		V extends { data: Variable<string> | Ichinook_PlaylistCreateInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_PlaylistSelector) => T
	) => Field<'chinook_createOnePlaylist', [Argument<'data', V['data']>], SelectionSet<T>>;

	readonly chinook_upsertOnePlaylist: <
		V extends {
			where: Variable<string> | Ichinook_PlaylistWhereUniqueInput;
			create: Variable<string> | Ichinook_PlaylistCreateInput;
			update: Variable<string> | Ichinook_PlaylistUpdateInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_PlaylistSelector) => T
	) => Field<
		'chinook_upsertOnePlaylist',
		[Argument<'where', V['where']>, Argument<'create', V['create']>, Argument<'update', V['update']>],
		SelectionSet<T>
	>;

	readonly chinook_deleteOnePlaylist: <
		V extends { where: Variable<string> | Ichinook_PlaylistWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_PlaylistSelector) => T
	) => Field<'chinook_deleteOnePlaylist', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_updateOnePlaylist: <
		V extends {
			data: Variable<string> | Ichinook_PlaylistUpdateInput;
			where: Variable<string> | Ichinook_PlaylistWhereUniqueInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_PlaylistSelector) => T
	) => Field<
		'chinook_updateOnePlaylist',
		[Argument<'data', V['data']>, Argument<'where', V['where']>],
		SelectionSet<T>
	>;

	readonly chinook_updateManyPlaylist: <
		V extends {
			data: Variable<string> | Ichinook_PlaylistUpdateManyMutationInput;
			where?: Variable<string> | Ichinook_PlaylistWhereInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<
		'chinook_updateManyPlaylist',
		[Argument<'data', V['data']>, Argument<'where', V['where']>],
		SelectionSet<T>
	>;

	readonly chinook_deleteManyPlaylist: <
		V extends { where?: Variable<string> | Ichinook_PlaylistWhereInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<'chinook_deleteManyPlaylist', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_createOnePlaylistTrack: <
		V extends { data: Variable<string> | Ichinook_PlaylistTrackCreateInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_PlaylistTrackSelector) => T
	) => Field<'chinook_createOnePlaylistTrack', [Argument<'data', V['data']>], SelectionSet<T>>;

	readonly chinook_upsertOnePlaylistTrack: <
		V extends {
			where: Variable<string> | Ichinook_PlaylistTrackWhereUniqueInput;
			create: Variable<string> | Ichinook_PlaylistTrackCreateInput;
			update: Variable<string> | Ichinook_PlaylistTrackUpdateInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_PlaylistTrackSelector) => T
	) => Field<
		'chinook_upsertOnePlaylistTrack',
		[Argument<'where', V['where']>, Argument<'create', V['create']>, Argument<'update', V['update']>],
		SelectionSet<T>
	>;

	readonly chinook_deleteOnePlaylistTrack: <
		V extends {
			where: Variable<string> | Ichinook_PlaylistTrackWhereUniqueInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_PlaylistTrackSelector) => T
	) => Field<'chinook_deleteOnePlaylistTrack', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_updateOnePlaylistTrack: <
		V extends {
			data: Variable<string> | Ichinook_PlaylistTrackUpdateInput;
			where: Variable<string> | Ichinook_PlaylistTrackWhereUniqueInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_PlaylistTrackSelector) => T
	) => Field<
		'chinook_updateOnePlaylistTrack',
		[Argument<'data', V['data']>, Argument<'where', V['where']>],
		SelectionSet<T>
	>;

	readonly chinook_updateManyPlaylistTrack: <
		V extends { where?: Variable<string> | Ichinook_PlaylistTrackWhereInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<'chinook_updateManyPlaylistTrack', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_deleteManyPlaylistTrack: <
		V extends { where?: Variable<string> | Ichinook_PlaylistTrackWhereInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<'chinook_deleteManyPlaylistTrack', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_createOneTrack: <
		V extends { data: Variable<string> | Ichinook_TrackCreateInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_TrackSelector) => T
	) => Field<'chinook_createOneTrack', [Argument<'data', V['data']>], SelectionSet<T>>;

	readonly chinook_upsertOneTrack: <
		V extends {
			where: Variable<string> | Ichinook_TrackWhereUniqueInput;
			create: Variable<string> | Ichinook_TrackCreateInput;
			update: Variable<string> | Ichinook_TrackUpdateInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_TrackSelector) => T
	) => Field<
		'chinook_upsertOneTrack',
		[Argument<'where', V['where']>, Argument<'create', V['create']>, Argument<'update', V['update']>],
		SelectionSet<T>
	>;

	readonly chinook_deleteOneTrack: <
		V extends { where: Variable<string> | Ichinook_TrackWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_TrackSelector) => T
	) => Field<'chinook_deleteOneTrack', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_updateOneTrack: <
		V extends {
			data: Variable<string> | Ichinook_TrackUpdateInput;
			where: Variable<string> | Ichinook_TrackWhereUniqueInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_TrackSelector) => T
	) => Field<'chinook_updateOneTrack', [Argument<'data', V['data']>, Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_updateManyTrack: <
		V extends {
			data: Variable<string> | Ichinook_TrackUpdateManyMutationInput;
			where?: Variable<string> | Ichinook_TrackWhereInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<'chinook_updateManyTrack', [Argument<'data', V['data']>, Argument<'where', V['where']>], SelectionSet<T>>;

	readonly chinook_deleteManyTrack: <
		V extends { where?: Variable<string> | Ichinook_TrackWhereInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Ichinook_AffectedRowsOutputSelector) => T
	) => Field<'chinook_deleteManyTrack', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly db_createOnePost: <
		V extends { data: Variable<string> | Idb_PostCreateInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_PostSelector) => T
	) => Field<'db_createOnePost', [Argument<'data', V['data']>], SelectionSet<T>>;

	readonly db_upsertOnePost: <
		V extends {
			where: Variable<string> | Idb_PostWhereUniqueInput;
			create: Variable<string> | Idb_PostCreateInput;
			update: Variable<string> | Idb_PostUpdateInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_PostSelector) => T
	) => Field<
		'db_upsertOnePost',
		[Argument<'where', V['where']>, Argument<'create', V['create']>, Argument<'update', V['update']>],
		SelectionSet<T>
	>;

	readonly db_deleteOnePost: <
		V extends { where: Variable<string> | Idb_PostWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_PostSelector) => T
	) => Field<'db_deleteOnePost', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly db_updateOnePost: <
		V extends {
			data: Variable<string> | Idb_PostUpdateInput;
			where: Variable<string> | Idb_PostWhereUniqueInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_PostSelector) => T
	) => Field<'db_updateOnePost', [Argument<'data', V['data']>, Argument<'where', V['where']>], SelectionSet<T>>;

	readonly db_updateManyPost: <
		V extends {
			data: Variable<string> | Idb_PostUpdateManyMutationInput;
			where?: Variable<string> | Idb_PostWhereInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_AffectedRowsOutputSelector) => T
	) => Field<'db_updateManyPost', [Argument<'data', V['data']>, Argument<'where', V['where']>], SelectionSet<T>>;

	readonly db_deleteManyPost: <
		V extends { where?: Variable<string> | Idb_PostWhereInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_AffectedRowsOutputSelector) => T
	) => Field<'db_deleteManyPost', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly db_createOneProfile: <
		V extends { data: Variable<string> | Idb_ProfileCreateInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_ProfileSelector) => T
	) => Field<'db_createOneProfile', [Argument<'data', V['data']>], SelectionSet<T>>;

	readonly db_upsertOneProfile: <
		V extends {
			where: Variable<string> | Idb_ProfileWhereUniqueInput;
			create: Variable<string> | Idb_ProfileCreateInput;
			update: Variable<string> | Idb_ProfileUpdateInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_ProfileSelector) => T
	) => Field<
		'db_upsertOneProfile',
		[Argument<'where', V['where']>, Argument<'create', V['create']>, Argument<'update', V['update']>],
		SelectionSet<T>
	>;

	readonly db_deleteOneProfile: <
		V extends { where: Variable<string> | Idb_ProfileWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_ProfileSelector) => T
	) => Field<'db_deleteOneProfile', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly db_updateOneProfile: <
		V extends {
			data: Variable<string> | Idb_ProfileUpdateInput;
			where: Variable<string> | Idb_ProfileWhereUniqueInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_ProfileSelector) => T
	) => Field<'db_updateOneProfile', [Argument<'data', V['data']>, Argument<'where', V['where']>], SelectionSet<T>>;

	readonly db_updateManyProfile: <
		V extends {
			data: Variable<string> | Idb_ProfileUpdateManyMutationInput;
			where?: Variable<string> | Idb_ProfileWhereInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_AffectedRowsOutputSelector) => T
	) => Field<'db_updateManyProfile', [Argument<'data', V['data']>, Argument<'where', V['where']>], SelectionSet<T>>;

	readonly db_deleteManyProfile: <
		V extends { where?: Variable<string> | Idb_ProfileWhereInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_AffectedRowsOutputSelector) => T
	) => Field<'db_deleteManyProfile', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly db_createOneUser: <
		V extends { data: Variable<string> | Idb_UserCreateInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_UserSelector) => T
	) => Field<'db_createOneUser', [Argument<'data', V['data']>], SelectionSet<T>>;

	readonly db_upsertOneUser: <
		V extends {
			where: Variable<string> | Idb_UserWhereUniqueInput;
			create: Variable<string> | Idb_UserCreateInput;
			update: Variable<string> | Idb_UserUpdateInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_UserSelector) => T
	) => Field<
		'db_upsertOneUser',
		[Argument<'where', V['where']>, Argument<'create', V['create']>, Argument<'update', V['update']>],
		SelectionSet<T>
	>;

	readonly db_deleteOneUser: <
		V extends { where: Variable<string> | Idb_UserWhereUniqueInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_UserSelector) => T
	) => Field<'db_deleteOneUser', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly db_updateOneUser: <
		V extends {
			data: Variable<string> | Idb_UserUpdateInput;
			where: Variable<string> | Idb_UserWhereUniqueInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_UserSelector) => T
	) => Field<'db_updateOneUser', [Argument<'data', V['data']>, Argument<'where', V['where']>], SelectionSet<T>>;

	readonly db_updateManyUser: <
		V extends {
			data: Variable<string> | Idb_UserUpdateManyMutationInput;
			where?: Variable<string> | Idb_UserWhereInput;
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_AffectedRowsOutputSelector) => T
	) => Field<'db_updateManyUser', [Argument<'data', V['data']>, Argument<'where', V['where']>], SelectionSet<T>>;

	readonly db_deleteManyUser: <
		V extends { where?: Variable<string> | Idb_UserWhereInput },
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_AffectedRowsOutputSelector) => T
	) => Field<'db_deleteManyUser', [Argument<'where', V['where']>], SelectionSet<T>>;

	readonly sdl_setSdlField: <V extends { sdl: Variable<string> | string }>(
		variables: V
	) => Field<'sdl_setSdlField', [Argument<'sdl', V['sdl']>]>;
}

const MutationSelector: IMutationSelector = {
	__typename: () => field('__typename'),

	chinook_createOneAlbum: (variables, select) =>
		field(
			'chinook_createOneAlbum',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AlbumSelector))
		),

	chinook_upsertOneAlbum: (variables, select) =>
		field(
			'chinook_upsertOneAlbum',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AlbumSelector))
		),

	chinook_deleteOneAlbum: (variables, select) =>
		field(
			'chinook_deleteOneAlbum',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AlbumSelector))
		),

	chinook_updateOneAlbum: (variables, select) =>
		field(
			'chinook_updateOneAlbum',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AlbumSelector))
		),

	chinook_updateManyAlbum: (variables, select) =>
		field(
			'chinook_updateManyAlbum',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_deleteManyAlbum: (variables, select) =>
		field(
			'chinook_deleteManyAlbum',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_createOneArtist: (variables, select) =>
		field(
			'chinook_createOneArtist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_ArtistSelector))
		),

	chinook_upsertOneArtist: (variables, select) =>
		field(
			'chinook_upsertOneArtist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_ArtistSelector))
		),

	chinook_deleteOneArtist: (variables, select) =>
		field(
			'chinook_deleteOneArtist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_ArtistSelector))
		),

	chinook_updateOneArtist: (variables, select) =>
		field(
			'chinook_updateOneArtist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_ArtistSelector))
		),

	chinook_updateManyArtist: (variables, select) =>
		field(
			'chinook_updateManyArtist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_deleteManyArtist: (variables, select) =>
		field(
			'chinook_deleteManyArtist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_createOneCustomer: (variables, select) =>
		field(
			'chinook_createOneCustomer',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_CustomerSelector))
		),

	chinook_upsertOneCustomer: (variables, select) =>
		field(
			'chinook_upsertOneCustomer',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_CustomerSelector))
		),

	chinook_deleteOneCustomer: (variables, select) =>
		field(
			'chinook_deleteOneCustomer',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_CustomerSelector))
		),

	chinook_updateOneCustomer: (variables, select) =>
		field(
			'chinook_updateOneCustomer',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_CustomerSelector))
		),

	chinook_updateManyCustomer: (variables, select) =>
		field(
			'chinook_updateManyCustomer',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_deleteManyCustomer: (variables, select) =>
		field(
			'chinook_deleteManyCustomer',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_createOneEmployee: (variables, select) =>
		field(
			'chinook_createOneEmployee',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_EmployeeSelector))
		),

	chinook_upsertOneEmployee: (variables, select) =>
		field(
			'chinook_upsertOneEmployee',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_EmployeeSelector))
		),

	chinook_deleteOneEmployee: (variables, select) =>
		field(
			'chinook_deleteOneEmployee',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_EmployeeSelector))
		),

	chinook_updateOneEmployee: (variables, select) =>
		field(
			'chinook_updateOneEmployee',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_EmployeeSelector))
		),

	chinook_updateManyEmployee: (variables, select) =>
		field(
			'chinook_updateManyEmployee',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_deleteManyEmployee: (variables, select) =>
		field(
			'chinook_deleteManyEmployee',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_createOneGenre: (variables, select) =>
		field(
			'chinook_createOneGenre',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_GenreSelector))
		),

	chinook_upsertOneGenre: (variables, select) =>
		field(
			'chinook_upsertOneGenre',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_GenreSelector))
		),

	chinook_deleteOneGenre: (variables, select) =>
		field(
			'chinook_deleteOneGenre',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_GenreSelector))
		),

	chinook_updateOneGenre: (variables, select) =>
		field(
			'chinook_updateOneGenre',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_GenreSelector))
		),

	chinook_updateManyGenre: (variables, select) =>
		field(
			'chinook_updateManyGenre',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_deleteManyGenre: (variables, select) =>
		field(
			'chinook_deleteManyGenre',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_createOneInvoice: (variables, select) =>
		field(
			'chinook_createOneInvoice',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_InvoiceSelector))
		),

	chinook_upsertOneInvoice: (variables, select) =>
		field(
			'chinook_upsertOneInvoice',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_InvoiceSelector))
		),

	chinook_deleteOneInvoice: (variables, select) =>
		field(
			'chinook_deleteOneInvoice',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_InvoiceSelector))
		),

	chinook_updateOneInvoice: (variables, select) =>
		field(
			'chinook_updateOneInvoice',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_InvoiceSelector))
		),

	chinook_updateManyInvoice: (variables, select) =>
		field(
			'chinook_updateManyInvoice',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_deleteManyInvoice: (variables, select) =>
		field(
			'chinook_deleteManyInvoice',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_createOneInvoiceLine: (variables, select) =>
		field(
			'chinook_createOneInvoiceLine',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_InvoiceLineSelector))
		),

	chinook_upsertOneInvoiceLine: (variables, select) =>
		field(
			'chinook_upsertOneInvoiceLine',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_InvoiceLineSelector))
		),

	chinook_deleteOneInvoiceLine: (variables, select) =>
		field(
			'chinook_deleteOneInvoiceLine',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_InvoiceLineSelector))
		),

	chinook_updateOneInvoiceLine: (variables, select) =>
		field(
			'chinook_updateOneInvoiceLine',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_InvoiceLineSelector))
		),

	chinook_updateManyInvoiceLine: (variables, select) =>
		field(
			'chinook_updateManyInvoiceLine',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_deleteManyInvoiceLine: (variables, select) =>
		field(
			'chinook_deleteManyInvoiceLine',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_createOneMediaType: (variables, select) =>
		field(
			'chinook_createOneMediaType',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_MediaTypeSelector))
		),

	chinook_upsertOneMediaType: (variables, select) =>
		field(
			'chinook_upsertOneMediaType',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_MediaTypeSelector))
		),

	chinook_deleteOneMediaType: (variables, select) =>
		field(
			'chinook_deleteOneMediaType',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_MediaTypeSelector))
		),

	chinook_updateOneMediaType: (variables, select) =>
		field(
			'chinook_updateOneMediaType',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_MediaTypeSelector))
		),

	chinook_updateManyMediaType: (variables, select) =>
		field(
			'chinook_updateManyMediaType',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_deleteManyMediaType: (variables, select) =>
		field(
			'chinook_deleteManyMediaType',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_createOnePlaylist: (variables, select) =>
		field(
			'chinook_createOnePlaylist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_PlaylistSelector))
		),

	chinook_upsertOnePlaylist: (variables, select) =>
		field(
			'chinook_upsertOnePlaylist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_PlaylistSelector))
		),

	chinook_deleteOnePlaylist: (variables, select) =>
		field(
			'chinook_deleteOnePlaylist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_PlaylistSelector))
		),

	chinook_updateOnePlaylist: (variables, select) =>
		field(
			'chinook_updateOnePlaylist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_PlaylistSelector))
		),

	chinook_updateManyPlaylist: (variables, select) =>
		field(
			'chinook_updateManyPlaylist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_deleteManyPlaylist: (variables, select) =>
		field(
			'chinook_deleteManyPlaylist',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_createOnePlaylistTrack: (variables, select) =>
		field(
			'chinook_createOnePlaylistTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_PlaylistTrackSelector))
		),

	chinook_upsertOnePlaylistTrack: (variables, select) =>
		field(
			'chinook_upsertOnePlaylistTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_PlaylistTrackSelector))
		),

	chinook_deleteOnePlaylistTrack: (variables, select) =>
		field(
			'chinook_deleteOnePlaylistTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_PlaylistTrackSelector))
		),

	chinook_updateOnePlaylistTrack: (variables, select) =>
		field(
			'chinook_updateOnePlaylistTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_PlaylistTrackSelector))
		),

	chinook_updateManyPlaylistTrack: (variables, select) =>
		field(
			'chinook_updateManyPlaylistTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_deleteManyPlaylistTrack: (variables, select) =>
		field(
			'chinook_deleteManyPlaylistTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_createOneTrack: (variables, select) =>
		field(
			'chinook_createOneTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_TrackSelector))
		),

	chinook_upsertOneTrack: (variables, select) =>
		field(
			'chinook_upsertOneTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_TrackSelector))
		),

	chinook_deleteOneTrack: (variables, select) =>
		field(
			'chinook_deleteOneTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_TrackSelector))
		),

	chinook_updateOneTrack: (variables, select) =>
		field(
			'chinook_updateOneTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_TrackSelector))
		),

	chinook_updateManyTrack: (variables, select) =>
		field(
			'chinook_updateManyTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	chinook_deleteManyTrack: (variables, select) =>
		field(
			'chinook_deleteManyTrack',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(chinook_AffectedRowsOutputSelector))
		),

	db_createOnePost: (variables, select) =>
		field(
			'db_createOnePost',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_PostSelector))
		),

	db_upsertOnePost: (variables, select) =>
		field(
			'db_upsertOnePost',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_PostSelector))
		),

	db_deleteOnePost: (variables, select) =>
		field(
			'db_deleteOnePost',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_PostSelector))
		),

	db_updateOnePost: (variables, select) =>
		field(
			'db_updateOnePost',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_PostSelector))
		),

	db_updateManyPost: (variables, select) =>
		field(
			'db_updateManyPost',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_AffectedRowsOutputSelector))
		),

	db_deleteManyPost: (variables, select) =>
		field(
			'db_deleteManyPost',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_AffectedRowsOutputSelector))
		),

	db_createOneProfile: (variables, select) =>
		field(
			'db_createOneProfile',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_ProfileSelector))
		),

	db_upsertOneProfile: (variables, select) =>
		field(
			'db_upsertOneProfile',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_ProfileSelector))
		),

	db_deleteOneProfile: (variables, select) =>
		field(
			'db_deleteOneProfile',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_ProfileSelector))
		),

	db_updateOneProfile: (variables, select) =>
		field(
			'db_updateOneProfile',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_ProfileSelector))
		),

	db_updateManyProfile: (variables, select) =>
		field(
			'db_updateManyProfile',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_AffectedRowsOutputSelector))
		),

	db_deleteManyProfile: (variables, select) =>
		field(
			'db_deleteManyProfile',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_AffectedRowsOutputSelector))
		),

	db_createOneUser: (variables, select) =>
		field(
			'db_createOneUser',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_UserSelector))
		),

	db_upsertOneUser: (variables, select) =>
		field(
			'db_upsertOneUser',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_UserSelector))
		),

	db_deleteOneUser: (variables, select) =>
		field(
			'db_deleteOneUser',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_UserSelector))
		),

	db_updateOneUser: (variables, select) =>
		field(
			'db_updateOneUser',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_UserSelector))
		),

	db_updateManyUser: (variables, select) =>
		field(
			'db_updateManyUser',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_AffectedRowsOutputSelector))
		),

	db_deleteManyUser: (variables, select) =>
		field(
			'db_deleteManyUser',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_AffectedRowsOutputSelector))
		),

	sdl_setSdlField: (variables) =>
		field('sdl_setSdlField', Object.entries(variables).map(([k, v]) => argument(k, v)) as any),
};

export const mutation = <T extends ReadonlyArray<Selection>>(select: (t: IMutationSelector) => T) =>
	new SelectionBuilder<ISchema, 'Mutation', T>(SCHEMA as any, 'Mutation', select(MutationSelector));

interface Idb_ProfileSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly bio: () => Field<'bio'>;

	readonly userId: () => Field<'userId'>;

	readonly User: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_UserSelector) => T
	) => Field<'User', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_ProfileSelector: Idb_ProfileSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	bio: () => field('bio'),
	userId: () => field('userId'),

	User: (select) => field('User', undefined as never, selectionSet(select(db_UserSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_Profile = <T extends ReadonlyArray<Selection>>(select: (t: Idb_ProfileSelector) => T) =>
	new SelectionBuilder<ISchema, 'db_Profile', T>(SCHEMA as any, 'db_Profile', select(db_ProfileSelector));

interface Idb_UserCountOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly Post: () => Field<'Post'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_UserCountOutputTypeSelector: Idb_UserCountOutputTypeSelector = {
	__typename: () => field('__typename'),
	Post: () => field('Post'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_UserCountOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_UserCountOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_UserCountOutputType', T>(
		SCHEMA as any,
		'db_UserCountOutputType',
		select(db_UserCountOutputTypeSelector)
	);

interface Idb_UserSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly email: () => Field<'email'>;

	readonly name: () => Field<'name'>;

	readonly Post: <
		V extends {
			where?: Variable<string> | Idb_PostWhereInput;
			orderBy?: Variable<string> | Idb_PostOrderByWithRelationInput[];
			cursor?: Variable<string> | Idb_PostWhereUniqueInput;
			take?: Variable<string> | number;
			skip?: Variable<string> | number;
			distinct?: Variable<string> | db_PostScalarFieldEnum[];
		},
		T extends ReadonlyArray<Selection>
	>(
		variables: V,
		select: (t: Idb_PostSelector) => T
	) => Field<
		'Post',
		[
			Argument<'where', V['where']>,
			Argument<'orderBy', V['orderBy']>,
			Argument<'cursor', V['cursor']>,
			Argument<'take', V['take']>,
			Argument<'skip', V['skip']>,
			Argument<'distinct', V['distinct']>
		],
		SelectionSet<T>
	>;

	readonly Profile: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_ProfileSelector) => T
	) => Field<'Profile', never, SelectionSet<T>>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_UserCountOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_UserSelector: Idb_UserSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	email: () => field('email'),
	name: () => field('name'),

	Post: (variables, select) =>
		field(
			'Post',
			Object.entries(variables).map(([k, v]) => argument(k, v)) as any,
			selectionSet(select(db_PostSelector))
		),

	Profile: (select) => field('Profile', undefined as never, selectionSet(select(db_ProfileSelector))),

	_count: (select) => field('_count', undefined as never, selectionSet(select(db_UserCountOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_User = <T extends ReadonlyArray<Selection>>(select: (t: Idb_UserSelector) => T) =>
	new SelectionBuilder<ISchema, 'db_User', T>(SCHEMA as any, 'db_User', select(db_UserSelector));

interface Idb_PostSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly createdAt: () => Field<'createdAt'>;

	readonly updatedAt: () => Field<'updatedAt'>;

	readonly title: () => Field<'title'>;

	readonly content: () => Field<'content'>;

	readonly published: () => Field<'published'>;

	readonly authorId: () => Field<'authorId'>;

	readonly User: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_UserSelector) => T
	) => Field<'User', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_PostSelector: Idb_PostSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	createdAt: () => field('createdAt'),
	updatedAt: () => field('updatedAt'),
	title: () => field('title'),
	content: () => field('content'),
	published: () => field('published'),
	authorId: () => field('authorId'),

	User: (select) => field('User', undefined as never, selectionSet(select(db_UserSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_Post = <T extends ReadonlyArray<Selection>>(select: (t: Idb_PostSelector) => T) =>
	new SelectionBuilder<ISchema, 'db_Post', T>(SCHEMA as any, 'db_Post', select(db_PostSelector));

interface Idb_PostCountAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly createdAt: () => Field<'createdAt'>;

	readonly updatedAt: () => Field<'updatedAt'>;

	readonly title: () => Field<'title'>;

	readonly content: () => Field<'content'>;

	readonly published: () => Field<'published'>;

	readonly authorId: () => Field<'authorId'>;

	readonly _all: () => Field<'_all'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_PostCountAggregateOutputTypeSelector: Idb_PostCountAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	createdAt: () => field('createdAt'),
	updatedAt: () => field('updatedAt'),
	title: () => field('title'),
	content: () => field('content'),
	published: () => field('published'),
	authorId: () => field('authorId'),
	_all: () => field('_all'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_PostCountAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_PostCountAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_PostCountAggregateOutputType', T>(
		SCHEMA as any,
		'db_PostCountAggregateOutputType',
		select(db_PostCountAggregateOutputTypeSelector)
	);

interface Idb_PostAvgAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly authorId: () => Field<'authorId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_PostAvgAggregateOutputTypeSelector: Idb_PostAvgAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	authorId: () => field('authorId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_PostAvgAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_PostAvgAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_PostAvgAggregateOutputType', T>(
		SCHEMA as any,
		'db_PostAvgAggregateOutputType',
		select(db_PostAvgAggregateOutputTypeSelector)
	);

interface Idb_PostSumAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly authorId: () => Field<'authorId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_PostSumAggregateOutputTypeSelector: Idb_PostSumAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	authorId: () => field('authorId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_PostSumAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_PostSumAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_PostSumAggregateOutputType', T>(
		SCHEMA as any,
		'db_PostSumAggregateOutputType',
		select(db_PostSumAggregateOutputTypeSelector)
	);

interface Idb_PostMinAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly createdAt: () => Field<'createdAt'>;

	readonly updatedAt: () => Field<'updatedAt'>;

	readonly title: () => Field<'title'>;

	readonly content: () => Field<'content'>;

	readonly published: () => Field<'published'>;

	readonly authorId: () => Field<'authorId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_PostMinAggregateOutputTypeSelector: Idb_PostMinAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	createdAt: () => field('createdAt'),
	updatedAt: () => field('updatedAt'),
	title: () => field('title'),
	content: () => field('content'),
	published: () => field('published'),
	authorId: () => field('authorId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_PostMinAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_PostMinAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_PostMinAggregateOutputType', T>(
		SCHEMA as any,
		'db_PostMinAggregateOutputType',
		select(db_PostMinAggregateOutputTypeSelector)
	);

interface Idb_PostMaxAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly createdAt: () => Field<'createdAt'>;

	readonly updatedAt: () => Field<'updatedAt'>;

	readonly title: () => Field<'title'>;

	readonly content: () => Field<'content'>;

	readonly published: () => Field<'published'>;

	readonly authorId: () => Field<'authorId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_PostMaxAggregateOutputTypeSelector: Idb_PostMaxAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	createdAt: () => field('createdAt'),
	updatedAt: () => field('updatedAt'),
	title: () => field('title'),
	content: () => field('content'),
	published: () => field('published'),
	authorId: () => field('authorId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_PostMaxAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_PostMaxAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_PostMaxAggregateOutputType', T>(
		SCHEMA as any,
		'db_PostMaxAggregateOutputType',
		select(db_PostMaxAggregateOutputTypeSelector)
	);

interface Idb_AggregatePostSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_PostCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_PostAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_PostSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_PostMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_PostMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_AggregatePostSelector: Idb_AggregatePostSelector = {
	__typename: () => field('__typename'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(db_PostCountAggregateOutputTypeSelector))),

	_avg: (select) => field('_avg', undefined as never, selectionSet(select(db_PostAvgAggregateOutputTypeSelector))),

	_sum: (select) => field('_sum', undefined as never, selectionSet(select(db_PostSumAggregateOutputTypeSelector))),

	_min: (select) => field('_min', undefined as never, selectionSet(select(db_PostMinAggregateOutputTypeSelector))),

	_max: (select) => field('_max', undefined as never, selectionSet(select(db_PostMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_AggregatePost = <T extends ReadonlyArray<Selection>>(select: (t: Idb_AggregatePostSelector) => T) =>
	new SelectionBuilder<ISchema, 'db_AggregatePost', T>(
		SCHEMA as any,
		'db_AggregatePost',
		select(db_AggregatePostSelector)
	);

interface Idb_PostGroupByOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly createdAt: () => Field<'createdAt'>;

	readonly updatedAt: () => Field<'updatedAt'>;

	readonly title: () => Field<'title'>;

	readonly content: () => Field<'content'>;

	readonly published: () => Field<'published'>;

	readonly authorId: () => Field<'authorId'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_PostCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_PostAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_PostSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_PostMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_PostMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_PostGroupByOutputTypeSelector: Idb_PostGroupByOutputTypeSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	createdAt: () => field('createdAt'),
	updatedAt: () => field('updatedAt'),
	title: () => field('title'),
	content: () => field('content'),
	published: () => field('published'),
	authorId: () => field('authorId'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(db_PostCountAggregateOutputTypeSelector))),

	_avg: (select) => field('_avg', undefined as never, selectionSet(select(db_PostAvgAggregateOutputTypeSelector))),

	_sum: (select) => field('_sum', undefined as never, selectionSet(select(db_PostSumAggregateOutputTypeSelector))),

	_min: (select) => field('_min', undefined as never, selectionSet(select(db_PostMinAggregateOutputTypeSelector))),

	_max: (select) => field('_max', undefined as never, selectionSet(select(db_PostMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_PostGroupByOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_PostGroupByOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_PostGroupByOutputType', T>(
		SCHEMA as any,
		'db_PostGroupByOutputType',
		select(db_PostGroupByOutputTypeSelector)
	);

interface Idb_ProfileCountAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly bio: () => Field<'bio'>;

	readonly userId: () => Field<'userId'>;

	readonly _all: () => Field<'_all'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_ProfileCountAggregateOutputTypeSelector: Idb_ProfileCountAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	bio: () => field('bio'),
	userId: () => field('userId'),
	_all: () => field('_all'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_ProfileCountAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_ProfileCountAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_ProfileCountAggregateOutputType', T>(
		SCHEMA as any,
		'db_ProfileCountAggregateOutputType',
		select(db_ProfileCountAggregateOutputTypeSelector)
	);

interface Idb_ProfileAvgAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly userId: () => Field<'userId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_ProfileAvgAggregateOutputTypeSelector: Idb_ProfileAvgAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	userId: () => field('userId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_ProfileAvgAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_ProfileAvgAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_ProfileAvgAggregateOutputType', T>(
		SCHEMA as any,
		'db_ProfileAvgAggregateOutputType',
		select(db_ProfileAvgAggregateOutputTypeSelector)
	);

interface Idb_ProfileSumAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly userId: () => Field<'userId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_ProfileSumAggregateOutputTypeSelector: Idb_ProfileSumAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	userId: () => field('userId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_ProfileSumAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_ProfileSumAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_ProfileSumAggregateOutputType', T>(
		SCHEMA as any,
		'db_ProfileSumAggregateOutputType',
		select(db_ProfileSumAggregateOutputTypeSelector)
	);

interface Idb_ProfileMinAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly bio: () => Field<'bio'>;

	readonly userId: () => Field<'userId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_ProfileMinAggregateOutputTypeSelector: Idb_ProfileMinAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	bio: () => field('bio'),
	userId: () => field('userId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_ProfileMinAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_ProfileMinAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_ProfileMinAggregateOutputType', T>(
		SCHEMA as any,
		'db_ProfileMinAggregateOutputType',
		select(db_ProfileMinAggregateOutputTypeSelector)
	);

interface Idb_ProfileMaxAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly bio: () => Field<'bio'>;

	readonly userId: () => Field<'userId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_ProfileMaxAggregateOutputTypeSelector: Idb_ProfileMaxAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	bio: () => field('bio'),
	userId: () => field('userId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_ProfileMaxAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_ProfileMaxAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_ProfileMaxAggregateOutputType', T>(
		SCHEMA as any,
		'db_ProfileMaxAggregateOutputType',
		select(db_ProfileMaxAggregateOutputTypeSelector)
	);

interface Idb_AggregateProfileSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_ProfileCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_ProfileAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_ProfileSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_ProfileMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_ProfileMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_AggregateProfileSelector: Idb_AggregateProfileSelector = {
	__typename: () => field('__typename'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(db_ProfileCountAggregateOutputTypeSelector))),

	_avg: (select) => field('_avg', undefined as never, selectionSet(select(db_ProfileAvgAggregateOutputTypeSelector))),

	_sum: (select) => field('_sum', undefined as never, selectionSet(select(db_ProfileSumAggregateOutputTypeSelector))),

	_min: (select) => field('_min', undefined as never, selectionSet(select(db_ProfileMinAggregateOutputTypeSelector))),

	_max: (select) => field('_max', undefined as never, selectionSet(select(db_ProfileMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_AggregateProfile = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_AggregateProfileSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_AggregateProfile', T>(
		SCHEMA as any,
		'db_AggregateProfile',
		select(db_AggregateProfileSelector)
	);

interface Idb_ProfileGroupByOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly bio: () => Field<'bio'>;

	readonly userId: () => Field<'userId'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_ProfileCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_ProfileAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_ProfileSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_ProfileMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_ProfileMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_ProfileGroupByOutputTypeSelector: Idb_ProfileGroupByOutputTypeSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	bio: () => field('bio'),
	userId: () => field('userId'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(db_ProfileCountAggregateOutputTypeSelector))),

	_avg: (select) => field('_avg', undefined as never, selectionSet(select(db_ProfileAvgAggregateOutputTypeSelector))),

	_sum: (select) => field('_sum', undefined as never, selectionSet(select(db_ProfileSumAggregateOutputTypeSelector))),

	_min: (select) => field('_min', undefined as never, selectionSet(select(db_ProfileMinAggregateOutputTypeSelector))),

	_max: (select) => field('_max', undefined as never, selectionSet(select(db_ProfileMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_ProfileGroupByOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_ProfileGroupByOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_ProfileGroupByOutputType', T>(
		SCHEMA as any,
		'db_ProfileGroupByOutputType',
		select(db_ProfileGroupByOutputTypeSelector)
	);

interface Idb_UserCountAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly email: () => Field<'email'>;

	readonly name: () => Field<'name'>;

	readonly _all: () => Field<'_all'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_UserCountAggregateOutputTypeSelector: Idb_UserCountAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	email: () => field('email'),
	name: () => field('name'),
	_all: () => field('_all'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_UserCountAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_UserCountAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_UserCountAggregateOutputType', T>(
		SCHEMA as any,
		'db_UserCountAggregateOutputType',
		select(db_UserCountAggregateOutputTypeSelector)
	);

interface Idb_UserAvgAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_UserAvgAggregateOutputTypeSelector: Idb_UserAvgAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_UserAvgAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_UserAvgAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_UserAvgAggregateOutputType', T>(
		SCHEMA as any,
		'db_UserAvgAggregateOutputType',
		select(db_UserAvgAggregateOutputTypeSelector)
	);

interface Idb_UserSumAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_UserSumAggregateOutputTypeSelector: Idb_UserSumAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_UserSumAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_UserSumAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_UserSumAggregateOutputType', T>(
		SCHEMA as any,
		'db_UserSumAggregateOutputType',
		select(db_UserSumAggregateOutputTypeSelector)
	);

interface Idb_UserMinAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly email: () => Field<'email'>;

	readonly name: () => Field<'name'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_UserMinAggregateOutputTypeSelector: Idb_UserMinAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	email: () => field('email'),
	name: () => field('name'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_UserMinAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_UserMinAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_UserMinAggregateOutputType', T>(
		SCHEMA as any,
		'db_UserMinAggregateOutputType',
		select(db_UserMinAggregateOutputTypeSelector)
	);

interface Idb_UserMaxAggregateOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly email: () => Field<'email'>;

	readonly name: () => Field<'name'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_UserMaxAggregateOutputTypeSelector: Idb_UserMaxAggregateOutputTypeSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	email: () => field('email'),
	name: () => field('name'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_UserMaxAggregateOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_UserMaxAggregateOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_UserMaxAggregateOutputType', T>(
		SCHEMA as any,
		'db_UserMaxAggregateOutputType',
		select(db_UserMaxAggregateOutputTypeSelector)
	);

interface Idb_AggregateUserSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_UserCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_UserAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_UserSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_UserMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_UserMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_AggregateUserSelector: Idb_AggregateUserSelector = {
	__typename: () => field('__typename'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(db_UserCountAggregateOutputTypeSelector))),

	_avg: (select) => field('_avg', undefined as never, selectionSet(select(db_UserAvgAggregateOutputTypeSelector))),

	_sum: (select) => field('_sum', undefined as never, selectionSet(select(db_UserSumAggregateOutputTypeSelector))),

	_min: (select) => field('_min', undefined as never, selectionSet(select(db_UserMinAggregateOutputTypeSelector))),

	_max: (select) => field('_max', undefined as never, selectionSet(select(db_UserMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_AggregateUser = <T extends ReadonlyArray<Selection>>(select: (t: Idb_AggregateUserSelector) => T) =>
	new SelectionBuilder<ISchema, 'db_AggregateUser', T>(
		SCHEMA as any,
		'db_AggregateUser',
		select(db_AggregateUserSelector)
	);

interface Idb_UserGroupByOutputTypeSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly email: () => Field<'email'>;

	readonly name: () => Field<'name'>;

	readonly _count: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_UserCountAggregateOutputTypeSelector) => T
	) => Field<'_count', never, SelectionSet<T>>;

	readonly _avg: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_UserAvgAggregateOutputTypeSelector) => T
	) => Field<'_avg', never, SelectionSet<T>>;

	readonly _sum: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_UserSumAggregateOutputTypeSelector) => T
	) => Field<'_sum', never, SelectionSet<T>>;

	readonly _min: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_UserMinAggregateOutputTypeSelector) => T
	) => Field<'_min', never, SelectionSet<T>>;

	readonly _max: <T extends ReadonlyArray<Selection>>(
		select: (t: Idb_UserMaxAggregateOutputTypeSelector) => T
	) => Field<'_max', never, SelectionSet<T>>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_UserGroupByOutputTypeSelector: Idb_UserGroupByOutputTypeSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	email: () => field('email'),
	name: () => field('name'),

	_count: (select) =>
		field('_count', undefined as never, selectionSet(select(db_UserCountAggregateOutputTypeSelector))),

	_avg: (select) => field('_avg', undefined as never, selectionSet(select(db_UserAvgAggregateOutputTypeSelector))),

	_sum: (select) => field('_sum', undefined as never, selectionSet(select(db_UserSumAggregateOutputTypeSelector))),

	_min: (select) => field('_min', undefined as never, selectionSet(select(db_UserMinAggregateOutputTypeSelector))),

	_max: (select) => field('_max', undefined as never, selectionSet(select(db_UserMaxAggregateOutputTypeSelector))),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_UserGroupByOutputType = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_UserGroupByOutputTypeSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_UserGroupByOutputType', T>(
		SCHEMA as any,
		'db_UserGroupByOutputType',
		select(db_UserGroupByOutputTypeSelector)
	);

interface Idb_AffectedRowsOutputSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly count: () => Field<'count'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const db_AffectedRowsOutputSelector: Idb_AffectedRowsOutputSelector = {
	__typename: () => field('__typename'),
	count: () => field('count'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const db_AffectedRowsOutput = <T extends ReadonlyArray<Selection>>(
	select: (t: Idb_AffectedRowsOutputSelector) => T
) =>
	new SelectionBuilder<ISchema, 'db_AffectedRowsOutput', T>(
		SCHEMA as any,
		'db_AffectedRowsOutput',
		select(db_AffectedRowsOutputSelector)
	);

interface Ijsp2_PostSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly userId: () => Field<'userId'>;

	readonly title: () => Field<'title'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const jsp2_PostSelector: Ijsp2_PostSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	userId: () => field('userId'),
	title: () => field('title'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const jsp2_Post = <T extends ReadonlyArray<Selection>>(select: (t: Ijsp2_PostSelector) => T) =>
	new SelectionBuilder<ISchema, 'jsp2_Post', T>(SCHEMA as any, 'jsp2_Post', select(jsp2_PostSelector));

interface Ijsp2_UserSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly name: () => Field<'name'>;

	readonly username: () => Field<'username'>;

	readonly email: () => Field<'email'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const jsp2_UserSelector: Ijsp2_UserSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	name: () => field('name'),
	username: () => field('username'),
	email: () => field('email'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const jsp2_User = <T extends ReadonlyArray<Selection>>(select: (t: Ijsp2_UserSelector) => T) =>
	new SelectionBuilder<ISchema, 'jsp2_User', T>(SCHEMA as any, 'jsp2_User', select(jsp2_UserSelector));

interface Iibm_jsp_PostSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly title: () => Field<'title'>;

	readonly userId: () => Field<'userId'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const ibm_jsp_PostSelector: Iibm_jsp_PostSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	title: () => field('title'),
	userId: () => field('userId'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const ibm_jsp_Post = <T extends ReadonlyArray<Selection>>(select: (t: Iibm_jsp_PostSelector) => T) =>
	new SelectionBuilder<ISchema, 'ibm_jsp_Post', T>(SCHEMA as any, 'ibm_jsp_Post', select(ibm_jsp_PostSelector));

interface Iibm_jsp_UserSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly email: () => Field<'email'>;

	readonly id: () => Field<'id'>;

	readonly name: () => Field<'name'>;

	readonly username: () => Field<'username'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const ibm_jsp_UserSelector: Iibm_jsp_UserSelector = {
	__typename: () => field('__typename'),
	email: () => field('email'),
	id: () => field('id'),
	name: () => field('name'),
	username: () => field('username'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const ibm_jsp_User = <T extends ReadonlyArray<Selection>>(select: (t: Iibm_jsp_UserSelector) => T) =>
	new SelectionBuilder<ISchema, 'ibm_jsp_User', T>(SCHEMA as any, 'ibm_jsp_User', select(ibm_jsp_UserSelector));

interface Ipublic_ASelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly name: () => Field<'name'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const public_ASelector: Ipublic_ASelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	name: () => field('name'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const public_A = <T extends ReadonlyArray<Selection>>(select: (t: Ipublic_ASelector) => T) =>
	new SelectionBuilder<ISchema, 'public_A', T>(SCHEMA as any, 'public_A', select(public_ASelector));

interface Ipublic_BSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly id: () => Field<'id'>;

	readonly name: () => Field<'name'>;

	readonly _join: <T extends ReadonlyArray<Selection>>(
		select: (t: IQuerySelector) => T
	) => Field<'_join', never, SelectionSet<T>>;
}

const public_BSelector: Ipublic_BSelector = {
	__typename: () => field('__typename'),
	id: () => field('id'),
	name: () => field('name'),

	_join: (select) => field('_join', undefined as never, selectionSet(select(QuerySelector))),
};

export const public_B = <T extends ReadonlyArray<Selection>>(select: (t: Ipublic_BSelector) => T) =>
	new SelectionBuilder<ISchema, 'public_B', T>(SCHEMA as any, 'public_B', select(public_BSelector));

interface Ipublic_GqlUnionSelector {
	readonly __typename: () => Field<'__typename'>;

	readonly on: <T extends ReadonlyArray<Selection>, F extends 'public_A' | 'public_B'>(
		type: F,
		select: (t: F extends 'public_A' ? Ipublic_ASelector : F extends 'public_B' ? Ipublic_BSelector : never) => T
	) => InlineFragment<NamedType<F>, SelectionSet<T>>;
}

const public_GqlUnionSelector: Ipublic_GqlUnionSelector = {
	__typename: () => field('__typename'),

	on: (type, select) => {
		switch (type) {
			case 'public_A': {
				return inlineFragment(
					namedType('public_A'),
					selectionSet(select(public_ASelector as Parameters<typeof select>[0]))
				);
			}

			case 'public_B': {
				return inlineFragment(
					namedType('public_B'),
					selectionSet(select(public_BSelector as Parameters<typeof select>[0]))
				);
			}

			default:
				throw new TypeConditionError({
					selectedType: type,
					abstractType: 'public_GqlUnion',
				});
		}
	},
};

export const public_GqlUnion = <T extends ReadonlyArray<Selection>>(select: (t: Ipublic_GqlUnionSelector) => T) =>
	new SelectionBuilder<ISchema, 'public_GqlUnion', T>(
		SCHEMA as any,
		'public_GqlUnion',
		select(public_GqlUnionSelector)
	);
